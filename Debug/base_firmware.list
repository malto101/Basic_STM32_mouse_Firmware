
base_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aba0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800ad30  0800ad30  0001ad30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800addc  0800addc  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  0800addc  0800addc  0001addc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ade4  0800ade4  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ade4  0800ade4  0001ade4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ade8  0800ade8  0001ade8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800adec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020188  2**0
                  CONTENTS
 10 .bss          00001e9c  20000188  20000188  00020188  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002024  20002024  00020188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017bc5  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a8a  00000000  00000000  00037d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  0003b808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001290  00000000  00000000  0003cc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000228c6  00000000  00000000  0003def0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000193c4  00000000  00000000  000607b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4fd5  00000000  00000000  00079b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013eb4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058d8  00000000  00000000  0013eba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000188 	.word	0x20000188
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad18 	.word	0x0800ad18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000018c 	.word	0x2000018c
 80001cc:	0800ad18 	.word	0x0800ad18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295
 8000608:	f04f 30ff 	movne.w	r0, #4294967295
 800060c:	f000 b974 	b.w	80008f8 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9d08      	ldr	r5, [sp, #32]
 800062e:	4604      	mov	r4, r0
 8000630:	468e      	mov	lr, r1
 8000632:	2b00      	cmp	r3, #0
 8000634:	d14d      	bne.n	80006d2 <__udivmoddi4+0xaa>
 8000636:	428a      	cmp	r2, r1
 8000638:	4694      	mov	ip, r2
 800063a:	d969      	bls.n	8000710 <__udivmoddi4+0xe8>
 800063c:	fab2 f282 	clz	r2, r2
 8000640:	b152      	cbz	r2, 8000658 <__udivmoddi4+0x30>
 8000642:	fa01 f302 	lsl.w	r3, r1, r2
 8000646:	f1c2 0120 	rsb	r1, r2, #32
 800064a:	fa20 f101 	lsr.w	r1, r0, r1
 800064e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000652:	ea41 0e03 	orr.w	lr, r1, r3
 8000656:	4094      	lsls	r4, r2
 8000658:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800065c:	0c21      	lsrs	r1, r4, #16
 800065e:	fbbe f6f8 	udiv	r6, lr, r8
 8000662:	fa1f f78c 	uxth.w	r7, ip
 8000666:	fb08 e316 	mls	r3, r8, r6, lr
 800066a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800066e:	fb06 f107 	mul.w	r1, r6, r7
 8000672:	4299      	cmp	r1, r3
 8000674:	d90a      	bls.n	800068c <__udivmoddi4+0x64>
 8000676:	eb1c 0303 	adds.w	r3, ip, r3
 800067a:	f106 30ff 	add.w	r0, r6, #4294967295
 800067e:	f080 811f 	bcs.w	80008c0 <__udivmoddi4+0x298>
 8000682:	4299      	cmp	r1, r3
 8000684:	f240 811c 	bls.w	80008c0 <__udivmoddi4+0x298>
 8000688:	3e02      	subs	r6, #2
 800068a:	4463      	add	r3, ip
 800068c:	1a5b      	subs	r3, r3, r1
 800068e:	b2a4      	uxth	r4, r4
 8000690:	fbb3 f0f8 	udiv	r0, r3, r8
 8000694:	fb08 3310 	mls	r3, r8, r0, r3
 8000698:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800069c:	fb00 f707 	mul.w	r7, r0, r7
 80006a0:	42a7      	cmp	r7, r4
 80006a2:	d90a      	bls.n	80006ba <__udivmoddi4+0x92>
 80006a4:	eb1c 0404 	adds.w	r4, ip, r4
 80006a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ac:	f080 810a 	bcs.w	80008c4 <__udivmoddi4+0x29c>
 80006b0:	42a7      	cmp	r7, r4
 80006b2:	f240 8107 	bls.w	80008c4 <__udivmoddi4+0x29c>
 80006b6:	4464      	add	r4, ip
 80006b8:	3802      	subs	r0, #2
 80006ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006be:	1be4      	subs	r4, r4, r7
 80006c0:	2600      	movs	r6, #0
 80006c2:	b11d      	cbz	r5, 80006cc <__udivmoddi4+0xa4>
 80006c4:	40d4      	lsrs	r4, r2
 80006c6:	2300      	movs	r3, #0
 80006c8:	e9c5 4300 	strd	r4, r3, [r5]
 80006cc:	4631      	mov	r1, r6
 80006ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d909      	bls.n	80006ea <__udivmoddi4+0xc2>
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	f000 80ef 	beq.w	80008ba <__udivmoddi4+0x292>
 80006dc:	2600      	movs	r6, #0
 80006de:	e9c5 0100 	strd	r0, r1, [r5]
 80006e2:	4630      	mov	r0, r6
 80006e4:	4631      	mov	r1, r6
 80006e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ea:	fab3 f683 	clz	r6, r3
 80006ee:	2e00      	cmp	r6, #0
 80006f0:	d14a      	bne.n	8000788 <__udivmoddi4+0x160>
 80006f2:	428b      	cmp	r3, r1
 80006f4:	d302      	bcc.n	80006fc <__udivmoddi4+0xd4>
 80006f6:	4282      	cmp	r2, r0
 80006f8:	f200 80f9 	bhi.w	80008ee <__udivmoddi4+0x2c6>
 80006fc:	1a84      	subs	r4, r0, r2
 80006fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000702:	2001      	movs	r0, #1
 8000704:	469e      	mov	lr, r3
 8000706:	2d00      	cmp	r5, #0
 8000708:	d0e0      	beq.n	80006cc <__udivmoddi4+0xa4>
 800070a:	e9c5 4e00 	strd	r4, lr, [r5]
 800070e:	e7dd      	b.n	80006cc <__udivmoddi4+0xa4>
 8000710:	b902      	cbnz	r2, 8000714 <__udivmoddi4+0xec>
 8000712:	deff      	udf	#255	; 0xff
 8000714:	fab2 f282 	clz	r2, r2
 8000718:	2a00      	cmp	r2, #0
 800071a:	f040 8092 	bne.w	8000842 <__udivmoddi4+0x21a>
 800071e:	eba1 010c 	sub.w	r1, r1, ip
 8000722:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000726:	fa1f fe8c 	uxth.w	lr, ip
 800072a:	2601      	movs	r6, #1
 800072c:	0c20      	lsrs	r0, r4, #16
 800072e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000732:	fb07 1113 	mls	r1, r7, r3, r1
 8000736:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800073a:	fb0e f003 	mul.w	r0, lr, r3
 800073e:	4288      	cmp	r0, r1
 8000740:	d908      	bls.n	8000754 <__udivmoddi4+0x12c>
 8000742:	eb1c 0101 	adds.w	r1, ip, r1
 8000746:	f103 38ff 	add.w	r8, r3, #4294967295
 800074a:	d202      	bcs.n	8000752 <__udivmoddi4+0x12a>
 800074c:	4288      	cmp	r0, r1
 800074e:	f200 80cb 	bhi.w	80008e8 <__udivmoddi4+0x2c0>
 8000752:	4643      	mov	r3, r8
 8000754:	1a09      	subs	r1, r1, r0
 8000756:	b2a4      	uxth	r4, r4
 8000758:	fbb1 f0f7 	udiv	r0, r1, r7
 800075c:	fb07 1110 	mls	r1, r7, r0, r1
 8000760:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000764:	fb0e fe00 	mul.w	lr, lr, r0
 8000768:	45a6      	cmp	lr, r4
 800076a:	d908      	bls.n	800077e <__udivmoddi4+0x156>
 800076c:	eb1c 0404 	adds.w	r4, ip, r4
 8000770:	f100 31ff 	add.w	r1, r0, #4294967295
 8000774:	d202      	bcs.n	800077c <__udivmoddi4+0x154>
 8000776:	45a6      	cmp	lr, r4
 8000778:	f200 80bb 	bhi.w	80008f2 <__udivmoddi4+0x2ca>
 800077c:	4608      	mov	r0, r1
 800077e:	eba4 040e 	sub.w	r4, r4, lr
 8000782:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000786:	e79c      	b.n	80006c2 <__udivmoddi4+0x9a>
 8000788:	f1c6 0720 	rsb	r7, r6, #32
 800078c:	40b3      	lsls	r3, r6
 800078e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000792:	ea4c 0c03 	orr.w	ip, ip, r3
 8000796:	fa20 f407 	lsr.w	r4, r0, r7
 800079a:	fa01 f306 	lsl.w	r3, r1, r6
 800079e:	431c      	orrs	r4, r3
 80007a0:	40f9      	lsrs	r1, r7
 80007a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007a6:	fa00 f306 	lsl.w	r3, r0, r6
 80007aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80007ae:	0c20      	lsrs	r0, r4, #16
 80007b0:	fa1f fe8c 	uxth.w	lr, ip
 80007b4:	fb09 1118 	mls	r1, r9, r8, r1
 80007b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007bc:	fb08 f00e 	mul.w	r0, r8, lr
 80007c0:	4288      	cmp	r0, r1
 80007c2:	fa02 f206 	lsl.w	r2, r2, r6
 80007c6:	d90b      	bls.n	80007e0 <__udivmoddi4+0x1b8>
 80007c8:	eb1c 0101 	adds.w	r1, ip, r1
 80007cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80007d0:	f080 8088 	bcs.w	80008e4 <__udivmoddi4+0x2bc>
 80007d4:	4288      	cmp	r0, r1
 80007d6:	f240 8085 	bls.w	80008e4 <__udivmoddi4+0x2bc>
 80007da:	f1a8 0802 	sub.w	r8, r8, #2
 80007de:	4461      	add	r1, ip
 80007e0:	1a09      	subs	r1, r1, r0
 80007e2:	b2a4      	uxth	r4, r4
 80007e4:	fbb1 f0f9 	udiv	r0, r1, r9
 80007e8:	fb09 1110 	mls	r1, r9, r0, r1
 80007ec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80007f4:	458e      	cmp	lr, r1
 80007f6:	d908      	bls.n	800080a <__udivmoddi4+0x1e2>
 80007f8:	eb1c 0101 	adds.w	r1, ip, r1
 80007fc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000800:	d26c      	bcs.n	80008dc <__udivmoddi4+0x2b4>
 8000802:	458e      	cmp	lr, r1
 8000804:	d96a      	bls.n	80008dc <__udivmoddi4+0x2b4>
 8000806:	3802      	subs	r0, #2
 8000808:	4461      	add	r1, ip
 800080a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800080e:	fba0 9402 	umull	r9, r4, r0, r2
 8000812:	eba1 010e 	sub.w	r1, r1, lr
 8000816:	42a1      	cmp	r1, r4
 8000818:	46c8      	mov	r8, r9
 800081a:	46a6      	mov	lr, r4
 800081c:	d356      	bcc.n	80008cc <__udivmoddi4+0x2a4>
 800081e:	d053      	beq.n	80008c8 <__udivmoddi4+0x2a0>
 8000820:	b15d      	cbz	r5, 800083a <__udivmoddi4+0x212>
 8000822:	ebb3 0208 	subs.w	r2, r3, r8
 8000826:	eb61 010e 	sbc.w	r1, r1, lr
 800082a:	fa01 f707 	lsl.w	r7, r1, r7
 800082e:	fa22 f306 	lsr.w	r3, r2, r6
 8000832:	40f1      	lsrs	r1, r6
 8000834:	431f      	orrs	r7, r3
 8000836:	e9c5 7100 	strd	r7, r1, [r5]
 800083a:	2600      	movs	r6, #0
 800083c:	4631      	mov	r1, r6
 800083e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000842:	f1c2 0320 	rsb	r3, r2, #32
 8000846:	40d8      	lsrs	r0, r3
 8000848:	fa0c fc02 	lsl.w	ip, ip, r2
 800084c:	fa21 f303 	lsr.w	r3, r1, r3
 8000850:	4091      	lsls	r1, r2
 8000852:	4301      	orrs	r1, r0
 8000854:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000858:	fa1f fe8c 	uxth.w	lr, ip
 800085c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000860:	fb07 3610 	mls	r6, r7, r0, r3
 8000864:	0c0b      	lsrs	r3, r1, #16
 8000866:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800086a:	fb00 f60e 	mul.w	r6, r0, lr
 800086e:	429e      	cmp	r6, r3
 8000870:	fa04 f402 	lsl.w	r4, r4, r2
 8000874:	d908      	bls.n	8000888 <__udivmoddi4+0x260>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 38ff 	add.w	r8, r0, #4294967295
 800087e:	d22f      	bcs.n	80008e0 <__udivmoddi4+0x2b8>
 8000880:	429e      	cmp	r6, r3
 8000882:	d92d      	bls.n	80008e0 <__udivmoddi4+0x2b8>
 8000884:	3802      	subs	r0, #2
 8000886:	4463      	add	r3, ip
 8000888:	1b9b      	subs	r3, r3, r6
 800088a:	b289      	uxth	r1, r1
 800088c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000890:	fb07 3316 	mls	r3, r7, r6, r3
 8000894:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000898:	fb06 f30e 	mul.w	r3, r6, lr
 800089c:	428b      	cmp	r3, r1
 800089e:	d908      	bls.n	80008b2 <__udivmoddi4+0x28a>
 80008a0:	eb1c 0101 	adds.w	r1, ip, r1
 80008a4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008a8:	d216      	bcs.n	80008d8 <__udivmoddi4+0x2b0>
 80008aa:	428b      	cmp	r3, r1
 80008ac:	d914      	bls.n	80008d8 <__udivmoddi4+0x2b0>
 80008ae:	3e02      	subs	r6, #2
 80008b0:	4461      	add	r1, ip
 80008b2:	1ac9      	subs	r1, r1, r3
 80008b4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008b8:	e738      	b.n	800072c <__udivmoddi4+0x104>
 80008ba:	462e      	mov	r6, r5
 80008bc:	4628      	mov	r0, r5
 80008be:	e705      	b.n	80006cc <__udivmoddi4+0xa4>
 80008c0:	4606      	mov	r6, r0
 80008c2:	e6e3      	b.n	800068c <__udivmoddi4+0x64>
 80008c4:	4618      	mov	r0, r3
 80008c6:	e6f8      	b.n	80006ba <__udivmoddi4+0x92>
 80008c8:	454b      	cmp	r3, r9
 80008ca:	d2a9      	bcs.n	8000820 <__udivmoddi4+0x1f8>
 80008cc:	ebb9 0802 	subs.w	r8, r9, r2
 80008d0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008d4:	3801      	subs	r0, #1
 80008d6:	e7a3      	b.n	8000820 <__udivmoddi4+0x1f8>
 80008d8:	4646      	mov	r6, r8
 80008da:	e7ea      	b.n	80008b2 <__udivmoddi4+0x28a>
 80008dc:	4620      	mov	r0, r4
 80008de:	e794      	b.n	800080a <__udivmoddi4+0x1e2>
 80008e0:	4640      	mov	r0, r8
 80008e2:	e7d1      	b.n	8000888 <__udivmoddi4+0x260>
 80008e4:	46d0      	mov	r8, sl
 80008e6:	e77b      	b.n	80007e0 <__udivmoddi4+0x1b8>
 80008e8:	3b02      	subs	r3, #2
 80008ea:	4461      	add	r1, ip
 80008ec:	e732      	b.n	8000754 <__udivmoddi4+0x12c>
 80008ee:	4630      	mov	r0, r6
 80008f0:	e709      	b.n	8000706 <__udivmoddi4+0xde>
 80008f2:	4464      	add	r4, ip
 80008f4:	3802      	subs	r0, #2
 80008f6:	e742      	b.n	800077e <__udivmoddi4+0x156>

080008f8 <__aeabi_idiv0>:
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
 8000908:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	68ba      	ldr	r2, [r7, #8]
 800090e:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	887a      	ldrh	r2, [r7, #2]
 800091a:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	6a3a      	ldr	r2, [r7, #32]
 8000920:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000926:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2200      	movs	r2, #0
 800092c:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2200      	movs	r2, #0
 8000932:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	6858      	ldr	r0, [r3, #4]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	899b      	ldrh	r3, [r3, #12]
 8000940:	2200      	movs	r2, #0
 8000942:	4619      	mov	r1, r3
 8000944:	f001 ffe6 	bl	8002914 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000948:	2001      	movs	r0, #1
 800094a:	f001 fc8b 	bl	8002264 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	6858      	ldr	r0, [r3, #4]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	899b      	ldrh	r3, [r3, #12]
 8000956:	2201      	movs	r2, #1
 8000958:	4619      	mov	r1, r3
 800095a:	f001 ffdb 	bl	8002914 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800095e:	2032      	movs	r0, #50	; 0x32
 8000960:	f001 fc80 	bl	8002264 <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8000964:	22b6      	movs	r2, #182	; 0xb6
 8000966:	217e      	movs	r1, #126	; 0x7e
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	f000 f959 	bl	8000c20 <BMI088_WriteAccRegister>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	7dfb      	ldrb	r3, [r7, #23]
 8000974:	4413      	add	r3, r2
 8000976:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8000978:	2032      	movs	r0, #50	; 0x32
 800097a:	f001 fc73 	bl	8002264 <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 800097e:	f107 0316 	add.w	r3, r7, #22
 8000982:	461a      	mov	r2, r3
 8000984:	2100      	movs	r1, #0
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f000 f8d0 	bl	8000b2c <BMI088_ReadAccRegister>
 800098c:	4603      	mov	r3, r0
 800098e:	461a      	mov	r2, r3
 8000990:	7dfb      	ldrb	r3, [r7, #23]
 8000992:	4413      	add	r3, r2
 8000994:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 8000996:	200a      	movs	r0, #10
 8000998:	f001 fc64 	bl	8002264 <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA8); /* (no oversampling, ODR = 100 Hz, BW = 40 Hz) */
 800099c:	22a8      	movs	r2, #168	; 0xa8
 800099e:	2140      	movs	r1, #64	; 0x40
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f000 f93d 	bl	8000c20 <BMI088_WriteAccRegister>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	7dfb      	ldrb	r3, [r7, #23]
 80009ac:	4413      	add	r3, r2
 80009ae:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80009b0:	200a      	movs	r0, #10
 80009b2:	f001 fc57 	bl	8002264 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 80009b6:	2200      	movs	r2, #0
 80009b8:	2141      	movs	r1, #65	; 0x41
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	f000 f930 	bl	8000c20 <BMI088_WriteAccRegister>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	7dfb      	ldrb	r3, [r7, #23]
 80009c6:	4413      	add	r3, r2
 80009c8:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80009ca:	200a      	movs	r0, #10
 80009cc:	f001 fc4a 	bl	8002264 <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 80009d0:	220a      	movs	r2, #10
 80009d2:	2153      	movs	r1, #83	; 0x53
 80009d4:	68f8      	ldr	r0, [r7, #12]
 80009d6:	f000 f923 	bl	8000c20 <BMI088_WriteAccRegister>
 80009da:	4603      	mov	r3, r0
 80009dc:	461a      	mov	r2, r3
 80009de:	7dfb      	ldrb	r3, [r7, #23]
 80009e0:	4413      	add	r3, r2
 80009e2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80009e4:	200a      	movs	r0, #10
 80009e6:	f001 fc3d 	bl	8002264 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 80009ea:	2204      	movs	r2, #4
 80009ec:	2158      	movs	r1, #88	; 0x58
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f000 f916 	bl	8000c20 <BMI088_WriteAccRegister>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	4413      	add	r3, r2
 80009fc:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80009fe:	200a      	movs	r0, #10
 8000a00:	f001 fc30 	bl	8002264 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8000a04:	2200      	movs	r2, #0
 8000a06:	217c      	movs	r1, #124	; 0x7c
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f000 f909 	bl	8000c20 <BMI088_WriteAccRegister>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461a      	mov	r2, r3
 8000a12:	7dfb      	ldrb	r3, [r7, #23]
 8000a14:	4413      	add	r3, r2
 8000a16:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000a18:	200a      	movs	r0, #10
 8000a1a:	f001 fc23 	bl	8002264 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 8000a1e:	2204      	movs	r2, #4
 8000a20:	217d      	movs	r1, #125	; 0x7d
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f000 f8fc 	bl	8000c20 <BMI088_WriteAccRegister>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	7dfb      	ldrb	r3, [r7, #23]
 8000a2e:	4413      	add	r3, r2
 8000a30:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000a32:	200a      	movs	r0, #10
 8000a34:	f001 fc16 	bl	8002264 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4a3a      	ldr	r2, [pc, #232]	; (8000b24 <BMI088_Init+0x228>)
 8000a3c:	631a      	str	r2, [r3, #48]	; 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2292      	movs	r2, #146	; 0x92
 8000a42:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	6898      	ldr	r0, [r3, #8]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	89db      	ldrh	r3, [r3, #14]
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f001 ff60 	bl	8002914 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8000a54:	22b6      	movs	r2, #182	; 0xb6
 8000a56:	2114      	movs	r1, #20
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f000 f91b 	bl	8000c94 <BMI088_WriteGyrRegister>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	461a      	mov	r2, r3
 8000a62:	7dfb      	ldrb	r3, [r7, #23]
 8000a64:	4413      	add	r3, r2
 8000a66:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 8000a68:	20fa      	movs	r0, #250	; 0xfa
 8000a6a:	f001 fbfb 	bl	8002264 <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 8000a6e:	f107 0316 	add.w	r3, r7, #22
 8000a72:	461a      	mov	r2, r3
 8000a74:	2100      	movs	r1, #0
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f000 f896 	bl	8000ba8 <BMI088_ReadGyrRegister>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	7dfb      	ldrb	r3, [r7, #23]
 8000a82:	4413      	add	r3, r2
 8000a84:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 8000a86:	200a      	movs	r0, #10
 8000a88:	f001 fbec 	bl	8002264 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	210f      	movs	r1, #15
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f000 f8ff 	bl	8000c94 <BMI088_WriteGyrRegister>
 8000a96:	4603      	mov	r3, r0
 8000a98:	461a      	mov	r2, r3
 8000a9a:	7dfb      	ldrb	r3, [r7, #23]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000aa0:	200a      	movs	r0, #10
 8000aa2:	f001 fbdf 	bl	8002264 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x07); /* ODR = 100 Hz, Filter bandwidth = 32 Hz */
 8000aa6:	2207      	movs	r2, #7
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	68f8      	ldr	r0, [r7, #12]
 8000aac:	f000 f8f2 	bl	8000c94 <BMI088_WriteGyrRegister>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	7dfb      	ldrb	r3, [r7, #23]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000aba:	200a      	movs	r0, #10
 8000abc:	f001 fbd2 	bl	8002264 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 8000ac0:	2280      	movs	r2, #128	; 0x80
 8000ac2:	2115      	movs	r1, #21
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f000 f8e5 	bl	8000c94 <BMI088_WriteGyrRegister>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000ad4:	200a      	movs	r0, #10
 8000ad6:	f001 fbc5 	bl	8002264 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8000ada:	2201      	movs	r2, #1
 8000adc:	2116      	movs	r1, #22
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f000 f8d8 	bl	8000c94 <BMI088_WriteGyrRegister>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	7dfb      	ldrb	r3, [r7, #23]
 8000aea:	4413      	add	r3, r2
 8000aec:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000aee:	200a      	movs	r0, #10
 8000af0:	f001 fbb8 	bl	8002264 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8000af4:	2201      	movs	r2, #1
 8000af6:	2118      	movs	r1, #24
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f000 f8cb 	bl	8000c94 <BMI088_WriteGyrRegister>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	7dfb      	ldrb	r3, [r7, #23]
 8000b04:	4413      	add	r3, r2
 8000b06:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f001 fbab 	bl	8002264 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <BMI088_Init+0x22c>)
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2282      	movs	r2, #130	; 0x82
 8000b18:	769a      	strb	r2, [r3, #26]

	return status;
 8000b1a:	7dfb      	ldrb	r3, [r7, #23]

}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	3a6b70a4 	.word	0x3a6b70a4
 8000b28:	3a0ba058 	.word	0x3a0ba058

08000b2c <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	460b      	mov	r3, r1
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 8000b3a:	7afb      	ldrb	r3, [r7, #11]
 8000b3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	753b      	strb	r3, [r7, #20]
 8000b44:	2300      	movs	r3, #0
 8000b46:	757b      	strb	r3, [r7, #21]
 8000b48:	2300      	movs	r3, #0
 8000b4a:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	6858      	ldr	r0, [r3, #4]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	899b      	ldrh	r3, [r3, #12]
 8000b54:	2200      	movs	r2, #0
 8000b56:	4619      	mov	r1, r3
 8000b58:	f001 fedc 	bl	8002914 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6818      	ldr	r0, [r3, #0]
 8000b60:	f107 0210 	add.w	r2, r7, #16
 8000b64:	f107 0114 	add.w	r1, r7, #20
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2303      	movs	r3, #3
 8000b70:	f003 ff99 	bl	8004aa6 <HAL_SPI_TransmitReceive>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	bf0c      	ite	eq
 8000b7a:	2301      	moveq	r3, #1
 8000b7c:	2300      	movne	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	6858      	ldr	r0, [r3, #4]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	899b      	ldrh	r3, [r3, #12]
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f001 fec1 	bl	8002914 <HAL_GPIO_WritePin>

	if (status == 1) {
 8000b92:	7dfb      	ldrb	r3, [r7, #23]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d102      	bne.n	8000b9e <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8000b98:	7cba      	ldrb	r2, [r7, #18]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]

}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af02      	add	r7, sp, #8
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 8000bb6:	7afb      	ldrb	r3, [r7, #11]
 8000bb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	753b      	strb	r3, [r7, #20]
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	6898      	ldr	r0, [r3, #8]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	89db      	ldrh	r3, [r3, #14]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f001 fea0 	bl	8002914 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	6818      	ldr	r0, [r3, #0]
 8000bd8:	f107 0210 	add.w	r2, r7, #16
 8000bdc:	f107 0114 	add.w	r1, r7, #20
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2302      	movs	r3, #2
 8000be8:	f003 ff5d 	bl	8004aa6 <HAL_SPI_TransmitReceive>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2301      	moveq	r3, #1
 8000bf4:	2300      	movne	r3, #0
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	6898      	ldr	r0, [r3, #8]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	89db      	ldrh	r3, [r3, #14]
 8000c02:	2201      	movs	r2, #1
 8000c04:	4619      	mov	r1, r3
 8000c06:	f001 fe85 	bl	8002914 <HAL_GPIO_WritePin>

	if (status == 1) {
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d102      	bne.n	8000c16 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 8000c10:	7c7a      	ldrb	r2, [r7, #17]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8000c16:	7dfb      	ldrb	r3, [r7, #23]

}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	70fb      	strb	r3, [r7, #3]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	733b      	strb	r3, [r7, #12]
 8000c34:	78bb      	ldrb	r3, [r7, #2]
 8000c36:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6858      	ldr	r0, [r3, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	899b      	ldrh	r3, [r3, #12]
 8000c40:	2200      	movs	r2, #0
 8000c42:	4619      	mov	r1, r3
 8000c44:	f001 fe66 	bl	8002914 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6818      	ldr	r0, [r3, #0]
 8000c4c:	f107 010c 	add.w	r1, r7, #12
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	2202      	movs	r2, #2
 8000c56:	f003 fdea 	bl	800482e <HAL_SPI_Transmit>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	bf0c      	ite	eq
 8000c60:	2301      	moveq	r3, #1
 8000c62:	2300      	movne	r3, #0
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8000c68:	bf00      	nop
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f004 f9e6 	bl	8005040 <HAL_SPI_GetState>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d1f7      	bne.n	8000c6a <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6858      	ldr	r0, [r3, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	899b      	ldrh	r3, [r3, #12]
 8000c82:	2201      	movs	r2, #1
 8000c84:	4619      	mov	r1, r3
 8000c86:	f001 fe45 	bl	8002914 <HAL_GPIO_WritePin>

	return status;
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]

}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	733b      	strb	r3, [r7, #12]
 8000ca8:	78bb      	ldrb	r3, [r7, #2]
 8000caa:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6898      	ldr	r0, [r3, #8]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	89db      	ldrh	r3, [r3, #14]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f001 fe2c 	bl	8002914 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	f107 010c 	add.w	r1, r7, #12
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc8:	2202      	movs	r2, #2
 8000cca:	f003 fdb0 	bl	800482e <HAL_SPI_Transmit>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	bf0c      	ite	eq
 8000cd4:	2301      	moveq	r3, #1
 8000cd6:	2300      	movne	r3, #0
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8000cdc:	bf00      	nop
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f004 f9ac 	bl	8005040 <HAL_SPI_GetState>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d1f7      	bne.n	8000cde <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6898      	ldr	r0, [r3, #8]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	89db      	ldrh	r3, [r3, #14]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f001 fe0b 	bl	8002914 <HAL_GPIO_WritePin>

	return status;
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]

}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <BMI088_ReadAccelerometerDMA_Complete>:

	}

}

void BMI088_ReadAccelerometerDMA_Complete(BMI088 *imu) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6858      	ldr	r0, [r3, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	899b      	ldrh	r3, [r3, #12]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f001 fdfa 	bl	8002914 <HAL_GPIO_WritePin>
	imu->readingAcc = 0;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	741a      	strb	r2, [r3, #16]

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((imu->accRxBuf[3] << 8) | imu->accRxBuf[2]);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	b21a      	sxth	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	b21b      	sxth	r3, r3
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	81fb      	strh	r3, [r7, #14]
	int16_t accY = (int16_t) ((imu->accRxBuf[5] << 8) | imu->accRxBuf[4]);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	021b      	lsls	r3, r3, #8
 8000d4a:	b21a      	sxth	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	4313      	orrs	r3, r2
 8000d58:	81bb      	strh	r3, [r7, #12]
	int16_t accZ = (int16_t) ((imu->accRxBuf[7] << 8) | imu->accRxBuf[6]);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	b21a      	sxth	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	b21b      	sxth	r3, r3
 8000d70:	4313      	orrs	r3, r2
 8000d72:	817b      	strh	r3, [r7, #10]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000d7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d7e:	ee07 3a90 	vmov	s15, r3
 8000d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000d96:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d9a:	ee07 3a90 	vmov	s15, r3
 8000d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000db2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000db6:	ee07 3a90 	vmov	s15, r3
 8000dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <BMI088_ReadGyroscopeDMA_Complete>:

	}

}

void BMI088_ReadGyroscopeDMA_Complete(BMI088 *imu) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6898      	ldr	r0, [r3, #8]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	89db      	ldrh	r3, [r3, #14]
 8000de0:	2201      	movs	r2, #1
 8000de2:	4619      	mov	r1, r3
 8000de4:	f001 fd96 	bl	8002914 <HAL_GPIO_WritePin>
	imu->readingGyr = 0;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	745a      	strb	r2, [r3, #17]

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((imu->gyrRxBuf[2] << 8) | imu->gyrRxBuf[1]);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	b21b      	sxth	r3, r3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	81fb      	strh	r3, [r7, #14]
	int16_t gyrY = (int16_t) ((imu->gyrRxBuf[4] << 8) | imu->gyrRxBuf[3]);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	b21a      	sxth	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	b21b      	sxth	r3, r3
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	81bb      	strh	r3, [r7, #12]
	int16_t gyrZ = (int16_t) ((imu->gyrRxBuf[6] << 8) | imu->gyrRxBuf[5]);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	b21a      	sxth	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	817b      	strh	r3, [r7, #10]

	/* Convert to deg/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8000e42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e46:	ee07 3a90 	vmov	s15, r3
 8000e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8000e5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e62:	ee07 3a90 	vmov	s15, r3
 8000e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8000e7a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e7e:	ee07 3a90 	vmov	s15, r3
 8000e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <SPL06_Init>:
/*
 *
 * INITIALISATION
 *
 */
uint8_t SPL06_Init(SPL06 *bar, SPI_HandleTypeDef *spiHandle, GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b092      	sub	sp, #72	; 0x48
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	807b      	strh	r3, [r7, #2]

	uint8_t status = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/* Store peripheral data */
	bar->spiHandle = spiHandle;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	601a      	str	r2, [r3, #0]
	bar->csPinBank = csPinBank;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	605a      	str	r2, [r3, #4]
	bar->csPin	   = csPin;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	887a      	ldrh	r2, [r7, #2]
 8000ebc:	811a      	strh	r2, [r3, #8]

	/* Sensor requires LOW on CS pin to put into SPI mode (see datasheet 5.3.2) */
	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6858      	ldr	r0, [r3, #4]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	891b      	ldrh	r3, [r3, #8]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f001 fd23 	bl	8002914 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ece:	200a      	movs	r0, #10
 8000ed0:	f001 f9c8 	bl	8002264 <HAL_Delay>

	/* Clear measurements */
	bar->pressure_Pa   = 0.0f;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c
	bar->temperature_C = 0.0f;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f04f 0200 	mov.w	r2, #0
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30

	uint8_t txBuf[2] = {0x00, 0x00};
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	87bb      	strh	r3, [r7, #60]	; 0x3c
	uint8_t rxBuf[2];

	/* Check device ID */
	uint8_t id;

	txBuf[0] = SPL06_ID | 0x80;
 8000ee8:	238d      	movs	r3, #141	; 0x8d
 8000eea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6858      	ldr	r0, [r3, #4]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	891b      	ldrh	r3, [r3, #8]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f001 fd0b 	bl	8002914 <HAL_GPIO_WritePin>
	status += (HAL_SPI_TransmitReceive(bar->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f06:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2302      	movs	r3, #2
 8000f12:	f003 fdc8 	bl	8004aa6 <HAL_SPI_TransmitReceive>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	bf0c      	ite	eq
 8000f1c:	2301      	moveq	r3, #1
 8000f1e:	2300      	movne	r3, #0
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f28:	4413      	add	r3, r2
 8000f2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_SET);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6858      	ldr	r0, [r3, #4]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	891b      	ldrh	r3, [r3, #8]
 8000f36:	2201      	movs	r2, #1
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f001 fceb 	bl	8002914 <HAL_GPIO_WritePin>

	id = rxBuf[1];
 8000f3e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000f42:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/* Make sure device ID matches */
	if (id != 0x10) {
 8000f46:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f4a:	2b10      	cmp	r3, #16
 8000f4c:	d001      	beq.n	8000f52 <SPL06_Init+0xba>

		return 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e166      	b.n	8001220 <SPL06_Init+0x388>

	}
	HAL_Delay(10);
 8000f52:	200a      	movs	r0, #10
 8000f54:	f001 f986 	bl	8002264 <HAL_Delay>

	/* Read calibration coefficients */
	uint8_t calibTxBuf[19];
	calibTxBuf[0] = (SPL06_COEF | 0x80);
 8000f58:	2390      	movs	r3, #144	; 0x90
 8000f5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	uint8_t calibRxBuf[19];

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6858      	ldr	r0, [r3, #4]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	891b      	ldrh	r3, [r3, #8]
 8000f66:	2200      	movs	r2, #0
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f001 fcd3 	bl	8002914 <HAL_GPIO_WritePin>
	status += (HAL_SPI_TransmitReceive(bar->spiHandle, calibTxBuf, calibRxBuf, 19, HAL_MAX_DELAY) == HAL_OK);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6818      	ldr	r0, [r3, #0]
 8000f72:	f107 0210 	add.w	r2, r7, #16
 8000f76:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2313      	movs	r3, #19
 8000f82:	f003 fd90 	bl	8004aa6 <HAL_SPI_TransmitReceive>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	bf0c      	ite	eq
 8000f8c:	2301      	moveq	r3, #1
 8000f8e:	2300      	movne	r3, #0
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f98:	4413      	add	r3, r2
 8000f9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_SET);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6858      	ldr	r0, [r3, #4]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	891b      	ldrh	r3, [r3, #8]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f001 fcb3 	bl	8002914 <HAL_GPIO_WritePin>

	/* Convert raw calibration coefficients to signed integers */
	bar->c0 = (uint16_t)calibRxBuf[1] << 4 | (uint16_t)calibRxBuf[2] >> 4;
 8000fae:	7c7b      	ldrb	r3, [r7, #17]
 8000fb0:	011b      	lsls	r3, r3, #4
 8000fb2:	b21a      	sxth	r2, r3
 8000fb4:	7cbb      	ldrb	r3, [r7, #18]
 8000fb6:	091b      	lsrs	r3, r3, #4
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	825a      	strh	r2, [r3, #18]
	bar->c0 = (bar->c0 & 1 << 11) ? (0xF000 | bar->c0) : bar->c0;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d008      	beq.n	8000fe6 <SPL06_Init+0x14e>
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000fda:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000fde:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000fe2:	b21b      	sxth	r3, r3
 8000fe4:	e002      	b.n	8000fec <SPL06_Init+0x154>
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	8253      	strh	r3, [r2, #18]

	bar->c1 = (uint16_t)(calibRxBuf[2] & 0x0f) << 8 | (uint16_t)calibRxBuf[3];
 8000ff0:	7cbb      	ldrb	r3, [r7, #18]
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	7cfb      	ldrb	r3, [r7, #19]
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b21a      	sxth	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	829a      	strh	r2, [r3, #20]
	bar->c1 = (bar->c1 & 1 << 11) ? (0xF000 | bar->c1) : bar->c1;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800100e:	b29b      	uxth	r3, r3
 8001010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001014:	2b00      	cmp	r3, #0
 8001016:	d008      	beq.n	800102a <SPL06_Init+0x192>
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800101e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001022:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001026:	b21b      	sxth	r3, r3
 8001028:	e002      	b.n	8001030 <SPL06_Init+0x198>
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	8293      	strh	r3, [r2, #20]

	bar->c00 = (uint32_t)calibRxBuf[4] << 12 | (uint32_t)calibRxBuf[5] << 4 | (uint16_t)calibRxBuf[6] >> 4;
 8001034:	7d3b      	ldrb	r3, [r7, #20]
 8001036:	031a      	lsls	r2, r3, #12
 8001038:	7d7b      	ldrb	r3, [r7, #21]
 800103a:	011b      	lsls	r3, r3, #4
 800103c:	4313      	orrs	r3, r2
 800103e:	7dba      	ldrb	r2, [r7, #22]
 8001040:	0912      	lsrs	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	4313      	orrs	r3, r2
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	619a      	str	r2, [r3, #24]
	bar->c00 = (bar->c00 & 1 << 19) ? (0xFFF00000 | bar->c00) : bar->c00;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d006      	beq.n	8001066 <SPL06_Init+0x1ce>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001060:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001064:	e001      	b.n	800106a <SPL06_Init+0x1d2>
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	6193      	str	r3, [r2, #24]

	bar->c10 = (uint32_t)(calibRxBuf[6] & 0x0f) << 16 | (uint32_t)calibRxBuf[7] << 8 | (uint32_t)calibRxBuf[8];
 800106e:	7dbb      	ldrb	r3, [r7, #22]
 8001070:	041b      	lsls	r3, r3, #16
 8001072:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001076:	7dfb      	ldrb	r3, [r7, #23]
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	4313      	orrs	r3, r2
 800107c:	7e3a      	ldrb	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	461a      	mov	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	61da      	str	r2, [r3, #28]
	bar->c10 = (bar->c10 & 1 << 19) ? (0xFFF00000 | bar->c10) : bar->c10;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d006      	beq.n	80010a0 <SPL06_Init+0x208>
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 800109a:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 800109e:	e001      	b.n	80010a4 <SPL06_Init+0x20c>
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	69db      	ldr	r3, [r3, #28]
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	61d3      	str	r3, [r2, #28]

	bar->c01 = (uint16_t) calibRxBuf[9]  << 8 | calibRxBuf[10];
 80010a8:	7e7b      	ldrb	r3, [r7, #25]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	7ebb      	ldrb	r3, [r7, #26]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	841a      	strh	r2, [r3, #32]
	bar->c11 = (uint16_t) calibRxBuf[11] << 8 | calibRxBuf[12];
 80010ba:	7efb      	ldrb	r3, [r7, #27]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	7f3b      	ldrb	r3, [r7, #28]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	845a      	strh	r2, [r3, #34]	; 0x22
	bar->c20 = (uint16_t) calibRxBuf[13] << 8 | calibRxBuf[14];
 80010cc:	7f7b      	ldrb	r3, [r7, #29]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	7fbb      	ldrb	r3, [r7, #30]
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b21a      	sxth	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	849a      	strh	r2, [r3, #36]	; 0x24
	bar->c21 = (uint16_t) calibRxBuf[15] << 8 | calibRxBuf[16];
 80010de:	7ffb      	ldrb	r3, [r7, #31]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	84da      	strh	r2, [r3, #38]	; 0x26
	bar->c30 = (uint16_t) calibRxBuf[17] << 8 | calibRxBuf[18];
 80010f2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80010fe:	b21b      	sxth	r3, r3
 8001100:	4313      	orrs	r3, r2
 8001102:	b21a      	sxth	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	851a      	strh	r2, [r3, #40]	; 0x28
	HAL_Delay(25);
 8001108:	2019      	movs	r0, #25
 800110a:	f001 f8ab 	bl	8002264 <HAL_Delay>

	/* Set pressure configuration */
	txBuf[0] = SPL06_PRS_CFG;
 800110e:	2306      	movs	r3, #6
 8001110:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	txBuf[1] = 0x33;			/* 8 Hz, 8x oversampling */
 8001114:	2333      	movs	r3, #51	; 0x33
 8001116:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6858      	ldr	r0, [r3, #4]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	891b      	ldrh	r3, [r3, #8]
 8001122:	2200      	movs	r2, #0
 8001124:	4619      	mov	r1, r3
 8001126:	f001 fbf5 	bl	8002914 <HAL_GPIO_WritePin>
	status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	2202      	movs	r2, #2
 8001138:	f003 fb79 	bl	800482e <HAL_SPI_Transmit>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	bf0c      	ite	eq
 8001142:	2301      	moveq	r3, #1
 8001144:	2300      	movne	r3, #0
 8001146:	b2db      	uxtb	r3, r3
 8001148:	b2da      	uxtb	r2, r3
 800114a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800114e:	4413      	add	r3, r2
 8001150:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_SET);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6858      	ldr	r0, [r3, #4]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	891b      	ldrh	r3, [r3, #8]
 800115c:	2201      	movs	r2, #1
 800115e:	4619      	mov	r1, r3
 8001160:	f001 fbd8 	bl	8002914 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 8001164:	200a      	movs	r0, #10
 8001166:	f001 f87d 	bl	8002264 <HAL_Delay>

	/* Set temperature configuration */
	txBuf[0] = SPL06_TMP_CFG;
 800116a:	2307      	movs	r3, #7
 800116c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	txBuf[1] = 0xB3; /* 'external' sensor, 8 Hz, 8x oversampling */
 8001170:	23b3      	movs	r3, #179	; 0xb3
 8001172:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6858      	ldr	r0, [r3, #4]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	891b      	ldrh	r3, [r3, #8]
 800117e:	2200      	movs	r2, #0
 8001180:	4619      	mov	r1, r3
 8001182:	f001 fbc7 	bl	8002914 <HAL_GPIO_WritePin>
	status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	2202      	movs	r2, #2
 8001194:	f003 fb4b 	bl	800482e <HAL_SPI_Transmit>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	bf0c      	ite	eq
 800119e:	2301      	moveq	r3, #1
 80011a0:	2300      	movne	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80011aa:	4413      	add	r3, r2
 80011ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_SET);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6858      	ldr	r0, [r3, #4]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	891b      	ldrh	r3, [r3, #8]
 80011b8:	2201      	movs	r2, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	f001 fbaa 	bl	8002914 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 80011c0:	200a      	movs	r0, #10
 80011c2:	f001 f84f 	bl	8002264 <HAL_Delay>

	/* Set measurement configuration */
	txBuf[0] = SPL06_MEAS_CFG ;
 80011c6:	2308      	movs	r3, #8
 80011c8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	txBuf[1] = 0xFF; /* Continuous pressure and temperature measurement */
 80011cc:	23ff      	movs	r3, #255	; 0xff
 80011ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6858      	ldr	r0, [r3, #4]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	891b      	ldrh	r3, [r3, #8]
 80011da:	2200      	movs	r2, #0
 80011dc:	4619      	mov	r1, r3
 80011de:	f001 fb99 	bl	8002914 <HAL_GPIO_WritePin>
	status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	2202      	movs	r2, #2
 80011f0:	f003 fb1d 	bl	800482e <HAL_SPI_Transmit>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	bf0c      	ite	eq
 80011fa:	2301      	moveq	r3, #1
 80011fc:	2300      	movne	r3, #0
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	b2da      	uxtb	r2, r3
 8001202:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001206:	4413      	add	r3, r2
 8001208:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_SET);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6858      	ldr	r0, [r3, #4]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	891b      	ldrh	r3, [r3, #8]
 8001214:	2201      	movs	r2, #1
 8001216:	4619      	mov	r1, r3
 8001218:	f001 fb7c 	bl	8002914 <HAL_GPIO_WritePin>

	return status;
 800121c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f

}
 8001220:	4618      	mov	r0, r3
 8001222:	3740      	adds	r7, #64	; 0x40
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <SPL06_ReadDMA>:
/*
 *
 * TEMPERATURE AND PRESSURE READ (DMA)
 *
 */
uint8_t SPL06_ReadDMA(SPL06 *bar) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

	uint8_t txBuf[7];
	txBuf[0] = 0x00 | 0x80;
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	723b      	strb	r3, [r7, #8]

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6858      	ldr	r0, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	891b      	ldrh	r3, [r3, #8]
 800123c:	2200      	movs	r2, #0
 800123e:	4619      	mov	r1, r3
 8001240:	f001 fb68 	bl	8002914 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(bar->spiHandle, txBuf, (uint8_t *) bar->dmaRxBuf, 7) == HAL_OK) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f103 020a 	add.w	r2, r3, #10
 800124e:	f107 0108 	add.w	r1, r7, #8
 8001252:	2307      	movs	r3, #7
 8001254:	f003 fdca 	bl	8004dec <HAL_SPI_TransmitReceive_DMA>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d104      	bne.n	8001268 <SPL06_ReadDMA+0x40>

		bar->reading = 1;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	745a      	strb	r2, [r3, #17]
		return 1;
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <SPL06_ReadDMA+0x42>

	} else {

		return 0;
 8001268:	2300      	movs	r3, #0

	}

}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <SPL06_ReadDMA_Complete>:

void SPL06_ReadDMA_Complete(SPL06 *bar) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_SET);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6858      	ldr	r0, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	891b      	ldrh	r3, [r3, #8]
 8001284:	2201      	movs	r2, #1
 8001286:	4619      	mov	r1, r3
 8001288:	f001 fb44 	bl	8002914 <HAL_GPIO_WritePin>
	bar->reading = 0;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	745a      	strb	r2, [r3, #17]

	/* Convert raw to uncalibrated pressure and temperature */
	int32_t pres = ((uint32_t) bar->dmaRxBuf[1] << 16) | ((uint32_t) bar->dmaRxBuf[2] << 8) | ((uint32_t) bar->dmaRxBuf[3]);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7adb      	ldrb	r3, [r3, #11]
 8001296:	041a      	lsls	r2, r3, #16
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7b1b      	ldrb	r3, [r3, #12]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	4313      	orrs	r3, r2
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	7b52      	ldrb	r2, [r2, #13]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	617b      	str	r3, [r7, #20]
			pres = (pres & 1 << 23) ? (0xFF000000 | pres) : pres;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <SPL06_ReadDMA_Complete+0x46>
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80012b8:	e000      	b.n	80012bc <SPL06_ReadDMA_Complete+0x48>
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	617b      	str	r3, [r7, #20]

	int32_t temp = ((uint32_t) bar->dmaRxBuf[4] << 16) | ((uint32_t) bar->dmaRxBuf[5] << 8) | ((uint32_t) bar->dmaRxBuf[6]);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7b9b      	ldrb	r3, [r3, #14]
 80012c2:	041a      	lsls	r2, r3, #16
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7bdb      	ldrb	r3, [r3, #15]
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	4313      	orrs	r3, r2
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	7c12      	ldrb	r2, [r2, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
			temp = (temp & 1 << 23) ? (0xFF000000 | temp) : temp;
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <SPL06_ReadDMA_Complete+0x72>
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80012e4:	e000      	b.n	80012e8 <SPL06_ReadDMA_Complete+0x74>
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	613b      	str	r3, [r7, #16]

	/* Apply calibration */
	float tempRaw 	   = (float) temp / 7864320.0f;
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f4:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001400 <SPL06_ReadDMA_Complete+0x18c>
 80012f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012fc:	edc7 7a03 	vstr	s15, [r7, #12]
	bar->temperature_C = 0.5f * bar->c0 + bar->c1 * tempRaw;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001306:	ee07 3a90 	vmov	s15, r3
 800130a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800130e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001312:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001324:	edd7 7a03 	vldr	s15, [r7, #12]
 8001328:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	float presRaw    = (float) pres / 7864320.0f;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001340:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001400 <SPL06_ReadDMA_Complete+0x18c>
 8001344:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001348:	edc7 7a02 	vstr	s15, [r7, #8]
	bar->pressure_Pa = bar->c00 + presRaw * (bar->c10 + presRaw * (bar->c20 + bar->c30 * presRaw))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001378:	ee07 3a90 	vmov	s15, r3
 800137c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001380:	edd7 7a02 	vldr	s15, [r7, #8]
 8001384:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001388:	ee36 6a27 	vadd.f32	s12, s12, s15
 800138c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001390:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001394:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001398:	edd7 7a02 	vldr	s15, [r7, #8]
 800139c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a0:	ee37 7a27 	vadd.f32	s14, s14, s15
				    + tempRaw * (bar->c01 + presRaw * (bar->c11 + bar->c21 * presRaw));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80013aa:	ee07 3a90 	vmov	s15, r3
 80013ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80013ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80013d2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80013d6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80013da:	edd7 7a02 	vldr	s15, [r7, #8]
 80013de:	ee66 7a27 	vmul.f32	s15, s12, s15
 80013e2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80013e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ee:	ee77 7a27 	vadd.f32	s15, s14, s15
	bar->pressure_Pa = bar->c00 + presRaw * (bar->c10 + presRaw * (bar->c20 + bar->c30 * presRaw))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

}
 80013f8:	bf00      	nop
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	4af00000 	.word	0x4af00000

08001404 <FIRFilter_Init>:
#include "FIRFilter.h"

static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};


void FIRFilter_Init(FIRFilter *fir) {
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

	/* Clear filter buffer */
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]
 8001410:	e009      	b.n	8001426 <FIRFilter_Init+0x22>

		fir->buf[n] = 0.0f;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	3301      	adds	r3, #1
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b09      	cmp	r3, #9
 800142a:	d9f2      	bls.n	8001412 <FIRFilter_Init+0xe>

	}

	/* Reset buffer index */
	fir->bufIndex = 0;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	/* Clear filter output */
	fir->out = 0.0f;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	62da      	str	r2, [r3, #44]	; 0x2c

}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *fir, float inp) {
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	ed87 0a00 	vstr	s0, [r7]

	/* Store latest sample in buffer */
	fir->buf[fir->bufIndex] = inp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	601a      	str	r2, [r3, #0]

	/* Increment buffer index and wrap around if necessary */
	fir->bufIndex++;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800146a:	3301      	adds	r3, #1
 800146c:	b2da      	uxtb	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	if (fir->bufIndex == FIR_FILTER_LENGTH) {
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800147a:	2b0a      	cmp	r3, #10
 800147c:	d103      	bne.n	8001486 <FIRFilter_Update+0x3e>

		fir->bufIndex = 0;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	}

	/* Compute new output sample (via convolution) */
	fir->out = 0.0f;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	62da      	str	r2, [r3, #44]	; 0x2c

	uint8_t sumIndex = fir->bufIndex;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001494:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8001496:	2300      	movs	r3, #0
 8001498:	73bb      	strb	r3, [r7, #14]
 800149a:	e021      	b.n	80014e0 <FIRFilter_Update+0x98>

		/* Decrement index and wrap if necessary */
		if (sumIndex > 0) {
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <FIRFilter_Update+0x62>

			sumIndex--;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	e001      	b.n	80014ae <FIRFilter_Update+0x66>

		} else {

			sumIndex = FIR_FILTER_LENGTH - 1;
 80014aa:	2309      	movs	r3, #9
 80014ac:	73fb      	strb	r3, [r7, #15]

		}

		/* Multiply impulse response with shifted input sample and add to output */
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80014b4:	7bbb      	ldrb	r3, [r7, #14]
 80014b6:	4a11      	ldr	r2, [pc, #68]	; (80014fc <FIRFilter_Update+0xb4>)
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	edd3 6a00 	vldr	s13, [r3]
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 80014da:	7bbb      	ldrb	r3, [r7, #14]
 80014dc:	3301      	adds	r3, #1
 80014de:	73bb      	strb	r3, [r7, #14]
 80014e0:	7bbb      	ldrb	r3, [r7, #14]
 80014e2:	2b09      	cmp	r3, #9
 80014e4:	d9da      	bls.n	800149c <FIRFilter_Update+0x54>

	}

	/* Return filtered output */
	return fir->out;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ea:	ee07 3a90 	vmov	s15, r3

}
 80014ee:	eeb0 0a67 	vmov.f32	s0, s15
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	20000000 	.word	0x20000000

08001500 <RCFilter_Init>:
#include "RCFilter.h"

void RCFilter_Init(RCFilter *filt, float cutoffFreqHz, float sampleTimeS) {
 8001500:	b480      	push	{r7}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	ed87 0a02 	vstr	s0, [r7, #8]
 800150c:	edc7 0a01 	vstr	s1, [r7, #4]

	/* Compute equivalent 'RC' constant from cut-off frequency */
	float RC = 1.0f / (6.28318530718f * cutoffFreqHz);
 8001510:	edd7 7a02 	vldr	s15, [r7, #8]
 8001514:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001578 <RCFilter_Init+0x78>
 8001518:	ee27 7a87 	vmul.f32	s14, s15, s14
 800151c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001524:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Pre-compute filter coefficients for first-order low-pass filter */
	filt->coeff[0] = sampleTimeS / (sampleTimeS + RC);
 8001528:	ed97 7a01 	vldr	s14, [r7, #4]
 800152c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001530:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001534:	edd7 6a01 	vldr	s13, [r7, #4]
 8001538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	edc3 7a00 	vstr	s15, [r3]
	filt->coeff[1] = RC / (sampleTimeS + RC);
 8001542:	ed97 7a01 	vldr	s14, [r7, #4]
 8001546:	edd7 7a05 	vldr	s15, [r7, #20]
 800154a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800154e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Clear output buffer */
	filt->out[0] = 0.0f;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
	filt->out[1] = 0.0f;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	60da      	str	r2, [r3, #12]

}
 800156c:	bf00      	nop
 800156e:	371c      	adds	r7, #28
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	40c90fdb 	.word	0x40c90fdb

0800157c <HAL_SPI_TxRxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

	if (hspi->Instance == SPI1) {
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a14      	ldr	r2, [pc, #80]	; (80015dc <HAL_SPI_TxRxCpltCallback+0x60>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d10e      	bne.n	80015ac <HAL_SPI_TxRxCpltCallback+0x30>

		if (imu.readingAcc) {
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <HAL_SPI_TxRxCpltCallback+0x64>)
 8001590:	7c1b      	ldrb	r3, [r3, #16]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <HAL_SPI_TxRxCpltCallback+0x20>

			BMI088_ReadAccelerometerDMA_Complete(&imu);
 8001596:	4812      	ldr	r0, [pc, #72]	; (80015e0 <HAL_SPI_TxRxCpltCallback+0x64>)
 8001598:	f7ff fbb6 	bl	8000d08 <BMI088_ReadAccelerometerDMA_Complete>
		//	RCFilter_Update(&lpfAcc[1], imu.acc_mps2[1]);
		//	RCFilter_Update(&lpfAcc[2], imu.acc_mps2[2]);

		}

		if (imu.readingGyr) {
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_SPI_TxRxCpltCallback+0x64>)
 800159e:	7c5b      	ldrb	r3, [r3, #17]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d017      	beq.n	80015d4 <HAL_SPI_TxRxCpltCallback+0x58>

			BMI088_ReadGyroscopeDMA_Complete(&imu);
 80015a4:	480e      	ldr	r0, [pc, #56]	; (80015e0 <HAL_SPI_TxRxCpltCallback+0x64>)
 80015a6:	f7ff fc13 	bl	8000dd0 <BMI088_ReadGyroscopeDMA_Complete>

		}

	}

}
 80015aa:	e013      	b.n	80015d4 <HAL_SPI_TxRxCpltCallback+0x58>
	} else if (hspi->Instance == SPI3) {
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0c      	ldr	r2, [pc, #48]	; (80015e4 <HAL_SPI_TxRxCpltCallback+0x68>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d10e      	bne.n	80015d4 <HAL_SPI_TxRxCpltCallback+0x58>
		if (bar.reading) {
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_SPI_TxRxCpltCallback+0x6c>)
 80015b8:	7c5b      	ldrb	r3, [r3, #17]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00a      	beq.n	80015d4 <HAL_SPI_TxRxCpltCallback+0x58>
			SPL06_ReadDMA_Complete(&bar);
 80015be:	480a      	ldr	r0, [pc, #40]	; (80015e8 <HAL_SPI_TxRxCpltCallback+0x6c>)
 80015c0:	f7ff fe58 	bl	8001274 <SPL06_ReadDMA_Complete>
			FIRFilter_Update(&barFilterMovingAverage, bar.pressure_Pa);
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_SPI_TxRxCpltCallback+0x6c>)
 80015c6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80015ca:	eeb0 0a67 	vmov.f32	s0, s15
 80015ce:	4807      	ldr	r0, [pc, #28]	; (80015ec <HAL_SPI_TxRxCpltCallback+0x70>)
 80015d0:	f7ff ff3a 	bl	8001448 <FIRFilter_Update>
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40013000 	.word	0x40013000
 80015e0:	200002e4 	.word	0x200002e4
 80015e4:	40003c00 	.word	0x40003c00
 80015e8:	20000334 	.word	0x20000334
 80015ec:	200003c8 	.word	0x200003c8

080015f0 <LED_RGB_Init>:

	}

}

void LED_RGB_Init() {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0

	/* Start RGB LED PWM timers */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80015f4:	2100      	movs	r1, #0
 80015f6:	4806      	ldr	r0, [pc, #24]	; (8001610 <LED_RGB_Init+0x20>)
 80015f8:	f003 ffe0 	bl	80055bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80015fc:	2104      	movs	r1, #4
 80015fe:	4804      	ldr	r0, [pc, #16]	; (8001610 <LED_RGB_Init+0x20>)
 8001600:	f003 ffdc 	bl	80055bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001604:	2100      	movs	r1, #0
 8001606:	4803      	ldr	r0, [pc, #12]	; (8001614 <LED_RGB_Init+0x24>)
 8001608:	f003 ffd8 	bl	80055bc <HAL_TIM_PWM_Start>

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000254 	.word	0x20000254
 8001614:	2000029c 	.word	0x2000029c

08001618 <LED_RGB_SetIntensity>:

void LED_RGB_SetIntensity(uint8_t red, uint8_t green, uint8_t blue) {
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
 8001622:	460b      	mov	r3, r1
 8001624:	71bb      	strb	r3, [r7, #6]
 8001626:	4613      	mov	r3, r2
 8001628:	717b      	strb	r3, [r7, #5]

	htim3.Instance->CCR1 = 100 - red;
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <LED_RGB_SetIntensity+0x44>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = 100 - green;
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <LED_RGB_SetIntensity+0x44>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR1 = 100 - blue;
 8001642:	797b      	ldrb	r3, [r7, #5]
 8001644:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <LED_RGB_SetIntensity+0x48>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	635a      	str	r2, [r3, #52]	; 0x34

}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000254 	.word	0x20000254
 8001660:	2000029c 	.word	0x2000029c

08001664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001668:	b0b8      	sub	sp, #224	; 0xe0
 800166a:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800166c:	f000 fd88 	bl	8002180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001670:	f000 f92a 	bl	80018c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001674:	f000 fb3c 	bl	8001cf0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001678:	f000 faf4 	bl	8001c64 <MX_DMA_Init>
  MX_SPI1_Init();
 800167c:	f000 f98e 	bl	800199c <MX_SPI1_Init>
  MX_SPI3_Init();
 8001680:	f000 f9c2 	bl	8001a08 <MX_SPI3_Init>
  MX_TIM3_Init();
 8001684:	f000 f9f6 	bl	8001a74 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001688:	f000 fa76 	bl	8001b78 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 800168c:	f008 f98a 	bl	80099a4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* Initialise RGB LED */
  LED_RGB_Init();
 8001690:	f7ff ffae 	bl	80015f0 <LED_RGB_Init>
  LED_RGB_SetIntensity(0, 0, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2100      	movs	r1, #0
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff ffbd 	bl	8001618 <LED_RGB_SetIntensity>

  /* Initialise inertial measurement unit */
  BMI088_Init(&imu, &hspi1, GPIOA, SPI1_NCS_ACC_Pin, GPIOC, SPI1_NCS_GYR_Pin);
 800169e:	2310      	movs	r3, #16
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	4b7c      	ldr	r3, [pc, #496]	; (8001894 <main+0x230>)
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2310      	movs	r3, #16
 80016a8:	4a7b      	ldr	r2, [pc, #492]	; (8001898 <main+0x234>)
 80016aa:	497c      	ldr	r1, [pc, #496]	; (800189c <main+0x238>)
 80016ac:	487c      	ldr	r0, [pc, #496]	; (80018a0 <main+0x23c>)
 80016ae:	f7ff f925 	bl	80008fc <BMI088_Init>

  /* Initialise barometric pressure sensor */
  SPL06_Init(&bar, &hspi3, GPIOA, SPI3_NCS_Pin);
 80016b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016b6:	4a78      	ldr	r2, [pc, #480]	; (8001898 <main+0x234>)
 80016b8:	497a      	ldr	r1, [pc, #488]	; (80018a4 <main+0x240>)
 80016ba:	487b      	ldr	r0, [pc, #492]	; (80018a8 <main+0x244>)
 80016bc:	f7ff fbec 	bl	8000e98 <SPL06_Init>

  /* Initialise moving average filter for barometer */
  FIRFilter_Init(&barFilterMovingAverage);
 80016c0:	487a      	ldr	r0, [pc, #488]	; (80018ac <main+0x248>)
 80016c2:	f7ff fe9f 	bl	8001404 <FIRFilter_Init>

  /* Initialise low-pass filters */
  for (uint8_t n = 0; n < 3; n++) {
 80016c6:	2300      	movs	r3, #0
 80016c8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80016cc:	e01c      	b.n	8001708 <main+0xa4>

	  RCFilter_Init(&lpfAcc[n], 5.0f, 0.01f);
 80016ce:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	4a76      	ldr	r2, [pc, #472]	; (80018b0 <main+0x24c>)
 80016d6:	4413      	add	r3, r2
 80016d8:	eddf 0a76 	vldr	s1, [pc, #472]	; 80018b4 <main+0x250>
 80016dc:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff0d 	bl	8001500 <RCFilter_Init>

	  RCFilter_Init(&lpfGyr[n], 25.0f, 0.01f);
 80016e6:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	4a72      	ldr	r2, [pc, #456]	; (80018b8 <main+0x254>)
 80016ee:	4413      	add	r3, r2
 80016f0:	eddf 0a70 	vldr	s1, [pc, #448]	; 80018b4 <main+0x250>
 80016f4:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff01 	bl	8001500 <RCFilter_Init>
  for (uint8_t n = 0; n < 3; n++) {
 80016fe:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001702:	3301      	adds	r3, #1
 8001704:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8001708:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800170c:	2b02      	cmp	r3, #2
 800170e:	d9de      	bls.n	80016ce <main+0x6a>

  }

  /* Timers */
  uint32_t timerBAR = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t timerUSB = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t timerLED	= 0;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t timerATT = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* LED colour state */
  uint8_t ledState = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  /* Roll and pitch estimates */
  rollEstimate_rad  = 0.0f;
 800172e:	4b63      	ldr	r3, [pc, #396]	; (80018bc <main+0x258>)
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
  pitchEstimate_rad = 0.0f;
 8001736:	4b62      	ldr	r3, [pc, #392]	; (80018c0 <main+0x25c>)
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
  char logBuf[128];
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float rollAcc_rad  = 0.0f;
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  float pitchAcc_rad = 0.0f;
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  float rollGyr_rad = 0.0f;
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  float pitchGyr_rad = 0.0f;
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  while (1)
  {
    /* USER CODE END WHILE */

	  /* Log data via USB */
	  if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB) {
 800175e:	f000 fd75 	bl	800224c <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b13      	cmp	r3, #19
 800176c:	d94d      	bls.n	800180a <main+0x1a6>
		  /* Print via USB */
		 // sprintf(logBuf, "%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\r\n", rollEstimate_rad * RAD_TO_DEG, pitchEstimate_rad * RAD_TO_DEG,
		//		  	  	  	  	  	  	 	 	 	 rollAcc_rad * RAD_TO_DEG, pitchAcc_rad * RAD_TO_DEG,
		//											 rollGyr_rad * RAD_TO_DEG, pitchGyr_rad * RAD_TO_DEG);

		  sprintf(logBuf, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 800176e:	4b4c      	ldr	r3, [pc, #304]	; (80018a0 <main+0x23c>)
 8001770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fee8 	bl	8000548 <__aeabi_f2d>
 8001778:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800177c:	4b48      	ldr	r3, [pc, #288]	; (80018a0 <main+0x23c>)
 800177e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fee1 	bl	8000548 <__aeabi_f2d>
 8001786:	4604      	mov	r4, r0
 8001788:	460d      	mov	r5, r1
 800178a:	4b45      	ldr	r3, [pc, #276]	; (80018a0 <main+0x23c>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe feda 	bl	8000548 <__aeabi_f2d>
 8001794:	4680      	mov	r8, r0
 8001796:	4689      	mov	r9, r1
				  	  	  	  	  	  	  	  	  	  	  	   imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2]);
 8001798:	4b41      	ldr	r3, [pc, #260]	; (80018a0 <main+0x23c>)
 800179a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		  sprintf(logBuf, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fed3 	bl	8000548 <__aeabi_f2d>
 80017a2:	4682      	mov	sl, r0
 80017a4:	468b      	mov	fp, r1
				  	  	  	  	  	  	  	  	  	  	  	   imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2]);
 80017a6:	4b3e      	ldr	r3, [pc, #248]	; (80018a0 <main+0x23c>)
 80017a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
		  sprintf(logBuf, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fecc 	bl	8000548 <__aeabi_f2d>
 80017b0:	e9c7 0100 	strd	r0, r1, [r7]
				  	  	  	  	  	  	  	  	  	  	  	   imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2]);
 80017b4:	4b3a      	ldr	r3, [pc, #232]	; (80018a0 <main+0x23c>)
 80017b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
		  sprintf(logBuf, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fec5 	bl	8000548 <__aeabi_f2d>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	f107 0010 	add.w	r0, r7, #16
 80017c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80017ca:	ed97 7b00 	vldr	d7, [r7]
 80017ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80017d2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80017d6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80017da:	e9cd 4500 	strd	r4, r5, [sp]
 80017de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017e2:	4938      	ldr	r1, [pc, #224]	; (80018c4 <main+0x260>)
 80017e4:	f008 fe2a 	bl	800a43c <siprintf>

		  CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
 80017e8:	f107 0310 	add.w	r3, r7, #16
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fcef 	bl	80001d0 <strlen>
 80017f2:	4603      	mov	r3, r0
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	f107 0310 	add.w	r3, r7, #16
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f008 f98f 	bl	8009b20 <CDC_Transmit_FS>

		  timerUSB = HAL_GetTick();
 8001802:	f000 fd23 	bl	800224c <HAL_GetTick>
 8001806:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

	  }

	  /* Read pressure sensor */
	  if ((HAL_GetTick() - timerBAR) >= SAMPLE_TIME_MS_BAR) {
 800180a:	f000 fd1f 	bl	800224c <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b7c      	cmp	r3, #124	; 0x7c
 8001818:	d906      	bls.n	8001828 <main+0x1c4>

		  SPL06_ReadDMA(&bar);
 800181a:	4823      	ldr	r0, [pc, #140]	; (80018a8 <main+0x244>)
 800181c:	f7ff fd04 	bl	8001228 <SPL06_ReadDMA>

		  timerBAR = HAL_GetTick();
 8001820:	f000 fd14 	bl	800224c <HAL_GetTick>
 8001824:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

	  }

	  /* Toggle LED */
	  if ((HAL_GetTick() - timerLED) >= SAMPLE_TIME_MS_LED) {
 8001828:	f000 fd10 	bl	800224c <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2bf9      	cmp	r3, #249	; 0xf9
 8001836:	d992      	bls.n	800175e <main+0xfa>

		  switch(ledState) {
 8001838:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800183c:	2b02      	cmp	r3, #2
 800183e:	d012      	beq.n	8001866 <main+0x202>
 8001840:	2b02      	cmp	r3, #2
 8001842:	dc16      	bgt.n	8001872 <main+0x20e>
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <main+0x1ea>
 8001848:	2b01      	cmp	r3, #1
 800184a:	d006      	beq.n	800185a <main+0x1f6>
 800184c:	e011      	b.n	8001872 <main+0x20e>

			  case 0:
				  LED_RGB_SetIntensity(100, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	2064      	movs	r0, #100	; 0x64
 8001854:	f7ff fee0 	bl	8001618 <LED_RGB_SetIntensity>
				  break;
 8001858:	e00b      	b.n	8001872 <main+0x20e>

			  case 1:
				  LED_RGB_SetIntensity(0, 75, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	214b      	movs	r1, #75	; 0x4b
 800185e:	2000      	movs	r0, #0
 8001860:	f7ff feda 	bl	8001618 <LED_RGB_SetIntensity>
				  break;
 8001864:	e005      	b.n	8001872 <main+0x20e>

			  case 2:
				  LED_RGB_SetIntensity(0, 0, 100);
 8001866:	2264      	movs	r2, #100	; 0x64
 8001868:	2100      	movs	r1, #0
 800186a:	2000      	movs	r0, #0
 800186c:	f7ff fed4 	bl	8001618 <LED_RGB_SetIntensity>
				  break;
 8001870:	bf00      	nop

		  }

		  ledState++;
 8001872:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001876:	3301      	adds	r3, #1
 8001878:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

		  if (ledState > 2) {
 800187c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001880:	2b02      	cmp	r3, #2
 8001882:	d902      	bls.n	800188a <main+0x226>

			  ledState = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

		  }

		  timerLED = HAL_GetTick();
 800188a:	f000 fcdf 	bl	800224c <HAL_GetTick>
 800188e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	  if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB) {
 8001892:	e764      	b.n	800175e <main+0xfa>
 8001894:	40020800 	.word	0x40020800
 8001898:	40020000 	.word	0x40020000
 800189c:	200001a4 	.word	0x200001a4
 80018a0:	200002e4 	.word	0x200002e4
 80018a4:	200001fc 	.word	0x200001fc
 80018a8:	20000334 	.word	0x20000334
 80018ac:	200003c8 	.word	0x200003c8
 80018b0:	20000368 	.word	0x20000368
 80018b4:	3c23d70a 	.word	0x3c23d70a
 80018b8:	20000398 	.word	0x20000398
 80018bc:	200003f8 	.word	0x200003f8
 80018c0:	200003fc 	.word	0x200003fc
 80018c4:	0800ad30 	.word	0x0800ad30

080018c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b094      	sub	sp, #80	; 0x50
 80018cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ce:	f107 0320 	add.w	r3, r7, #32
 80018d2:	2230      	movs	r2, #48	; 0x30
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f008 fda8 	bl	800a42c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	4b28      	ldr	r3, [pc, #160]	; (8001994 <SystemClock_Config+0xcc>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	4a27      	ldr	r2, [pc, #156]	; (8001994 <SystemClock_Config+0xcc>)
 80018f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fa:	6413      	str	r3, [r2, #64]	; 0x40
 80018fc:	4b25      	ldr	r3, [pc, #148]	; (8001994 <SystemClock_Config+0xcc>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <SystemClock_Config+0xd0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a21      	ldr	r2, [pc, #132]	; (8001998 <SystemClock_Config+0xd0>)
 8001912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <SystemClock_Config+0xd0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001924:	2301      	movs	r3, #1
 8001926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001928:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800192e:	2302      	movs	r3, #2
 8001930:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001932:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001938:	2308      	movs	r3, #8
 800193a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800193c:	23a8      	movs	r3, #168	; 0xa8
 800193e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001940:	2302      	movs	r3, #2
 8001942:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001944:	2307      	movs	r3, #7
 8001946:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001948:	f107 0320 	add.w	r3, r7, #32
 800194c:	4618      	mov	r0, r3
 800194e:	f002 fa77 	bl	8003e40 <HAL_RCC_OscConfig>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001958:	f000 fa5c 	bl	8001e14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800195c:	230f      	movs	r3, #15
 800195e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001960:	2302      	movs	r3, #2
 8001962:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001968:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800196c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800196e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001972:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	2105      	movs	r1, #5
 800197a:	4618      	mov	r0, r3
 800197c:	f002 fcd8 	bl	8004330 <HAL_RCC_ClockConfig>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001986:	f000 fa45 	bl	8001e14 <Error_Handler>
  }
}
 800198a:	bf00      	nop
 800198c:	3750      	adds	r7, #80	; 0x50
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	40007000 	.word	0x40007000

0800199c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019a2:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <MX_SPI1_Init+0x68>)
 80019a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019a6:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019d0:	2218      	movs	r2, #24
 80019d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019dc:	2200      	movs	r2, #0
 80019de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019e8:	220a      	movs	r2, #10
 80019ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ec:	4804      	ldr	r0, [pc, #16]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019ee:	f002 fe95 	bl	800471c <HAL_SPI_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019f8:	f000 fa0c 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	200001a4 	.word	0x200001a4
 8001a04:	40013000 	.word	0x40013000

08001a08 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <MX_SPI3_Init+0x64>)
 8001a0e:	4a18      	ldr	r2, [pc, #96]	; (8001a70 <MX_SPI3_Init+0x68>)
 8001a10:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <MX_SPI3_Init+0x64>)
 8001a14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a18:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a1a:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <MX_SPI3_Init+0x64>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <MX_SPI3_Init+0x64>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <MX_SPI3_Init+0x64>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <MX_SPI3_Init+0x64>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <MX_SPI3_Init+0x64>)
 8001a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a38:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <MX_SPI3_Init+0x64>)
 8001a3c:	2210      	movs	r2, #16
 8001a3e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a40:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <MX_SPI3_Init+0x64>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <MX_SPI3_Init+0x64>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <MX_SPI3_Init+0x64>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <MX_SPI3_Init+0x64>)
 8001a54:	220a      	movs	r2, #10
 8001a56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a58:	4804      	ldr	r0, [pc, #16]	; (8001a6c <MX_SPI3_Init+0x64>)
 8001a5a:	f002 fe5f 	bl	800471c <HAL_SPI_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001a64:	f000 f9d6 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200001fc 	.word	0x200001fc
 8001a70:	40003c00 	.word	0x40003c00

08001a74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08e      	sub	sp, #56	; 0x38
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a88:	f107 0320 	add.w	r3, r7, #32
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
 8001aa0:	615a      	str	r2, [r3, #20]
 8001aa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aa4:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <MX_TIM3_Init+0xfc>)
 8001aa6:	4a33      	ldr	r2, [pc, #204]	; (8001b74 <MX_TIM3_Init+0x100>)
 8001aa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8001aaa:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <MX_TIM3_Init+0xfc>)
 8001aac:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001ab0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab2:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <MX_TIM3_Init+0xfc>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <MX_TIM3_Init+0xfc>)
 8001aba:	2263      	movs	r2, #99	; 0x63
 8001abc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abe:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <MX_TIM3_Init+0xfc>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac4:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <MX_TIM3_Init+0xfc>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aca:	4829      	ldr	r0, [pc, #164]	; (8001b70 <MX_TIM3_Init+0xfc>)
 8001acc:	f003 fcce 	bl	800546c <HAL_TIM_Base_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ad6:	f000 f99d 	bl	8001e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ae0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4822      	ldr	r0, [pc, #136]	; (8001b70 <MX_TIM3_Init+0xfc>)
 8001ae8:	f003 fef2 	bl	80058d0 <HAL_TIM_ConfigClockSource>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001af2:	f000 f98f 	bl	8001e14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001af6:	481e      	ldr	r0, [pc, #120]	; (8001b70 <MX_TIM3_Init+0xfc>)
 8001af8:	f003 fd07 	bl	800550a <HAL_TIM_PWM_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b02:	f000 f987 	bl	8001e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b0e:	f107 0320 	add.w	r3, r7, #32
 8001b12:	4619      	mov	r1, r3
 8001b14:	4816      	ldr	r0, [pc, #88]	; (8001b70 <MX_TIM3_Init+0xfc>)
 8001b16:	f004 fab3 	bl	8006080 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b20:	f000 f978 	bl	8001e14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b24:	2360      	movs	r3, #96	; 0x60
 8001b26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	2200      	movs	r2, #0
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480d      	ldr	r0, [pc, #52]	; (8001b70 <MX_TIM3_Init+0xfc>)
 8001b3c:	f003 fe06 	bl	800574c <HAL_TIM_PWM_ConfigChannel>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b46:	f000 f965 	bl	8001e14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4807      	ldr	r0, [pc, #28]	; (8001b70 <MX_TIM3_Init+0xfc>)
 8001b52:	f003 fdfb 	bl	800574c <HAL_TIM_PWM_ConfigChannel>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001b5c:	f000 f95a 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b60:	4803      	ldr	r0, [pc, #12]	; (8001b70 <MX_TIM3_Init+0xfc>)
 8001b62:	f000 fa07 	bl	8001f74 <HAL_TIM_MspPostInit>

}
 8001b66:	bf00      	nop
 8001b68:	3738      	adds	r7, #56	; 0x38
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000254 	.word	0x20000254
 8001b74:	40000400 	.word	0x40000400

08001b78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08e      	sub	sp, #56	; 0x38
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8c:	f107 0320 	add.w	r3, r7, #32
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
 8001ba4:	615a      	str	r2, [r3, #20]
 8001ba6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <MX_TIM4_Init+0xe4>)
 8001baa:	4a2d      	ldr	r2, [pc, #180]	; (8001c60 <MX_TIM4_Init+0xe8>)
 8001bac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400-1;
 8001bae:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <MX_TIM4_Init+0xe4>)
 8001bb0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001bb4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb6:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <MX_TIM4_Init+0xe4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001bbc:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <MX_TIM4_Init+0xe4>)
 8001bbe:	2263      	movs	r2, #99	; 0x63
 8001bc0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc2:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <MX_TIM4_Init+0xe4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc8:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <MX_TIM4_Init+0xe4>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bce:	4823      	ldr	r0, [pc, #140]	; (8001c5c <MX_TIM4_Init+0xe4>)
 8001bd0:	f003 fc4c 	bl	800546c <HAL_TIM_Base_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001bda:	f000 f91b 	bl	8001e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001be4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001be8:	4619      	mov	r1, r3
 8001bea:	481c      	ldr	r0, [pc, #112]	; (8001c5c <MX_TIM4_Init+0xe4>)
 8001bec:	f003 fe70 	bl	80058d0 <HAL_TIM_ConfigClockSource>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001bf6:	f000 f90d 	bl	8001e14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001bfa:	4818      	ldr	r0, [pc, #96]	; (8001c5c <MX_TIM4_Init+0xe4>)
 8001bfc:	f003 fc85 	bl	800550a <HAL_TIM_PWM_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001c06:	f000 f905 	bl	8001e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c12:	f107 0320 	add.w	r3, r7, #32
 8001c16:	4619      	mov	r1, r3
 8001c18:	4810      	ldr	r0, [pc, #64]	; (8001c5c <MX_TIM4_Init+0xe4>)
 8001c1a:	f004 fa31 	bl	8006080 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001c24:	f000 f8f6 	bl	8001e14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c28:	2360      	movs	r3, #96	; 0x60
 8001c2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4807      	ldr	r0, [pc, #28]	; (8001c5c <MX_TIM4_Init+0xe4>)
 8001c40:	f003 fd84 	bl	800574c <HAL_TIM_PWM_ConfigChannel>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001c4a:	f000 f8e3 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c4e:	4803      	ldr	r0, [pc, #12]	; (8001c5c <MX_TIM4_Init+0xe4>)
 8001c50:	f000 f990 	bl	8001f74 <HAL_TIM_MspPostInit>

}
 8001c54:	bf00      	nop
 8001c56:	3738      	adds	r7, #56	; 0x38
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	2000029c 	.word	0x2000029c
 8001c60:	40000800 	.word	0x40000800

08001c64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <MX_DMA_Init+0x88>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a1e      	ldr	r2, [pc, #120]	; (8001cec <MX_DMA_Init+0x88>)
 8001c74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <MX_DMA_Init+0x88>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <MX_DMA_Init+0x88>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a17      	ldr	r2, [pc, #92]	; (8001cec <MX_DMA_Init+0x88>)
 8001c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <MX_DMA_Init+0x88>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	200b      	movs	r0, #11
 8001ca8:	f000 fbdb 	bl	8002462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001cac:	200b      	movs	r0, #11
 8001cae:	f000 fbf4 	bl	800249a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2010      	movs	r0, #16
 8001cb8:	f000 fbd3 	bl	8002462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001cbc:	2010      	movs	r0, #16
 8001cbe:	f000 fbec 	bl	800249a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2038      	movs	r0, #56	; 0x38
 8001cc8:	f000 fbcb 	bl	8002462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ccc:	2038      	movs	r0, #56	; 0x38
 8001cce:	f000 fbe4 	bl	800249a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	203b      	movs	r0, #59	; 0x3b
 8001cd8:	f000 fbc3 	bl	8002462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001cdc:	203b      	movs	r0, #59	; 0x3b
 8001cde:	f000 fbdc 	bl	800249a <HAL_NVIC_EnableIRQ>

}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800

08001cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
 8001d04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b3f      	ldr	r3, [pc, #252]	; (8001e08 <MX_GPIO_Init+0x118>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a3e      	ldr	r2, [pc, #248]	; (8001e08 <MX_GPIO_Init+0x118>)
 8001d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b3c      	ldr	r3, [pc, #240]	; (8001e08 <MX_GPIO_Init+0x118>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b38      	ldr	r3, [pc, #224]	; (8001e08 <MX_GPIO_Init+0x118>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a37      	ldr	r2, [pc, #220]	; (8001e08 <MX_GPIO_Init+0x118>)
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b35      	ldr	r3, [pc, #212]	; (8001e08 <MX_GPIO_Init+0x118>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	4b31      	ldr	r3, [pc, #196]	; (8001e08 <MX_GPIO_Init+0x118>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a30      	ldr	r2, [pc, #192]	; (8001e08 <MX_GPIO_Init+0x118>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b2e      	ldr	r3, [pc, #184]	; (8001e08 <MX_GPIO_Init+0x118>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <MX_GPIO_Init+0x118>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a29      	ldr	r2, [pc, #164]	; (8001e08 <MX_GPIO_Init+0x118>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <MX_GPIO_Init+0x118>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NCS_ACC_Pin|SPI3_NCS_Pin, GPIO_PIN_RESET);
 8001d76:	2200      	movs	r2, #0
 8001d78:	f248 0110 	movw	r1, #32784	; 0x8010
 8001d7c:	4823      	ldr	r0, [pc, #140]	; (8001e0c <MX_GPIO_Init+0x11c>)
 8001d7e:	f000 fdc9 	bl	8002914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_NCS_GYR_Pin|FLASH_NHOLD_Pin|FLASH_NWP_Pin, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	21d0      	movs	r1, #208	; 0xd0
 8001d86:	4822      	ldr	r0, [pc, #136]	; (8001e10 <MX_GPIO_Init+0x120>)
 8001d88:	f000 fdc4 	bl	8002914 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 8001d8c:	230c      	movs	r3, #12
 8001d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d90:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	481b      	ldr	r0, [pc, #108]	; (8001e10 <MX_GPIO_Init+0x120>)
 8001da2:	f000 fc1b 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_NCS_ACC_Pin SPI3_NCS_Pin */
  GPIO_InitStruct.Pin = SPI1_NCS_ACC_Pin|SPI3_NCS_Pin;
 8001da6:	f248 0310 	movw	r3, #32784	; 0x8010
 8001daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dac:	2301      	movs	r3, #1
 8001dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4813      	ldr	r0, [pc, #76]	; (8001e0c <MX_GPIO_Init+0x11c>)
 8001dc0:	f000 fc0c 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_NCS_GYR_Pin FLASH_NHOLD_Pin FLASH_NWP_Pin */
  GPIO_InitStruct.Pin = SPI1_NCS_GYR_Pin|FLASH_NHOLD_Pin|FLASH_NWP_Pin;
 8001dc4:	23d0      	movs	r3, #208	; 0xd0
 8001dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480d      	ldr	r0, [pc, #52]	; (8001e10 <MX_GPIO_Init+0x120>)
 8001ddc:	f000 fbfe 	bl	80025dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2100      	movs	r1, #0
 8001de4:	2008      	movs	r0, #8
 8001de6:	f000 fb3c 	bl	8002462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001dea:	2008      	movs	r0, #8
 8001dec:	f000 fb55 	bl	800249a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2100      	movs	r1, #0
 8001df4:	2009      	movs	r0, #9
 8001df6:	f000 fb34 	bl	8002462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001dfa:	2009      	movs	r0, #9
 8001dfc:	f000 fb4d 	bl	800249a <HAL_NVIC_EnableIRQ>

}
 8001e00:	bf00      	nop
 8001e02:	3728      	adds	r7, #40	; 0x28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	40020800 	.word	0x40020800

08001e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_MspInit+0x4c>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	4a0f      	ldr	r2, [pc, #60]	; (8001e70 <HAL_MspInit+0x4c>)
 8001e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e38:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_MspInit+0x4c>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_MspInit+0x4c>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a08      	ldr	r2, [pc, #32]	; (8001e70 <HAL_MspInit+0x4c>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_MspInit+0x4c>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800

08001e74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a19      	ldr	r2, [pc, #100]	; (8001ef8 <HAL_SPI_MspInit+0x84>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d12b      	bne.n	8001eee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_SPI_MspInit+0x88>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	4a17      	ldr	r2, [pc, #92]	; (8001efc <HAL_SPI_MspInit+0x88>)
 8001ea0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <HAL_SPI_MspInit+0x88>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_SPI_MspInit+0x88>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a10      	ldr	r2, [pc, #64]	; (8001efc <HAL_SPI_MspInit+0x88>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <HAL_SPI_MspInit+0x88>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ece:	23e0      	movs	r3, #224	; 0xe0
 8001ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eda:	2303      	movs	r3, #3
 8001edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ede:	2305      	movs	r3, #5
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4805      	ldr	r0, [pc, #20]	; (8001f00 <HAL_SPI_MspInit+0x8c>)
 8001eea:	f000 fb77 	bl	80025dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001eee:	bf00      	nop
 8001ef0:	3728      	adds	r7, #40	; 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40013000 	.word	0x40013000
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020000 	.word	0x40020000

08001f04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a15      	ldr	r2, [pc, #84]	; (8001f68 <HAL_TIM_Base_MspInit+0x64>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d10e      	bne.n	8001f34 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <HAL_TIM_Base_MspInit+0x68>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	4a13      	ldr	r2, [pc, #76]	; (8001f6c <HAL_TIM_Base_MspInit+0x68>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	6413      	str	r3, [r2, #64]	; 0x40
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_TIM_Base_MspInit+0x68>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f32:	e012      	b.n	8001f5a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <HAL_TIM_Base_MspInit+0x6c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d10d      	bne.n	8001f5a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_TIM_Base_MspInit+0x68>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	4a09      	ldr	r2, [pc, #36]	; (8001f6c <HAL_TIM_Base_MspInit+0x68>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4e:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <HAL_TIM_Base_MspInit+0x68>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40000400 	.word	0x40000400
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40000800 	.word	0x40000800

08001f74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a24      	ldr	r2, [pc, #144]	; (8002024 <HAL_TIM_MspPostInit+0xb0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d11e      	bne.n	8001fd4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b23      	ldr	r3, [pc, #140]	; (8002028 <HAL_TIM_MspPostInit+0xb4>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a22      	ldr	r2, [pc, #136]	; (8002028 <HAL_TIM_MspPostInit+0xb4>)
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_TIM_MspPostInit+0xb4>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001fb2:	2330      	movs	r3, #48	; 0x30
 8001fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4817      	ldr	r0, [pc, #92]	; (800202c <HAL_TIM_MspPostInit+0xb8>)
 8001fce:	f000 fb05 	bl	80025dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001fd2:	e022      	b.n	800201a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a15      	ldr	r2, [pc, #84]	; (8002030 <HAL_TIM_MspPostInit+0xbc>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d11d      	bne.n	800201a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_TIM_MspPostInit+0xb4>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a10      	ldr	r2, [pc, #64]	; (8002028 <HAL_TIM_MspPostInit+0xb4>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <HAL_TIM_MspPostInit+0xb4>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ffa:	2340      	movs	r3, #64	; 0x40
 8001ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800200a:	2302      	movs	r3, #2
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4619      	mov	r1, r3
 8002014:	4805      	ldr	r0, [pc, #20]	; (800202c <HAL_TIM_MspPostInit+0xb8>)
 8002016:	f000 fae1 	bl	80025dc <HAL_GPIO_Init>
}
 800201a:	bf00      	nop
 800201c:	3728      	adds	r7, #40	; 0x28
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40000400 	.word	0x40000400
 8002028:	40023800 	.word	0x40023800
 800202c:	40020400 	.word	0x40020400
 8002030:	40000800 	.word	0x40000800

08002034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002038:	e7fe      	b.n	8002038 <NMI_Handler+0x4>

0800203a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203e:	e7fe      	b.n	800203e <HardFault_Handler+0x4>

08002040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <MemManage_Handler+0x4>

08002046 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204a:	e7fe      	b.n	800204a <BusFault_Handler+0x4>

0800204c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <UsageFault_Handler+0x4>

08002052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002080:	f000 f8d0 	bl	8002224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}

08002088 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <OTG_FS_IRQHandler+0x10>)
 800208e:	f000 fdaa 	bl	8002be6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200018e8 	.word	0x200018e8

0800209c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a4:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <_sbrk+0x5c>)
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <_sbrk+0x60>)
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <_sbrk+0x64>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	; (8002104 <_sbrk+0x68>)
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d207      	bcs.n	80020dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020cc:	f008 f984 	bl	800a3d8 <__errno>
 80020d0:	4603      	mov	r3, r0
 80020d2:	220c      	movs	r2, #12
 80020d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
 80020da:	e009      	b.n	80020f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	4a05      	ldr	r2, [pc, #20]	; (8002100 <_sbrk+0x64>)
 80020ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20020000 	.word	0x20020000
 80020fc:	00000400 	.word	0x00000400
 8002100:	20000400 	.word	0x20000400
 8002104:	20002028 	.word	0x20002028

08002108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <SystemInit+0x20>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002112:	4a05      	ldr	r2, [pc, #20]	; (8002128 <SystemInit+0x20>)
 8002114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800212c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002164 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002130:	480d      	ldr	r0, [pc, #52]	; (8002168 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002132:	490e      	ldr	r1, [pc, #56]	; (800216c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002134:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002138:	e002      	b.n	8002140 <LoopCopyDataInit>

0800213a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800213c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213e:	3304      	adds	r3, #4

08002140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002144:	d3f9      	bcc.n	800213a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002146:	4a0b      	ldr	r2, [pc, #44]	; (8002174 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002148:	4c0b      	ldr	r4, [pc, #44]	; (8002178 <LoopFillZerobss+0x26>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800214c:	e001      	b.n	8002152 <LoopFillZerobss>

0800214e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002150:	3204      	adds	r2, #4

08002152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002154:	d3fb      	bcc.n	800214e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002156:	f7ff ffd7 	bl	8002108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800215a:	f008 f943 	bl	800a3e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800215e:	f7ff fa81 	bl	8001664 <main>
  bx  lr    
 8002162:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002164:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800216c:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8002170:	0800adec 	.word	0x0800adec
  ldr r2, =_sbss
 8002174:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8002178:	20002024 	.word	0x20002024

0800217c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800217c:	e7fe      	b.n	800217c <ADC_IRQHandler>
	...

08002180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_Init+0x40>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <HAL_Init+0x40>)
 800218a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_Init+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <HAL_Init+0x40>)
 8002196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800219a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <HAL_Init+0x40>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <HAL_Init+0x40>)
 80021a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a8:	2003      	movs	r0, #3
 80021aa:	f000 f94f 	bl	800244c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ae:	200f      	movs	r0, #15
 80021b0:	f000 f808 	bl	80021c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b4:	f7ff fe36 	bl	8001e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023c00 	.word	0x40023c00

080021c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_InitTick+0x54>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_InitTick+0x58>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4619      	mov	r1, r3
 80021d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021da:	fbb3 f3f1 	udiv	r3, r3, r1
 80021de:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f967 	bl	80024b6 <HAL_SYSTICK_Config>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e00e      	b.n	8002210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b0f      	cmp	r3, #15
 80021f6:	d80a      	bhi.n	800220e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f8:	2200      	movs	r2, #0
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002200:	f000 f92f 	bl	8002462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002204:	4a06      	ldr	r2, [pc, #24]	; (8002220 <HAL_InitTick+0x5c>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	e000      	b.n	8002210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000028 	.word	0x20000028
 800221c:	20000030 	.word	0x20000030
 8002220:	2000002c 	.word	0x2000002c

08002224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_IncTick+0x20>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_IncTick+0x24>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4413      	add	r3, r2
 8002234:	4a04      	ldr	r2, [pc, #16]	; (8002248 <HAL_IncTick+0x24>)
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000030 	.word	0x20000030
 8002248:	20000404 	.word	0x20000404

0800224c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return uwTick;
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <HAL_GetTick+0x14>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000404 	.word	0x20000404

08002264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800226c:	f7ff ffee 	bl	800224c <HAL_GetTick>
 8002270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d005      	beq.n	800228a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <HAL_Delay+0x44>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800228a:	bf00      	nop
 800228c:	f7ff ffde 	bl	800224c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	429a      	cmp	r2, r3
 800229a:	d8f7      	bhi.n	800228c <HAL_Delay+0x28>
  {
  }
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000030 	.word	0x20000030

080022ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <__NVIC_SetPriorityGrouping+0x44>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c8:	4013      	ands	r3, r2
 80022ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022de:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <__NVIC_SetPriorityGrouping+0x44>)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	60d3      	str	r3, [r2, #12]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <__NVIC_GetPriorityGrouping+0x18>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	f003 0307 	and.w	r3, r3, #7
}
 8002302:	4618      	mov	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	2b00      	cmp	r3, #0
 8002320:	db0b      	blt.n	800233a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	f003 021f 	and.w	r2, r3, #31
 8002328:	4907      	ldr	r1, [pc, #28]	; (8002348 <__NVIC_EnableIRQ+0x38>)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	2001      	movs	r0, #1
 8002332:	fa00 f202 	lsl.w	r2, r0, r2
 8002336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000e100 	.word	0xe000e100

0800234c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	2b00      	cmp	r3, #0
 800235e:	db0a      	blt.n	8002376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	490c      	ldr	r1, [pc, #48]	; (8002398 <__NVIC_SetPriority+0x4c>)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	0112      	lsls	r2, r2, #4
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	440b      	add	r3, r1
 8002370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002374:	e00a      	b.n	800238c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4908      	ldr	r1, [pc, #32]	; (800239c <__NVIC_SetPriority+0x50>)
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	3b04      	subs	r3, #4
 8002384:	0112      	lsls	r2, r2, #4
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	440b      	add	r3, r1
 800238a:	761a      	strb	r2, [r3, #24]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000e100 	.word	0xe000e100
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	; 0x24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f1c3 0307 	rsb	r3, r3, #7
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	bf28      	it	cs
 80023be:	2304      	movcs	r3, #4
 80023c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3304      	adds	r3, #4
 80023c6:	2b06      	cmp	r3, #6
 80023c8:	d902      	bls.n	80023d0 <NVIC_EncodePriority+0x30>
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3b03      	subs	r3, #3
 80023ce:	e000      	b.n	80023d2 <NVIC_EncodePriority+0x32>
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	401a      	ands	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	43d9      	mvns	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	4313      	orrs	r3, r2
         );
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3724      	adds	r7, #36	; 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3b01      	subs	r3, #1
 8002414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002418:	d301      	bcc.n	800241e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800241a:	2301      	movs	r3, #1
 800241c:	e00f      	b.n	800243e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800241e:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <SysTick_Config+0x40>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002426:	210f      	movs	r1, #15
 8002428:	f04f 30ff 	mov.w	r0, #4294967295
 800242c:	f7ff ff8e 	bl	800234c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <SysTick_Config+0x40>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002436:	4b04      	ldr	r3, [pc, #16]	; (8002448 <SysTick_Config+0x40>)
 8002438:	2207      	movs	r2, #7
 800243a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	e000e010 	.word	0xe000e010

0800244c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff ff29 	bl	80022ac <__NVIC_SetPriorityGrouping>
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002462:	b580      	push	{r7, lr}
 8002464:	b086      	sub	sp, #24
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002474:	f7ff ff3e 	bl	80022f4 <__NVIC_GetPriorityGrouping>
 8002478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	6978      	ldr	r0, [r7, #20]
 8002480:	f7ff ff8e 	bl	80023a0 <NVIC_EncodePriority>
 8002484:	4602      	mov	r2, r0
 8002486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff5d 	bl	800234c <__NVIC_SetPriority>
}
 8002492:	bf00      	nop
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff31 	bl	8002310 <__NVIC_EnableIRQ>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff ffa2 	bl	8002408 <SysTick_Config>
 80024c4:	4603      	mov	r3, r0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_DMA_Start_IT+0x26>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e040      	b.n	8002576 <HAL_DMA_Start_IT+0xa8>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d12f      	bne.n	8002568 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 f82e 	bl	800257e <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	223f      	movs	r2, #63	; 0x3f
 8002528:	409a      	lsls	r2, r3
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0216 	orr.w	r2, r2, #22
 800253c:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0208 	orr.w	r2, r2, #8
 8002554:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0201 	orr.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e005      	b.n	8002574 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002570:	2302      	movs	r3, #2
 8002572:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002574:	7dfb      	ldrb	r3, [r7, #23]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800257e:	b480      	push	{r7}
 8002580:	b085      	sub	sp, #20
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800259a:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b40      	cmp	r3, #64	; 0x40
 80025aa:	d108      	bne.n	80025be <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025bc:	e007      	b.n	80025ce <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	60da      	str	r2, [r3, #12]
}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025dc:	b480      	push	{r7}
 80025de:	b089      	sub	sp, #36	; 0x24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	e16b      	b.n	80028d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025f8:	2201      	movs	r2, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	429a      	cmp	r2, r3
 8002612:	f040 815a 	bne.w	80028ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b01      	cmp	r3, #1
 8002620:	d005      	beq.n	800262e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800262a:	2b02      	cmp	r3, #2
 800262c:	d130      	bne.n	8002690 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	2203      	movs	r2, #3
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002664:	2201      	movs	r2, #1
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	091b      	lsrs	r3, r3, #4
 800267a:	f003 0201 	and.w	r2, r3, #1
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	2b03      	cmp	r3, #3
 800269a:	d017      	beq.n	80026cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	2203      	movs	r2, #3
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d123      	bne.n	8002720 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	08da      	lsrs	r2, r3, #3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3208      	adds	r2, #8
 80026e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	220f      	movs	r2, #15
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	08da      	lsrs	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3208      	adds	r2, #8
 800271a:	69b9      	ldr	r1, [r7, #24]
 800271c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	2203      	movs	r2, #3
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0203 	and.w	r2, r3, #3
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 80b4 	beq.w	80028ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	4b60      	ldr	r3, [pc, #384]	; (80028e8 <HAL_GPIO_Init+0x30c>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	4a5f      	ldr	r2, [pc, #380]	; (80028e8 <HAL_GPIO_Init+0x30c>)
 800276c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002770:	6453      	str	r3, [r2, #68]	; 0x44
 8002772:	4b5d      	ldr	r3, [pc, #372]	; (80028e8 <HAL_GPIO_Init+0x30c>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800277e:	4a5b      	ldr	r2, [pc, #364]	; (80028ec <HAL_GPIO_Init+0x310>)
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	089b      	lsrs	r3, r3, #2
 8002784:	3302      	adds	r3, #2
 8002786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	220f      	movs	r2, #15
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <HAL_GPIO_Init+0x314>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d02b      	beq.n	8002802 <HAL_GPIO_Init+0x226>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a51      	ldr	r2, [pc, #324]	; (80028f4 <HAL_GPIO_Init+0x318>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d025      	beq.n	80027fe <HAL_GPIO_Init+0x222>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a50      	ldr	r2, [pc, #320]	; (80028f8 <HAL_GPIO_Init+0x31c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d01f      	beq.n	80027fa <HAL_GPIO_Init+0x21e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a4f      	ldr	r2, [pc, #316]	; (80028fc <HAL_GPIO_Init+0x320>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d019      	beq.n	80027f6 <HAL_GPIO_Init+0x21a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a4e      	ldr	r2, [pc, #312]	; (8002900 <HAL_GPIO_Init+0x324>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d013      	beq.n	80027f2 <HAL_GPIO_Init+0x216>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a4d      	ldr	r2, [pc, #308]	; (8002904 <HAL_GPIO_Init+0x328>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00d      	beq.n	80027ee <HAL_GPIO_Init+0x212>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a4c      	ldr	r2, [pc, #304]	; (8002908 <HAL_GPIO_Init+0x32c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d007      	beq.n	80027ea <HAL_GPIO_Init+0x20e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a4b      	ldr	r2, [pc, #300]	; (800290c <HAL_GPIO_Init+0x330>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d101      	bne.n	80027e6 <HAL_GPIO_Init+0x20a>
 80027e2:	2307      	movs	r3, #7
 80027e4:	e00e      	b.n	8002804 <HAL_GPIO_Init+0x228>
 80027e6:	2308      	movs	r3, #8
 80027e8:	e00c      	b.n	8002804 <HAL_GPIO_Init+0x228>
 80027ea:	2306      	movs	r3, #6
 80027ec:	e00a      	b.n	8002804 <HAL_GPIO_Init+0x228>
 80027ee:	2305      	movs	r3, #5
 80027f0:	e008      	b.n	8002804 <HAL_GPIO_Init+0x228>
 80027f2:	2304      	movs	r3, #4
 80027f4:	e006      	b.n	8002804 <HAL_GPIO_Init+0x228>
 80027f6:	2303      	movs	r3, #3
 80027f8:	e004      	b.n	8002804 <HAL_GPIO_Init+0x228>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e002      	b.n	8002804 <HAL_GPIO_Init+0x228>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_GPIO_Init+0x228>
 8002802:	2300      	movs	r3, #0
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	f002 0203 	and.w	r2, r2, #3
 800280a:	0092      	lsls	r2, r2, #2
 800280c:	4093      	lsls	r3, r2
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002814:	4935      	ldr	r1, [pc, #212]	; (80028ec <HAL_GPIO_Init+0x310>)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	3302      	adds	r3, #2
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002822:	4b3b      	ldr	r3, [pc, #236]	; (8002910 <HAL_GPIO_Init+0x334>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002846:	4a32      	ldr	r2, [pc, #200]	; (8002910 <HAL_GPIO_Init+0x334>)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800284c:	4b30      	ldr	r3, [pc, #192]	; (8002910 <HAL_GPIO_Init+0x334>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002870:	4a27      	ldr	r2, [pc, #156]	; (8002910 <HAL_GPIO_Init+0x334>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002876:	4b26      	ldr	r3, [pc, #152]	; (8002910 <HAL_GPIO_Init+0x334>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800289a:	4a1d      	ldr	r2, [pc, #116]	; (8002910 <HAL_GPIO_Init+0x334>)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028a0:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <HAL_GPIO_Init+0x334>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028c4:	4a12      	ldr	r2, [pc, #72]	; (8002910 <HAL_GPIO_Init+0x334>)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3301      	adds	r3, #1
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b0f      	cmp	r3, #15
 80028d4:	f67f ae90 	bls.w	80025f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40013800 	.word	0x40013800
 80028f0:	40020000 	.word	0x40020000
 80028f4:	40020400 	.word	0x40020400
 80028f8:	40020800 	.word	0x40020800
 80028fc:	40020c00 	.word	0x40020c00
 8002900:	40021000 	.word	0x40021000
 8002904:	40021400 	.word	0x40021400
 8002908:	40021800 	.word	0x40021800
 800290c:	40021c00 	.word	0x40021c00
 8002910:	40013c00 	.word	0x40013c00

08002914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	807b      	strh	r3, [r7, #2]
 8002920:	4613      	mov	r3, r2
 8002922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002924:	787b      	ldrb	r3, [r7, #1]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800292a:	887a      	ldrh	r2, [r7, #2]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002930:	e003      	b.n	800293a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002932:	887b      	ldrh	r3, [r7, #2]
 8002934:	041a      	lsls	r2, r3, #16
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	619a      	str	r2, [r3, #24]
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002946:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002948:	b08f      	sub	sp, #60	; 0x3c
 800294a:	af0a      	add	r7, sp, #40	; 0x28
 800294c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e10f      	b.n	8002b78 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f007 fa1c 	bl	8009db0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2203      	movs	r2, #3
 800297c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f003 fd03 	bl	80063a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	603b      	str	r3, [r7, #0]
 80029a2:	687e      	ldr	r6, [r7, #4]
 80029a4:	466d      	mov	r5, sp
 80029a6:	f106 0410 	add.w	r4, r6, #16
 80029aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80029ba:	1d33      	adds	r3, r6, #4
 80029bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029be:	6838      	ldr	r0, [r7, #0]
 80029c0:	f003 fbda 	bl	8006178 <USB_CoreInit>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d005      	beq.n	80029d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2202      	movs	r2, #2
 80029ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0d0      	b.n	8002b78 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2100      	movs	r1, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f003 fcf1 	bl	80063c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e2:	2300      	movs	r3, #0
 80029e4:	73fb      	strb	r3, [r7, #15]
 80029e6:	e04a      	b.n	8002a7e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	333d      	adds	r3, #61	; 0x3d
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	333c      	adds	r3, #60	; 0x3c
 8002a0c:	7bfa      	ldrb	r2, [r7, #15]
 8002a0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	b298      	uxth	r0, r3
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	3344      	adds	r3, #68	; 0x44
 8002a24:	4602      	mov	r2, r0
 8002a26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	3340      	adds	r3, #64	; 0x40
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a3c:	7bfa      	ldrb	r2, [r7, #15]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	3348      	adds	r3, #72	; 0x48
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	334c      	adds	r3, #76	; 0x4c
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a64:	7bfa      	ldrb	r2, [r7, #15]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	3354      	adds	r3, #84	; 0x54
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d3af      	bcc.n	80029e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73fb      	strb	r3, [r7, #15]
 8002a8c:	e044      	b.n	8002b18 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	440b      	add	r3, r1
 8002af4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002afc:	7bfa      	ldrb	r2, [r7, #15]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	3301      	adds	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	7bfa      	ldrb	r2, [r7, #15]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d3b5      	bcc.n	8002a8e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	687e      	ldr	r6, [r7, #4]
 8002b2a:	466d      	mov	r5, sp
 8002b2c:	f106 0410 	add.w	r4, r6, #16
 8002b30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b40:	1d33      	adds	r3, r6, #4
 8002b42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b44:	6838      	ldr	r0, [r7, #0]
 8002b46:	f003 fc89 	bl	800645c <USB_DevInit>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e00d      	b.n	8002b78 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f004 fdd8 	bl	8007726 <USB_DevDisconnect>

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b80 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_PCD_Start+0x1c>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e020      	b.n	8002bde <HAL_PCD_Start+0x5e>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d109      	bne.n	8002bc0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d005      	beq.n	8002bc0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f003 fbdb 	bl	8006380 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f004 fd88 	bl	80076e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002be6:	b590      	push	{r4, r7, lr}
 8002be8:	b08d      	sub	sp, #52	; 0x34
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f004 fe46 	bl	800788e <USB_GetMode>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f040 848a 	bne.w	800351e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f004 fdaa 	bl	8007768 <USB_ReadInterrupts>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 8480 	beq.w	800351c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f004 fd97 	bl	8007768 <USB_ReadInterrupts>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d107      	bne.n	8002c54 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f002 0202 	and.w	r2, r2, #2
 8002c52:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f004 fd85 	bl	8007768 <USB_ReadInterrupts>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d161      	bne.n	8002d2c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0210 	bic.w	r2, r2, #16
 8002c76:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	f003 020f 	and.w	r2, r3, #15
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	4413      	add	r3, r2
 8002c94:	3304      	adds	r3, #4
 8002c96:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	0c5b      	lsrs	r3, r3, #17
 8002c9c:	f003 030f 	and.w	r3, r3, #15
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d124      	bne.n	8002cee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d035      	beq.n	8002d1c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	091b      	lsrs	r3, r3, #4
 8002cb8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	6a38      	ldr	r0, [r7, #32]
 8002cc4:	f004 fbbc 	bl	8007440 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cd4:	441a      	add	r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	6a1a      	ldr	r2, [r3, #32]
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ce6:	441a      	add	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	621a      	str	r2, [r3, #32]
 8002cec:	e016      	b.n	8002d1c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	0c5b      	lsrs	r3, r3, #17
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	2b06      	cmp	r3, #6
 8002cf8:	d110      	bne.n	8002d1c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d00:	2208      	movs	r2, #8
 8002d02:	4619      	mov	r1, r3
 8002d04:	6a38      	ldr	r0, [r7, #32]
 8002d06:	f004 fb9b 	bl	8007440 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	6a1a      	ldr	r2, [r3, #32]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d16:	441a      	add	r2, r3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0210 	orr.w	r2, r2, #16
 8002d2a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f004 fd19 	bl	8007768 <USB_ReadInterrupts>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d40:	f040 80a7 	bne.w	8002e92 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f004 fd1e 	bl	800778e <USB_ReadDevAllOutEpInterrupt>
 8002d52:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d54:	e099      	b.n	8002e8a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 808e 	beq.w	8002e7e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f004 fd42 	bl	80077f6 <USB_ReadDevOutEPInterrupt>
 8002d72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00c      	beq.n	8002d98 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fec2 	bl	8003b1c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00c      	beq.n	8002dbc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dae:	461a      	mov	r2, r3
 8002db0:	2308      	movs	r3, #8
 8002db2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002db4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 ff98 	bl	8003cec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	2310      	movs	r3, #16
 8002dd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d030      	beq.n	8002e44 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dea:	2b80      	cmp	r3, #128	; 0x80
 8002dec:	d109      	bne.n	8002e02 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e00:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	4413      	add	r3, r2
 8002e14:	3304      	adds	r3, #4
 8002e16:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	78db      	ldrb	r3, [r3, #3]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d108      	bne.n	8002e32 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	2200      	movs	r2, #0
 8002e24:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f007 f8c5 	bl	8009fbc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2302      	movs	r3, #2
 8002e42:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d008      	beq.n	8002e60 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	2320      	movs	r3, #32
 8002e5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e76:	461a      	mov	r2, r3
 8002e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e7c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	3301      	adds	r3, #1
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	085b      	lsrs	r3, r3, #1
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f47f af62 	bne.w	8002d56 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f004 fc66 	bl	8007768 <USB_ReadInterrupts>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ea6:	f040 80db 	bne.w	8003060 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f004 fc87 	bl	80077c2 <USB_ReadDevAllInEpInterrupt>
 8002eb4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002eba:	e0cd      	b.n	8003058 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 80c2 	beq.w	800304c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f004 fcad 	bl	8007832 <USB_ReadDevInEPInterrupt>
 8002ed8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d057      	beq.n	8002f94 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	2201      	movs	r2, #1
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69f9      	ldr	r1, [r7, #28]
 8002f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f04:	4013      	ands	r3, r2
 8002f06:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f14:	461a      	mov	r2, r3
 8002f16:	2301      	movs	r3, #1
 8002f18:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d132      	bne.n	8002f88 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	334c      	adds	r3, #76	; 0x4c
 8002f32:	6819      	ldr	r1, [r3, #0]
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4403      	add	r3, r0
 8002f42:	3348      	adds	r3, #72	; 0x48
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4419      	add	r1, r3
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4403      	add	r3, r0
 8002f56:	334c      	adds	r3, #76	; 0x4c
 8002f58:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d113      	bne.n	8002f88 <HAL_PCD_IRQHandler+0x3a2>
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	3354      	adds	r3, #84	; 0x54
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d108      	bne.n	8002f88 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f80:	461a      	mov	r2, r3
 8002f82:	2101      	movs	r1, #1
 8002f84:	f004 fcb4 	bl	80078f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f006 ff8f 	bl	8009eb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d008      	beq.n	8002fb0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	015a      	lsls	r2, r3, #5
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002faa:	461a      	mov	r2, r3
 8002fac:	2308      	movs	r3, #8
 8002fae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2310      	movs	r3, #16
 8002fca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2340      	movs	r3, #64	; 0x40
 8002fe6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d023      	beq.n	800303a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ff2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ff4:	6a38      	ldr	r0, [r7, #32]
 8002ff6:	f003 fb95 	bl	8006724 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	3338      	adds	r3, #56	; 0x38
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	3304      	adds	r3, #4
 800300c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	78db      	ldrb	r3, [r3, #3]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d108      	bne.n	8003028 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2200      	movs	r2, #0
 800301a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	b2db      	uxtb	r3, r3
 8003020:	4619      	mov	r1, r3
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f006 ffdc 	bl	8009fe0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	4413      	add	r3, r2
 8003030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003034:	461a      	mov	r2, r3
 8003036:	2302      	movs	r3, #2
 8003038:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003044:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fcdb 	bl	8003a02 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	3301      	adds	r3, #1
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	085b      	lsrs	r3, r3, #1
 8003056:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305a:	2b00      	cmp	r3, #0
 800305c:	f47f af2e 	bne.w	8002ebc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f004 fb7f 	bl	8007768 <USB_ReadInterrupts>
 800306a:	4603      	mov	r3, r0
 800306c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003074:	d122      	bne.n	80030bc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003084:	f023 0301 	bic.w	r3, r3, #1
 8003088:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003090:	2b01      	cmp	r3, #1
 8003092:	d108      	bne.n	80030a6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800309c:	2100      	movs	r1, #0
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fec2 	bl	8003e28 <HAL_PCDEx_LPM_Callback>
 80030a4:	e002      	b.n	80030ac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f006 ff7a 	bl	8009fa0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80030ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f004 fb51 	bl	8007768 <USB_ReadInterrupts>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d0:	d112      	bne.n	80030f8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d102      	bne.n	80030e8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f006 ff36 	bl	8009f54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80030f6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f004 fb33 	bl	8007768 <USB_ReadInterrupts>
 8003102:	4603      	mov	r3, r0
 8003104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310c:	f040 80b7 	bne.w	800327e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311e:	f023 0301 	bic.w	r3, r3, #1
 8003122:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2110      	movs	r1, #16
 800312a:	4618      	mov	r0, r3
 800312c:	f003 fafa 	bl	8006724 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003130:	2300      	movs	r3, #0
 8003132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003134:	e046      	b.n	80031c4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003142:	461a      	mov	r2, r3
 8003144:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003148:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800314a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	4413      	add	r3, r2
 8003152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800315a:	0151      	lsls	r1, r2, #5
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	440a      	add	r2, r1
 8003160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003164:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003168:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	4413      	add	r3, r2
 8003172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003176:	461a      	mov	r2, r3
 8003178:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800317c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	4413      	add	r3, r2
 8003186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800318e:	0151      	lsls	r1, r2, #5
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	440a      	add	r2, r1
 8003194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003198:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800319c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800319e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ae:	0151      	lsls	r1, r2, #5
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	440a      	add	r2, r1
 80031b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c0:	3301      	adds	r3, #1
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d3b3      	bcc.n	8003136 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031dc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80031e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d016      	beq.n	8003218 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031fa:	f043 030b 	orr.w	r3, r3, #11
 80031fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003210:	f043 030b 	orr.w	r3, r3, #11
 8003214:	6453      	str	r3, [r2, #68]	; 0x44
 8003216:	e015      	b.n	8003244 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003226:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800322a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800322e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800323e:	f043 030b 	orr.w	r3, r3, #11
 8003242:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69fa      	ldr	r2, [r7, #28]
 800324e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003252:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003256:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003268:	461a      	mov	r2, r3
 800326a:	f004 fb41 	bl	80078f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695a      	ldr	r2, [r3, #20]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800327c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f004 fa70 	bl	8007768 <USB_ReadInterrupts>
 8003288:	4603      	mov	r3, r0
 800328a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800328e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003292:	d124      	bne.n	80032de <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f004 fb06 	bl	80078aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f003 fabb 	bl	800681e <USB_GetDevSpeed>
 80032a8:	4603      	mov	r3, r0
 80032aa:	461a      	mov	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681c      	ldr	r4, [r3, #0]
 80032b4:	f001 fa26 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 80032b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	4620      	mov	r0, r4
 80032c4:	f002 ffba 	bl	800623c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f006 fe1a 	bl	8009f02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695a      	ldr	r2, [r3, #20]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80032dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f004 fa40 	bl	8007768 <USB_ReadInterrupts>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d10a      	bne.n	8003308 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f006 fdf7 	bl	8009ee6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f002 0208 	and.w	r2, r2, #8
 8003306:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f004 fa2b 	bl	8007768 <USB_ReadInterrupts>
 8003312:	4603      	mov	r3, r0
 8003314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003318:	2b80      	cmp	r3, #128	; 0x80
 800331a:	d122      	bne.n	8003362 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003328:	2301      	movs	r3, #1
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
 800332c:	e014      	b.n	8003358 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003332:	4613      	mov	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d105      	bne.n	8003352 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	b2db      	uxtb	r3, r3
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fb27 	bl	80039a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	3301      	adds	r3, #1
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335e:	429a      	cmp	r2, r3
 8003360:	d3e5      	bcc.n	800332e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f004 f9fe 	bl	8007768 <USB_ReadInterrupts>
 800336c:	4603      	mov	r3, r0
 800336e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003376:	d13b      	bne.n	80033f0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003378:	2301      	movs	r3, #1
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
 800337c:	e02b      	b.n	80033d6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	4413      	add	r3, r2
 8003386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003392:	4613      	mov	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	3340      	adds	r3, #64	; 0x40
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d115      	bne.n	80033d0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80033a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	da12      	bge.n	80033d0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	333f      	adds	r3, #63	; 0x3f
 80033ba:	2201      	movs	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	4619      	mov	r1, r3
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fae8 	bl	80039a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	3301      	adds	r3, #1
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033dc:	429a      	cmp	r2, r3
 80033de:	d3ce      	bcc.n	800337e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80033ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f004 f9b7 	bl	8007768 <USB_ReadInterrupts>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003400:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003404:	d155      	bne.n	80034b2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003406:	2301      	movs	r3, #1
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
 800340a:	e045      	b.n	8003498 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d12e      	bne.n	8003492 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003434:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003436:	2b00      	cmp	r3, #0
 8003438:	da2b      	bge.n	8003492 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003446:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800344a:	429a      	cmp	r2, r3
 800344c:	d121      	bne.n	8003492 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003452:	4613      	mov	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003460:	2201      	movs	r2, #1
 8003462:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10a      	bne.n	8003492 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	69fa      	ldr	r2, [r7, #28]
 8003486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800348a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800348e:	6053      	str	r3, [r2, #4]
            break;
 8003490:	e007      	b.n	80034a2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	3301      	adds	r3, #1
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349e:	429a      	cmp	r2, r3
 80034a0:	d3b4      	bcc.n	800340c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80034b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f004 f956 	bl	8007768 <USB_ReadInterrupts>
 80034bc:	4603      	mov	r3, r0
 80034be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80034c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c6:	d10a      	bne.n	80034de <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f006 fd9b 	bl	800a004 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80034dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f004 f940 	bl	8007768 <USB_ReadInterrupts>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d115      	bne.n	800351e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f006 fd8b 	bl	800a020 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6859      	ldr	r1, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	e000      	b.n	800351e <HAL_PCD_IRQHandler+0x938>
      return;
 800351c:	bf00      	nop
    }
  }
}
 800351e:	3734      	adds	r7, #52	; 0x34
 8003520:	46bd      	mov	sp, r7
 8003522:	bd90      	pop	{r4, r7, pc}

08003524 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_PCD_SetAddress+0x1a>
 800353a:	2302      	movs	r3, #2
 800353c:	e013      	b.n	8003566 <HAL_PCD_SetAddress+0x42>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	4611      	mov	r1, r2
 8003556:	4618      	mov	r0, r3
 8003558:	f004 f89e 	bl	8007698 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	4608      	mov	r0, r1
 8003578:	4611      	mov	r1, r2
 800357a:	461a      	mov	r2, r3
 800357c:	4603      	mov	r3, r0
 800357e:	70fb      	strb	r3, [r7, #3]
 8003580:	460b      	mov	r3, r1
 8003582:	803b      	strh	r3, [r7, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800358c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003590:	2b00      	cmp	r3, #0
 8003592:	da0f      	bge.n	80035b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	f003 020f 	and.w	r2, r3, #15
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	3338      	adds	r3, #56	; 0x38
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	4413      	add	r3, r2
 80035a8:	3304      	adds	r3, #4
 80035aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	705a      	strb	r2, [r3, #1]
 80035b2:	e00f      	b.n	80035d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	f003 020f 	and.w	r2, r3, #15
 80035ba:	4613      	mov	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	4413      	add	r3, r2
 80035ca:	3304      	adds	r3, #4
 80035cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80035e0:	883a      	ldrh	r2, [r7, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	78ba      	ldrb	r2, [r7, #2]
 80035ea:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	785b      	ldrb	r3, [r3, #1]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d004      	beq.n	80035fe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035fe:	78bb      	ldrb	r3, [r7, #2]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d102      	bne.n	800360a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_PCD_EP_Open+0xaa>
 8003614:	2302      	movs	r3, #2
 8003616:	e00e      	b.n	8003636 <HAL_PCD_EP_Open+0xc8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68f9      	ldr	r1, [r7, #12]
 8003626:	4618      	mov	r0, r3
 8003628:	f003 f91e 	bl	8006868 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003634:	7afb      	ldrb	r3, [r7, #11]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	460b      	mov	r3, r1
 8003648:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800364a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800364e:	2b00      	cmp	r3, #0
 8003650:	da0f      	bge.n	8003672 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003652:	78fb      	ldrb	r3, [r7, #3]
 8003654:	f003 020f 	and.w	r2, r3, #15
 8003658:	4613      	mov	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	3338      	adds	r3, #56	; 0x38
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	4413      	add	r3, r2
 8003666:	3304      	adds	r3, #4
 8003668:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	705a      	strb	r2, [r3, #1]
 8003670:	e00f      	b.n	8003692 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	f003 020f 	and.w	r2, r3, #15
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	4413      	add	r3, r2
 8003688:	3304      	adds	r3, #4
 800368a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	b2da      	uxtb	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_PCD_EP_Close+0x6e>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e00e      	b.n	80036ca <HAL_PCD_EP_Close+0x8c>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68f9      	ldr	r1, [r7, #12]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f003 f95c 	bl	8006978 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b086      	sub	sp, #24
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	460b      	mov	r3, r1
 80036e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036e2:	7afb      	ldrb	r3, [r7, #11]
 80036e4:	f003 020f 	and.w	r2, r3, #15
 80036e8:	4613      	mov	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4413      	add	r3, r2
 80036f8:	3304      	adds	r3, #4
 80036fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2200      	movs	r2, #0
 800370c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2200      	movs	r2, #0
 8003712:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003714:	7afb      	ldrb	r3, [r7, #11]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	b2da      	uxtb	r2, r3
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d102      	bne.n	800372e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800372e:	7afb      	ldrb	r3, [r7, #11]
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	2b00      	cmp	r3, #0
 8003736:	d109      	bne.n	800374c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	461a      	mov	r2, r3
 8003744:	6979      	ldr	r1, [r7, #20]
 8003746:	f003 fc3b 	bl	8006fc0 <USB_EP0StartXfer>
 800374a:	e008      	b.n	800375e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	6979      	ldr	r1, [r7, #20]
 800375a:	f003 f9e9 	bl	8006b30 <USB_EPStartXfer>
  }

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	f003 020f 	and.w	r2, r3, #15
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800378a:	681b      	ldr	r3, [r3, #0]
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	607a      	str	r2, [r7, #4]
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	460b      	mov	r3, r1
 80037a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037a8:	7afb      	ldrb	r3, [r7, #11]
 80037aa:	f003 020f 	and.w	r2, r3, #15
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	3338      	adds	r3, #56	; 0x38
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4413      	add	r3, r2
 80037bc:	3304      	adds	r3, #4
 80037be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2200      	movs	r2, #0
 80037d0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2201      	movs	r2, #1
 80037d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037d8:	7afb      	ldrb	r3, [r7, #11]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d102      	bne.n	80037f2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037f2:	7afb      	ldrb	r3, [r7, #11]
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d109      	bne.n	8003810 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	6979      	ldr	r1, [r7, #20]
 800380a:	f003 fbd9 	bl	8006fc0 <USB_EP0StartXfer>
 800380e:	e008      	b.n	8003822 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6818      	ldr	r0, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	6979      	ldr	r1, [r7, #20]
 800381e:	f003 f987 	bl	8006b30 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003838:	78fb      	ldrb	r3, [r7, #3]
 800383a:	f003 020f 	and.w	r2, r3, #15
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	429a      	cmp	r2, r3
 8003844:	d901      	bls.n	800384a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e050      	b.n	80038ec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800384a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800384e:	2b00      	cmp	r3, #0
 8003850:	da0f      	bge.n	8003872 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	f003 020f 	and.w	r2, r3, #15
 8003858:	4613      	mov	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	3338      	adds	r3, #56	; 0x38
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	4413      	add	r3, r2
 8003866:	3304      	adds	r3, #4
 8003868:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	705a      	strb	r2, [r3, #1]
 8003870:	e00d      	b.n	800388e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	4413      	add	r3, r2
 8003884:	3304      	adds	r3, #4
 8003886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2201      	movs	r2, #1
 8003892:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	b2da      	uxtb	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_PCD_EP_SetStall+0x82>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e01e      	b.n	80038ec <HAL_PCD_EP_SetStall+0xc0>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68f9      	ldr	r1, [r7, #12]
 80038bc:	4618      	mov	r0, r3
 80038be:	f003 fe17 	bl	80074f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10a      	bne.n	80038e2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	b2d9      	uxtb	r1, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038dc:	461a      	mov	r2, r3
 80038de:	f004 f807 	bl	80078f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	f003 020f 	and.w	r2, r3, #15
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	429a      	cmp	r2, r3
 800390c:	d901      	bls.n	8003912 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e042      	b.n	8003998 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003916:	2b00      	cmp	r3, #0
 8003918:	da0f      	bge.n	800393a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800391a:	78fb      	ldrb	r3, [r7, #3]
 800391c:	f003 020f 	and.w	r2, r3, #15
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	3338      	adds	r3, #56	; 0x38
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4413      	add	r3, r2
 800392e:	3304      	adds	r3, #4
 8003930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	705a      	strb	r2, [r3, #1]
 8003938:	e00f      	b.n	800395a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	f003 020f 	and.w	r2, r3, #15
 8003940:	4613      	mov	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	4413      	add	r3, r2
 8003950:	3304      	adds	r3, #4
 8003952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	b2da      	uxtb	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_PCD_EP_ClrStall+0x86>
 8003976:	2302      	movs	r3, #2
 8003978:	e00e      	b.n	8003998 <HAL_PCD_EP_ClrStall+0xa4>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68f9      	ldr	r1, [r7, #12]
 8003988:	4618      	mov	r0, r3
 800398a:	f003 fe1f 	bl	80075cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80039ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	da0c      	bge.n	80039ce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	f003 020f 	and.w	r2, r3, #15
 80039ba:	4613      	mov	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	3338      	adds	r3, #56	; 0x38
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	4413      	add	r3, r2
 80039c8:	3304      	adds	r3, #4
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	e00c      	b.n	80039e8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	f003 020f 	and.w	r2, r3, #15
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	4413      	add	r3, r2
 80039e4:	3304      	adds	r3, #4
 80039e6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68f9      	ldr	r1, [r7, #12]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f003 fc3e 	bl	8007270 <USB_EPStopXfer>
 80039f4:	4603      	mov	r3, r0
 80039f6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80039f8:	7afb      	ldrb	r3, [r7, #11]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b08a      	sub	sp, #40	; 0x28
 8003a06:	af02      	add	r7, sp, #8
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	3338      	adds	r3, #56	; 0x38
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	3304      	adds	r3, #4
 8003a28:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a1a      	ldr	r2, [r3, #32]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d901      	bls.n	8003a3a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e06c      	b.n	8003b14 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	69fa      	ldr	r2, [r7, #28]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d902      	bls.n	8003a56 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	3303      	adds	r3, #3
 8003a5a:	089b      	lsrs	r3, r3, #2
 8003a5c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a5e:	e02b      	b.n	8003ab8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	69fa      	ldr	r2, [r7, #28]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d902      	bls.n	8003a7c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	3303      	adds	r3, #3
 8003a80:	089b      	lsrs	r3, r3, #2
 8003a82:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6919      	ldr	r1, [r3, #16]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	4603      	mov	r3, r0
 8003a9a:	6978      	ldr	r0, [r7, #20]
 8003a9c:	f003 fc92 	bl	80073c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	441a      	add	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a1a      	ldr	r2, [r3, #32]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	441a      	add	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d809      	bhi.n	8003ae2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a1a      	ldr	r2, [r3, #32]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d203      	bcs.n	8003ae2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1be      	bne.n	8003a60 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d811      	bhi.n	8003b12 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	2201      	movs	r2, #1
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	43db      	mvns	r3, r3
 8003b08:	6939      	ldr	r1, [r7, #16]
 8003b0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b0e:	4013      	ands	r3, r2
 8003b10:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3720      	adds	r7, #32
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	333c      	adds	r3, #60	; 0x3c
 8003b34:	3304      	adds	r3, #4
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d17b      	bne.n	8003c4a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d015      	beq.n	8003b88 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	4a61      	ldr	r2, [pc, #388]	; (8003ce4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	f240 80b9 	bls.w	8003cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80b3 	beq.w	8003cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b84:	6093      	str	r3, [r2, #8]
 8003b86:	e0a7      	b.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	2320      	movs	r3, #32
 8003ba2:	6093      	str	r3, [r2, #8]
 8003ba4:	e098      	b.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f040 8093 	bne.w	8003cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	4a4b      	ldr	r2, [pc, #300]	; (8003ce4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d90f      	bls.n	8003bda <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00a      	beq.n	8003bda <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd6:	6093      	str	r3, [r2, #8]
 8003bd8:	e07e      	b.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	4413      	add	r3, r2
 8003bec:	3304      	adds	r3, #4
 8003bee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	69da      	ldr	r2, [r3, #28]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	0159      	lsls	r1, r3, #5
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	440b      	add	r3, r1
 8003bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c06:	1ad2      	subs	r2, r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d114      	bne.n	8003c3c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d109      	bne.n	8003c2e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c24:	461a      	mov	r2, r3
 8003c26:	2101      	movs	r1, #1
 8003c28:	f003 fe62 	bl	80078f0 <USB_EP0_OutStart>
 8003c2c:	e006      	b.n	8003c3c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	441a      	add	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	4619      	mov	r1, r3
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f006 f91a 	bl	8009e7c <HAL_PCD_DataOutStageCallback>
 8003c48:	e046      	b.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	4a26      	ldr	r2, [pc, #152]	; (8003ce8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d124      	bne.n	8003c9c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c68:	461a      	mov	r2, r3
 8003c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c6e:	6093      	str	r3, [r2, #8]
 8003c70:	e032      	b.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c88:	461a      	mov	r2, r3
 8003c8a:	2320      	movs	r3, #32
 8003c8c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	4619      	mov	r1, r3
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f006 f8f1 	bl	8009e7c <HAL_PCD_DataOutStageCallback>
 8003c9a:	e01d      	b.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d114      	bne.n	8003ccc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4413      	add	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d108      	bne.n	8003ccc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	f003 fe12 	bl	80078f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f006 f8d2 	bl	8009e7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3720      	adds	r7, #32
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	4f54300a 	.word	0x4f54300a
 8003ce8:	4f54310a 	.word	0x4f54310a

08003cec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	333c      	adds	r3, #60	; 0x3c
 8003d04:	3304      	adds	r3, #4
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4a15      	ldr	r2, [pc, #84]	; (8003d74 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d90e      	bls.n	8003d40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d009      	beq.n	8003d40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d38:	461a      	mov	r2, r3
 8003d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f006 f889 	bl	8009e58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d90c      	bls.n	8003d68 <PCD_EP_OutSetupPacket_int+0x7c>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d108      	bne.n	8003d68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d60:	461a      	mov	r2, r3
 8003d62:	2101      	movs	r1, #1
 8003d64:	f003 fdc4 	bl	80078f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	4f54300a 	.word	0x4f54300a

08003d78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	70fb      	strb	r3, [r7, #3]
 8003d84:	4613      	mov	r3, r2
 8003d86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d107      	bne.n	8003da6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d96:	883b      	ldrh	r3, [r7, #0]
 8003d98:	0419      	lsls	r1, r3, #16
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	629a      	str	r2, [r3, #40]	; 0x28
 8003da4:	e028      	b.n	8003df8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	0c1b      	lsrs	r3, r3, #16
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	4413      	add	r3, r2
 8003db2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003db4:	2300      	movs	r3, #0
 8003db6:	73fb      	strb	r3, [r7, #15]
 8003db8:	e00d      	b.n	8003dd6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	3340      	adds	r3, #64	; 0x40
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	0c1b      	lsrs	r3, r3, #16
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	4413      	add	r3, r2
 8003dce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	73fb      	strb	r3, [r7, #15]
 8003dd6:	7bfa      	ldrb	r2, [r7, #15]
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d3ec      	bcc.n	8003dba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003de0:	883b      	ldrh	r3, [r7, #0]
 8003de2:	0418      	lsls	r0, r3, #16
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6819      	ldr	r1, [r3, #0]
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	4302      	orrs	r2, r0
 8003df0:	3340      	adds	r3, #64	; 0x40
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	887a      	ldrh	r2, [r7, #2]
 8003e18:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e267      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d075      	beq.n	8003f4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e5e:	4b88      	ldr	r3, [pc, #544]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d00c      	beq.n	8003e84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e6a:	4b85      	ldr	r3, [pc, #532]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d112      	bne.n	8003e9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e76:	4b82      	ldr	r3, [pc, #520]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e82:	d10b      	bne.n	8003e9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e84:	4b7e      	ldr	r3, [pc, #504]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d05b      	beq.n	8003f48 <HAL_RCC_OscConfig+0x108>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d157      	bne.n	8003f48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e242      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea4:	d106      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x74>
 8003ea6:	4b76      	ldr	r3, [pc, #472]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a75      	ldr	r2, [pc, #468]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	e01d      	b.n	8003ef0 <HAL_RCC_OscConfig+0xb0>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x98>
 8003ebe:	4b70      	ldr	r3, [pc, #448]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a6f      	ldr	r2, [pc, #444]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	4b6d      	ldr	r3, [pc, #436]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a6c      	ldr	r2, [pc, #432]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e00b      	b.n	8003ef0 <HAL_RCC_OscConfig+0xb0>
 8003ed8:	4b69      	ldr	r3, [pc, #420]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a68      	ldr	r2, [pc, #416]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	4b66      	ldr	r3, [pc, #408]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a65      	ldr	r2, [pc, #404]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d013      	beq.n	8003f20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fe f9a8 	bl	800224c <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f00:	f7fe f9a4 	bl	800224c <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	; 0x64
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e207      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f12:	4b5b      	ldr	r3, [pc, #364]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0xc0>
 8003f1e:	e014      	b.n	8003f4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f20:	f7fe f994 	bl	800224c <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f28:	f7fe f990 	bl	800224c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	; 0x64
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e1f3      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3a:	4b51      	ldr	r3, [pc, #324]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0xe8>
 8003f46:	e000      	b.n	8003f4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d063      	beq.n	800401e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f56:	4b4a      	ldr	r3, [pc, #296]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00b      	beq.n	8003f7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f62:	4b47      	ldr	r3, [pc, #284]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d11c      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f6e:	4b44      	ldr	r3, [pc, #272]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d116      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7a:	4b41      	ldr	r3, [pc, #260]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <HAL_RCC_OscConfig+0x152>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d001      	beq.n	8003f92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e1c7      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f92:	4b3b      	ldr	r3, [pc, #236]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4937      	ldr	r1, [pc, #220]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fa6:	e03a      	b.n	800401e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d020      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fb0:	4b34      	ldr	r3, [pc, #208]	; (8004084 <HAL_RCC_OscConfig+0x244>)
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb6:	f7fe f949 	bl	800224c <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fbe:	f7fe f945 	bl	800224c <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e1a8      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd0:	4b2b      	ldr	r3, [pc, #172]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fdc:	4b28      	ldr	r3, [pc, #160]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4925      	ldr	r1, [pc, #148]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	600b      	str	r3, [r1, #0]
 8003ff0:	e015      	b.n	800401e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ff2:	4b24      	ldr	r3, [pc, #144]	; (8004084 <HAL_RCC_OscConfig+0x244>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fe f928 	bl	800224c <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004000:	f7fe f924 	bl	800224c <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e187      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004012:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d036      	beq.n	8004098 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d016      	beq.n	8004060 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004032:	4b15      	ldr	r3, [pc, #84]	; (8004088 <HAL_RCC_OscConfig+0x248>)
 8004034:	2201      	movs	r2, #1
 8004036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004038:	f7fe f908 	bl	800224c <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004040:	f7fe f904 	bl	800224c <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e167      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004052:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <HAL_RCC_OscConfig+0x240>)
 8004054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0x200>
 800405e:	e01b      	b.n	8004098 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <HAL_RCC_OscConfig+0x248>)
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004066:	f7fe f8f1 	bl	800224c <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800406c:	e00e      	b.n	800408c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800406e:	f7fe f8ed 	bl	800224c <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d907      	bls.n	800408c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e150      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
 8004080:	40023800 	.word	0x40023800
 8004084:	42470000 	.word	0x42470000
 8004088:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800408c:	4b88      	ldr	r3, [pc, #544]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 800408e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1ea      	bne.n	800406e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8097 	beq.w	80041d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040a6:	2300      	movs	r3, #0
 80040a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040aa:	4b81      	ldr	r3, [pc, #516]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10f      	bne.n	80040d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	4b7d      	ldr	r3, [pc, #500]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	4a7c      	ldr	r2, [pc, #496]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 80040c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c4:	6413      	str	r3, [r2, #64]	; 0x40
 80040c6:	4b7a      	ldr	r3, [pc, #488]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d2:	2301      	movs	r3, #1
 80040d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d6:	4b77      	ldr	r3, [pc, #476]	; (80042b4 <HAL_RCC_OscConfig+0x474>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d118      	bne.n	8004114 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040e2:	4b74      	ldr	r3, [pc, #464]	; (80042b4 <HAL_RCC_OscConfig+0x474>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a73      	ldr	r2, [pc, #460]	; (80042b4 <HAL_RCC_OscConfig+0x474>)
 80040e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ee:	f7fe f8ad 	bl	800224c <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f6:	f7fe f8a9 	bl	800224c <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e10c      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004108:	4b6a      	ldr	r3, [pc, #424]	; (80042b4 <HAL_RCC_OscConfig+0x474>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d106      	bne.n	800412a <HAL_RCC_OscConfig+0x2ea>
 800411c:	4b64      	ldr	r3, [pc, #400]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 800411e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004120:	4a63      	ldr	r2, [pc, #396]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	6713      	str	r3, [r2, #112]	; 0x70
 8004128:	e01c      	b.n	8004164 <HAL_RCC_OscConfig+0x324>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b05      	cmp	r3, #5
 8004130:	d10c      	bne.n	800414c <HAL_RCC_OscConfig+0x30c>
 8004132:	4b5f      	ldr	r3, [pc, #380]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004136:	4a5e      	ldr	r2, [pc, #376]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 8004138:	f043 0304 	orr.w	r3, r3, #4
 800413c:	6713      	str	r3, [r2, #112]	; 0x70
 800413e:	4b5c      	ldr	r3, [pc, #368]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 8004140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004142:	4a5b      	ldr	r2, [pc, #364]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 8004144:	f043 0301 	orr.w	r3, r3, #1
 8004148:	6713      	str	r3, [r2, #112]	; 0x70
 800414a:	e00b      	b.n	8004164 <HAL_RCC_OscConfig+0x324>
 800414c:	4b58      	ldr	r3, [pc, #352]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004150:	4a57      	ldr	r2, [pc, #348]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 8004152:	f023 0301 	bic.w	r3, r3, #1
 8004156:	6713      	str	r3, [r2, #112]	; 0x70
 8004158:	4b55      	ldr	r3, [pc, #340]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 800415a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415c:	4a54      	ldr	r2, [pc, #336]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 800415e:	f023 0304 	bic.w	r3, r3, #4
 8004162:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d015      	beq.n	8004198 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416c:	f7fe f86e 	bl	800224c <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004172:	e00a      	b.n	800418a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004174:	f7fe f86a 	bl	800224c <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004182:	4293      	cmp	r3, r2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e0cb      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418a:	4b49      	ldr	r3, [pc, #292]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0ee      	beq.n	8004174 <HAL_RCC_OscConfig+0x334>
 8004196:	e014      	b.n	80041c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004198:	f7fe f858 	bl	800224c <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800419e:	e00a      	b.n	80041b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041a0:	f7fe f854 	bl	800224c <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e0b5      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b6:	4b3e      	ldr	r3, [pc, #248]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 80041b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1ee      	bne.n	80041a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d105      	bne.n	80041d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c8:	4b39      	ldr	r3, [pc, #228]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	4a38      	ldr	r2, [pc, #224]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 80041ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80a1 	beq.w	8004320 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041de:	4b34      	ldr	r3, [pc, #208]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d05c      	beq.n	80042a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d141      	bne.n	8004276 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f2:	4b31      	ldr	r3, [pc, #196]	; (80042b8 <HAL_RCC_OscConfig+0x478>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f8:	f7fe f828 	bl	800224c <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004200:	f7fe f824 	bl	800224c <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e087      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004212:	4b27      	ldr	r3, [pc, #156]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69da      	ldr	r2, [r3, #28]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	019b      	lsls	r3, r3, #6
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	085b      	lsrs	r3, r3, #1
 8004236:	3b01      	subs	r3, #1
 8004238:	041b      	lsls	r3, r3, #16
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	061b      	lsls	r3, r3, #24
 8004242:	491b      	ldr	r1, [pc, #108]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 8004244:	4313      	orrs	r3, r2
 8004246:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004248:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <HAL_RCC_OscConfig+0x478>)
 800424a:	2201      	movs	r2, #1
 800424c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800424e:	f7fd fffd 	bl	800224c <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004256:	f7fd fff9 	bl	800224c <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e05c      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004268:	4b11      	ldr	r3, [pc, #68]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0f0      	beq.n	8004256 <HAL_RCC_OscConfig+0x416>
 8004274:	e054      	b.n	8004320 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004276:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <HAL_RCC_OscConfig+0x478>)
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fd ffe6 	bl	800224c <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004284:	f7fd ffe2 	bl	800224c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e045      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004296:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <HAL_RCC_OscConfig+0x470>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x444>
 80042a2:	e03d      	b.n	8004320 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d107      	bne.n	80042bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e038      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
 80042b0:	40023800 	.word	0x40023800
 80042b4:	40007000 	.word	0x40007000
 80042b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042bc:	4b1b      	ldr	r3, [pc, #108]	; (800432c <HAL_RCC_OscConfig+0x4ec>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d028      	beq.n	800431c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d121      	bne.n	800431c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d11a      	bne.n	800431c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042ec:	4013      	ands	r3, r2
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d111      	bne.n	800431c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	085b      	lsrs	r3, r3, #1
 8004304:	3b01      	subs	r3, #1
 8004306:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004308:	429a      	cmp	r2, r3
 800430a:	d107      	bne.n	800431c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004318:	429a      	cmp	r2, r3
 800431a:	d001      	beq.n	8004320 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40023800 	.word	0x40023800

08004330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e0cc      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004344:	4b68      	ldr	r3, [pc, #416]	; (80044e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d90c      	bls.n	800436c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004352:	4b65      	ldr	r3, [pc, #404]	; (80044e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800435a:	4b63      	ldr	r3, [pc, #396]	; (80044e8 <HAL_RCC_ClockConfig+0x1b8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d001      	beq.n	800436c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e0b8      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d020      	beq.n	80043ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004384:	4b59      	ldr	r3, [pc, #356]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	4a58      	ldr	r2, [pc, #352]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800438e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800439c:	4b53      	ldr	r3, [pc, #332]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	4a52      	ldr	r2, [pc, #328]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043a8:	4b50      	ldr	r3, [pc, #320]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	494d      	ldr	r1, [pc, #308]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d044      	beq.n	8004450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d107      	bne.n	80043de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ce:	4b47      	ldr	r3, [pc, #284]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d119      	bne.n	800440e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e07f      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d003      	beq.n	80043ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d107      	bne.n	80043fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ee:	4b3f      	ldr	r3, [pc, #252]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d109      	bne.n	800440e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e06f      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fe:	4b3b      	ldr	r3, [pc, #236]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e067      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800440e:	4b37      	ldr	r3, [pc, #220]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f023 0203 	bic.w	r2, r3, #3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	4934      	ldr	r1, [pc, #208]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	4313      	orrs	r3, r2
 800441e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004420:	f7fd ff14 	bl	800224c <HAL_GetTick>
 8004424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004426:	e00a      	b.n	800443e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004428:	f7fd ff10 	bl	800224c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f241 3288 	movw	r2, #5000	; 0x1388
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e04f      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443e:	4b2b      	ldr	r3, [pc, #172]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 020c 	and.w	r2, r3, #12
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	429a      	cmp	r2, r3
 800444e:	d1eb      	bne.n	8004428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004450:	4b25      	ldr	r3, [pc, #148]	; (80044e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d20c      	bcs.n	8004478 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800445e:	4b22      	ldr	r3, [pc, #136]	; (80044e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	4b20      	ldr	r3, [pc, #128]	; (80044e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e032      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d008      	beq.n	8004496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004484:	4b19      	ldr	r3, [pc, #100]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	4916      	ldr	r1, [pc, #88]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	4313      	orrs	r3, r2
 8004494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d009      	beq.n	80044b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044a2:	4b12      	ldr	r3, [pc, #72]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	490e      	ldr	r1, [pc, #56]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044b6:	f000 f821 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 80044ba:	4602      	mov	r2, r0
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	091b      	lsrs	r3, r3, #4
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	490a      	ldr	r1, [pc, #40]	; (80044f0 <HAL_RCC_ClockConfig+0x1c0>)
 80044c8:	5ccb      	ldrb	r3, [r1, r3]
 80044ca:	fa22 f303 	lsr.w	r3, r2, r3
 80044ce:	4a09      	ldr	r2, [pc, #36]	; (80044f4 <HAL_RCC_ClockConfig+0x1c4>)
 80044d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044d2:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <HAL_RCC_ClockConfig+0x1c8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fd fe74 	bl	80021c4 <HAL_InitTick>

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40023c00 	.word	0x40023c00
 80044ec:	40023800 	.word	0x40023800
 80044f0:	0800ad98 	.word	0x0800ad98
 80044f4:	20000028 	.word	0x20000028
 80044f8:	2000002c 	.word	0x2000002c

080044fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004500:	b094      	sub	sp, #80	; 0x50
 8004502:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	647b      	str	r3, [r7, #68]	; 0x44
 8004508:	2300      	movs	r3, #0
 800450a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800450c:	2300      	movs	r3, #0
 800450e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004514:	4b79      	ldr	r3, [pc, #484]	; (80046fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 030c 	and.w	r3, r3, #12
 800451c:	2b08      	cmp	r3, #8
 800451e:	d00d      	beq.n	800453c <HAL_RCC_GetSysClockFreq+0x40>
 8004520:	2b08      	cmp	r3, #8
 8004522:	f200 80e1 	bhi.w	80046e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <HAL_RCC_GetSysClockFreq+0x34>
 800452a:	2b04      	cmp	r3, #4
 800452c:	d003      	beq.n	8004536 <HAL_RCC_GetSysClockFreq+0x3a>
 800452e:	e0db      	b.n	80046e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004530:	4b73      	ldr	r3, [pc, #460]	; (8004700 <HAL_RCC_GetSysClockFreq+0x204>)
 8004532:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004534:	e0db      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004536:	4b72      	ldr	r3, [pc, #456]	; (8004700 <HAL_RCC_GetSysClockFreq+0x204>)
 8004538:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800453a:	e0d8      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800453c:	4b6f      	ldr	r3, [pc, #444]	; (80046fc <HAL_RCC_GetSysClockFreq+0x200>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004544:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004546:	4b6d      	ldr	r3, [pc, #436]	; (80046fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d063      	beq.n	800461a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004552:	4b6a      	ldr	r3, [pc, #424]	; (80046fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	099b      	lsrs	r3, r3, #6
 8004558:	2200      	movs	r2, #0
 800455a:	63bb      	str	r3, [r7, #56]	; 0x38
 800455c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004564:	633b      	str	r3, [r7, #48]	; 0x30
 8004566:	2300      	movs	r3, #0
 8004568:	637b      	str	r3, [r7, #52]	; 0x34
 800456a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800456e:	4622      	mov	r2, r4
 8004570:	462b      	mov	r3, r5
 8004572:	f04f 0000 	mov.w	r0, #0
 8004576:	f04f 0100 	mov.w	r1, #0
 800457a:	0159      	lsls	r1, r3, #5
 800457c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004580:	0150      	lsls	r0, r2, #5
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4621      	mov	r1, r4
 8004588:	1a51      	subs	r1, r2, r1
 800458a:	6139      	str	r1, [r7, #16]
 800458c:	4629      	mov	r1, r5
 800458e:	eb63 0301 	sbc.w	r3, r3, r1
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045a0:	4659      	mov	r1, fp
 80045a2:	018b      	lsls	r3, r1, #6
 80045a4:	4651      	mov	r1, sl
 80045a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045aa:	4651      	mov	r1, sl
 80045ac:	018a      	lsls	r2, r1, #6
 80045ae:	4651      	mov	r1, sl
 80045b0:	ebb2 0801 	subs.w	r8, r2, r1
 80045b4:	4659      	mov	r1, fp
 80045b6:	eb63 0901 	sbc.w	r9, r3, r1
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	f04f 0300 	mov.w	r3, #0
 80045c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045ce:	4690      	mov	r8, r2
 80045d0:	4699      	mov	r9, r3
 80045d2:	4623      	mov	r3, r4
 80045d4:	eb18 0303 	adds.w	r3, r8, r3
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	462b      	mov	r3, r5
 80045dc:	eb49 0303 	adc.w	r3, r9, r3
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	f04f 0200 	mov.w	r2, #0
 80045e6:	f04f 0300 	mov.w	r3, #0
 80045ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045ee:	4629      	mov	r1, r5
 80045f0:	028b      	lsls	r3, r1, #10
 80045f2:	4621      	mov	r1, r4
 80045f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045f8:	4621      	mov	r1, r4
 80045fa:	028a      	lsls	r2, r1, #10
 80045fc:	4610      	mov	r0, r2
 80045fe:	4619      	mov	r1, r3
 8004600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004602:	2200      	movs	r2, #0
 8004604:	62bb      	str	r3, [r7, #40]	; 0x28
 8004606:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004608:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800460c:	f7fb fff4 	bl	80005f8 <__aeabi_uldivmod>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4613      	mov	r3, r2
 8004616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004618:	e058      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800461a:	4b38      	ldr	r3, [pc, #224]	; (80046fc <HAL_RCC_GetSysClockFreq+0x200>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	099b      	lsrs	r3, r3, #6
 8004620:	2200      	movs	r2, #0
 8004622:	4618      	mov	r0, r3
 8004624:	4611      	mov	r1, r2
 8004626:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800462a:	623b      	str	r3, [r7, #32]
 800462c:	2300      	movs	r3, #0
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
 8004630:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004634:	4642      	mov	r2, r8
 8004636:	464b      	mov	r3, r9
 8004638:	f04f 0000 	mov.w	r0, #0
 800463c:	f04f 0100 	mov.w	r1, #0
 8004640:	0159      	lsls	r1, r3, #5
 8004642:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004646:	0150      	lsls	r0, r2, #5
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	4641      	mov	r1, r8
 800464e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004652:	4649      	mov	r1, r9
 8004654:	eb63 0b01 	sbc.w	fp, r3, r1
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004664:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004668:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800466c:	ebb2 040a 	subs.w	r4, r2, sl
 8004670:	eb63 050b 	sbc.w	r5, r3, fp
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	00eb      	lsls	r3, r5, #3
 800467e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004682:	00e2      	lsls	r2, r4, #3
 8004684:	4614      	mov	r4, r2
 8004686:	461d      	mov	r5, r3
 8004688:	4643      	mov	r3, r8
 800468a:	18e3      	adds	r3, r4, r3
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	464b      	mov	r3, r9
 8004690:	eb45 0303 	adc.w	r3, r5, r3
 8004694:	607b      	str	r3, [r7, #4]
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046a2:	4629      	mov	r1, r5
 80046a4:	028b      	lsls	r3, r1, #10
 80046a6:	4621      	mov	r1, r4
 80046a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046ac:	4621      	mov	r1, r4
 80046ae:	028a      	lsls	r2, r1, #10
 80046b0:	4610      	mov	r0, r2
 80046b2:	4619      	mov	r1, r3
 80046b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b6:	2200      	movs	r2, #0
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	61fa      	str	r2, [r7, #28]
 80046bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046c0:	f7fb ff9a 	bl	80005f8 <__aeabi_uldivmod>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4613      	mov	r3, r2
 80046ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <HAL_RCC_GetSysClockFreq+0x200>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	0c1b      	lsrs	r3, r3, #16
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	3301      	adds	r3, #1
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80046dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046e6:	e002      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <HAL_RCC_GetSysClockFreq+0x204>)
 80046ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3750      	adds	r7, #80	; 0x50
 80046f4:	46bd      	mov	sp, r7
 80046f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046fa:	bf00      	nop
 80046fc:	40023800 	.word	0x40023800
 8004700:	00f42400 	.word	0x00f42400

08004704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <HAL_RCC_GetHCLKFreq+0x14>)
 800470a:	681b      	ldr	r3, [r3, #0]
}
 800470c:	4618      	mov	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20000028 	.word	0x20000028

0800471c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e07b      	b.n	8004826 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	2b00      	cmp	r3, #0
 8004734:	d108      	bne.n	8004748 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800473e:	d009      	beq.n	8004754 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	61da      	str	r2, [r3, #28]
 8004746:	e005      	b.n	8004754 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fd fb80 	bl	8001e74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800478a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d8:	ea42 0103 	orr.w	r1, r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	f003 0104 	and.w	r1, r3, #4
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	f003 0210 	and.w	r2, r3, #16
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69da      	ldr	r2, [r3, #28]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004814:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b088      	sub	sp, #32
 8004832:	af00      	add	r7, sp, #0
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	4613      	mov	r3, r2
 800483c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_SPI_Transmit+0x22>
 800484c:	2302      	movs	r3, #2
 800484e:	e126      	b.n	8004a9e <HAL_SPI_Transmit+0x270>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004858:	f7fd fcf8 	bl	800224c <HAL_GetTick>
 800485c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b01      	cmp	r3, #1
 800486c:	d002      	beq.n	8004874 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800486e:	2302      	movs	r3, #2
 8004870:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004872:	e10b      	b.n	8004a8c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <HAL_SPI_Transmit+0x52>
 800487a:	88fb      	ldrh	r3, [r7, #6]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d102      	bne.n	8004886 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004884:	e102      	b.n	8004a8c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2203      	movs	r2, #3
 800488a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	88fa      	ldrh	r2, [r7, #6]
 800489e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	88fa      	ldrh	r2, [r7, #6]
 80048a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048cc:	d10f      	bne.n	80048ee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f8:	2b40      	cmp	r3, #64	; 0x40
 80048fa:	d007      	beq.n	800490c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800490a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004914:	d14b      	bne.n	80049ae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <HAL_SPI_Transmit+0xf6>
 800491e:	8afb      	ldrh	r3, [r7, #22]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d13e      	bne.n	80049a2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	881a      	ldrh	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004934:	1c9a      	adds	r2, r3, #2
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004948:	e02b      	b.n	80049a2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b02      	cmp	r3, #2
 8004956:	d112      	bne.n	800497e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	881a      	ldrh	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	1c9a      	adds	r2, r3, #2
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	86da      	strh	r2, [r3, #54]	; 0x36
 800497c:	e011      	b.n	80049a2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800497e:	f7fd fc65 	bl	800224c <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d803      	bhi.n	8004996 <HAL_SPI_Transmit+0x168>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004994:	d102      	bne.n	800499c <HAL_SPI_Transmit+0x16e>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d102      	bne.n	80049a2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049a0:	e074      	b.n	8004a8c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1ce      	bne.n	800494a <HAL_SPI_Transmit+0x11c>
 80049ac:	e04c      	b.n	8004a48 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_SPI_Transmit+0x18e>
 80049b6:	8afb      	ldrh	r3, [r7, #22]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d140      	bne.n	8004a3e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	330c      	adds	r3, #12
 80049c6:	7812      	ldrb	r2, [r2, #0]
 80049c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049e2:	e02c      	b.n	8004a3e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d113      	bne.n	8004a1a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	330c      	adds	r3, #12
 80049fc:	7812      	ldrb	r2, [r2, #0]
 80049fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a18:	e011      	b.n	8004a3e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a1a:	f7fd fc17 	bl	800224c <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d803      	bhi.n	8004a32 <HAL_SPI_Transmit+0x204>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a30:	d102      	bne.n	8004a38 <HAL_SPI_Transmit+0x20a>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d102      	bne.n	8004a3e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a3c:	e026      	b.n	8004a8c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1cd      	bne.n	80049e4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	6839      	ldr	r1, [r7, #0]
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 fccb 	bl	80053e8 <SPI_EndRxTxTransaction>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10a      	bne.n	8004a7c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a66:	2300      	movs	r3, #0
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e000      	b.n	8004a8c <HAL_SPI_Transmit+0x25e>
  }

error:
 8004a8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b08c      	sub	sp, #48	; 0x30
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_SPI_TransmitReceive+0x26>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e18a      	b.n	8004de2 <HAL_SPI_TransmitReceive+0x33c>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ad4:	f7fd fbba 	bl	800224c <HAL_GetTick>
 8004ad8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004aea:	887b      	ldrh	r3, [r7, #2]
 8004aec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004aee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d00f      	beq.n	8004b16 <HAL_SPI_TransmitReceive+0x70>
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004afc:	d107      	bne.n	8004b0e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d103      	bne.n	8004b0e <HAL_SPI_TransmitReceive+0x68>
 8004b06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d003      	beq.n	8004b16 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004b0e:	2302      	movs	r3, #2
 8004b10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b14:	e15b      	b.n	8004dce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_SPI_TransmitReceive+0x82>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <HAL_SPI_TransmitReceive+0x82>
 8004b22:	887b      	ldrh	r3, [r7, #2]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d103      	bne.n	8004b30 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b2e:	e14e      	b.n	8004dce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d003      	beq.n	8004b44 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2205      	movs	r2, #5
 8004b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	887a      	ldrh	r2, [r7, #2]
 8004b54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	887a      	ldrh	r2, [r7, #2]
 8004b5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	887a      	ldrh	r2, [r7, #2]
 8004b66:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	887a      	ldrh	r2, [r7, #2]
 8004b6c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	d007      	beq.n	8004b98 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba0:	d178      	bne.n	8004c94 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_SPI_TransmitReceive+0x10a>
 8004baa:	8b7b      	ldrh	r3, [r7, #26]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d166      	bne.n	8004c7e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	881a      	ldrh	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	1c9a      	adds	r2, r3, #2
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bd4:	e053      	b.n	8004c7e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d11b      	bne.n	8004c1c <HAL_SPI_TransmitReceive+0x176>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d016      	beq.n	8004c1c <HAL_SPI_TransmitReceive+0x176>
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d113      	bne.n	8004c1c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	881a      	ldrh	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	1c9a      	adds	r2, r3, #2
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d119      	bne.n	8004c5e <HAL_SPI_TransmitReceive+0x1b8>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d014      	beq.n	8004c5e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	b292      	uxth	r2, r2
 8004c40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	1c9a      	adds	r2, r3, #2
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c5e:	f7fd faf5 	bl	800224c <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d807      	bhi.n	8004c7e <HAL_SPI_TransmitReceive+0x1d8>
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d003      	beq.n	8004c7e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c7c:	e0a7      	b.n	8004dce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1a6      	bne.n	8004bd6 <HAL_SPI_TransmitReceive+0x130>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1a1      	bne.n	8004bd6 <HAL_SPI_TransmitReceive+0x130>
 8004c92:	e07c      	b.n	8004d8e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <HAL_SPI_TransmitReceive+0x1fc>
 8004c9c:	8b7b      	ldrh	r3, [r7, #26]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d16b      	bne.n	8004d7a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	330c      	adds	r3, #12
 8004cac:	7812      	ldrb	r2, [r2, #0]
 8004cae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cc8:	e057      	b.n	8004d7a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d11c      	bne.n	8004d12 <HAL_SPI_TransmitReceive+0x26c>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d017      	beq.n	8004d12 <HAL_SPI_TransmitReceive+0x26c>
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d114      	bne.n	8004d12 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	7812      	ldrb	r2, [r2, #0]
 8004cf4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d119      	bne.n	8004d54 <HAL_SPI_TransmitReceive+0x2ae>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d014      	beq.n	8004d54 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d50:	2301      	movs	r3, #1
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d54:	f7fd fa7a 	bl	800224c <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d803      	bhi.n	8004d6c <HAL_SPI_TransmitReceive+0x2c6>
 8004d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6a:	d102      	bne.n	8004d72 <HAL_SPI_TransmitReceive+0x2cc>
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d103      	bne.n	8004d7a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d78:	e029      	b.n	8004dce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1a2      	bne.n	8004cca <HAL_SPI_TransmitReceive+0x224>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d19d      	bne.n	8004cca <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 fb28 	bl	80053e8 <SPI_EndRxTxTransaction>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d006      	beq.n	8004dac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004daa:	e010      	b.n	8004dce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10b      	bne.n	8004dcc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	e000      	b.n	8004dce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004dcc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004dde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3730      	adds	r7, #48	; 0x30
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_SPI_TransmitReceive_DMA+0x20>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e0e3      	b.n	8004fd4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e1a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004e22:	7dbb      	ldrb	r3, [r7, #22]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d00d      	beq.n	8004e44 <HAL_SPI_TransmitReceive_DMA+0x58>
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e2e:	d106      	bne.n	8004e3e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d102      	bne.n	8004e3e <HAL_SPI_TransmitReceive_DMA+0x52>
 8004e38:	7dbb      	ldrb	r3, [r7, #22]
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d002      	beq.n	8004e44 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004e3e:	2302      	movs	r3, #2
 8004e40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e42:	e0c2      	b.n	8004fca <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004e50:	887b      	ldrh	r3, [r7, #2]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d102      	bne.n	8004e5c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e5a:	e0b6      	b.n	8004fca <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d003      	beq.n	8004e70 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2205      	movs	r2, #5
 8004e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	887a      	ldrh	r2, [r7, #2]
 8004e80:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	887a      	ldrh	r2, [r7, #2]
 8004e86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	887a      	ldrh	r2, [r7, #2]
 8004e92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	887a      	ldrh	r2, [r7, #2]
 8004e98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d108      	bne.n	8004ec4 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb6:	4a49      	ldr	r2, [pc, #292]	; (8004fdc <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8004eb8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ebe:	4a48      	ldr	r2, [pc, #288]	; (8004fe0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004ec0:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ec2:	e007      	b.n	8004ed4 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec8:	4a46      	ldr	r2, [pc, #280]	; (8004fe4 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8004eca:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed0:	4a45      	ldr	r2, [pc, #276]	; (8004fe8 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8004ed2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed8:	4a44      	ldr	r2, [pc, #272]	; (8004fec <HAL_SPI_TransmitReceive_DMA+0x200>)
 8004eda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	330c      	adds	r3, #12
 8004eee:	4619      	mov	r1, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004efa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004efc:	f7fd fae7 	bl	80024ce <HAL_DMA_Start_IT>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00c      	beq.n	8004f20 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0a:	f043 0210 	orr.w	r2, r3, #16
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004f1e:	e054      	b.n	8004fca <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f34:	2200      	movs	r2, #0
 8004f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f44:	2200      	movs	r2, #0
 8004f46:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	4619      	mov	r1, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	330c      	adds	r3, #12
 8004f60:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f66:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004f68:	f7fd fab1 	bl	80024ce <HAL_DMA_Start_IT>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00c      	beq.n	8004f8c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f76:	f043 0210 	orr.w	r2, r3, #16
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004f8a:	e01e      	b.n	8004fca <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f96:	2b40      	cmp	r3, #64	; 0x40
 8004f98:	d007      	beq.n	8004faa <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fa8:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f042 0220 	orr.w	r2, r2, #32
 8004fb8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0202 	orr.w	r2, r2, #2
 8004fc8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	08005195 	.word	0x08005195
 8004fe0:	0800505d 	.word	0x0800505d
 8004fe4:	080051b1 	.word	0x080051b1
 8004fe8:	08005105 	.word	0x08005105
 8004fec:	080051cd 	.word	0x080051cd

08004ff0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800504e:	b2db      	uxtb	r3, r3
}
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800506a:	f7fd f8ef 	bl	800224c <HAL_GetTick>
 800506e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800507e:	d03b      	beq.n	80050f8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0220 	bic.w	r2, r2, #32
 800508e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10d      	bne.n	80050b4 <SPI_DMAReceiveCplt+0x58>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050a0:	d108      	bne.n	80050b4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0203 	bic.w	r2, r2, #3
 80050b0:	605a      	str	r2, [r3, #4]
 80050b2:	e007      	b.n	80050c4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0201 	bic.w	r2, r2, #1
 80050c2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	2164      	movs	r1, #100	; 0x64
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f927 	bl	800531c <SPI_EndRxTransaction>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f7ff ff9b 	bl	800502c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80050f6:	e002      	b.n	80050fe <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f7ff ff79 	bl	8004ff0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005112:	f7fd f89b 	bl	800224c <HAL_GetTick>
 8005116:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005126:	d02f      	beq.n	8005188 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0220 	bic.w	r2, r2, #32
 8005136:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	2164      	movs	r1, #100	; 0x64
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 f953 	bl	80053e8 <SPI_EndRxTxTransaction>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514c:	f043 0220 	orr.w	r2, r3, #32
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0203 	bic.w	r2, r2, #3
 8005162:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7ff ff53 	bl	800502c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005186:	e002      	b.n	800518e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f7fc f9f7 	bl	800157c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f7ff ff2e 	bl	8005004 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80051a8:	bf00      	nop
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f7ff ff2a 	bl	8005018 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80051c4:	bf00      	nop
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0203 	bic.w	r2, r2, #3
 80051e8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ee:	f043 0210 	orr.w	r2, r3, #16
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f7ff ff14 	bl	800502c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	4613      	mov	r3, r2
 800521a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800521c:	f7fd f816 	bl	800224c <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	4413      	add	r3, r2
 800522a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800522c:	f7fd f80e 	bl	800224c <HAL_GetTick>
 8005230:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005232:	4b39      	ldr	r3, [pc, #228]	; (8005318 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	015b      	lsls	r3, r3, #5
 8005238:	0d1b      	lsrs	r3, r3, #20
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	fb02 f303 	mul.w	r3, r2, r3
 8005240:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005242:	e054      	b.n	80052ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524a:	d050      	beq.n	80052ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800524c:	f7fc fffe 	bl	800224c <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	429a      	cmp	r2, r3
 800525a:	d902      	bls.n	8005262 <SPI_WaitFlagStateUntilTimeout+0x56>
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d13d      	bne.n	80052de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005270:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800527a:	d111      	bne.n	80052a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005284:	d004      	beq.n	8005290 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800528e:	d107      	bne.n	80052a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800529e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a8:	d10f      	bne.n	80052ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e017      	b.n	800530e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4013      	ands	r3, r2
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	bf0c      	ite	eq
 80052fe:	2301      	moveq	r3, #1
 8005300:	2300      	movne	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	461a      	mov	r2, r3
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	429a      	cmp	r2, r3
 800530a:	d19b      	bne.n	8005244 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3720      	adds	r7, #32
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	20000028 	.word	0x20000028

0800531c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005330:	d111      	bne.n	8005356 <SPI_EndRxTransaction+0x3a>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800533a:	d004      	beq.n	8005346 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005344:	d107      	bne.n	8005356 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005354:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800535e:	d12a      	bne.n	80053b6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005368:	d012      	beq.n	8005390 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2200      	movs	r2, #0
 8005372:	2180      	movs	r1, #128	; 0x80
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f7ff ff49 	bl	800520c <SPI_WaitFlagStateUntilTimeout>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d02d      	beq.n	80053dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005384:	f043 0220 	orr.w	r2, r3, #32
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e026      	b.n	80053de <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2200      	movs	r2, #0
 8005398:	2101      	movs	r1, #1
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f7ff ff36 	bl	800520c <SPI_WaitFlagStateUntilTimeout>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d01a      	beq.n	80053dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053aa:	f043 0220 	orr.w	r2, r3, #32
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e013      	b.n	80053de <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2200      	movs	r2, #0
 80053be:	2101      	movs	r1, #1
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f7ff ff23 	bl	800520c <SPI_WaitFlagStateUntilTimeout>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d007      	beq.n	80053dc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d0:	f043 0220 	orr.w	r2, r3, #32
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e000      	b.n	80053de <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053f4:	4b1b      	ldr	r3, [pc, #108]	; (8005464 <SPI_EndRxTxTransaction+0x7c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a1b      	ldr	r2, [pc, #108]	; (8005468 <SPI_EndRxTxTransaction+0x80>)
 80053fa:	fba2 2303 	umull	r2, r3, r2, r3
 80053fe:	0d5b      	lsrs	r3, r3, #21
 8005400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005404:	fb02 f303 	mul.w	r3, r2, r3
 8005408:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005412:	d112      	bne.n	800543a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2200      	movs	r2, #0
 800541c:	2180      	movs	r1, #128	; 0x80
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f7ff fef4 	bl	800520c <SPI_WaitFlagStateUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d016      	beq.n	8005458 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542e:	f043 0220 	orr.w	r2, r3, #32
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e00f      	b.n	800545a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	3b01      	subs	r3, #1
 8005444:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005450:	2b80      	cmp	r3, #128	; 0x80
 8005452:	d0f2      	beq.n	800543a <SPI_EndRxTxTransaction+0x52>
 8005454:	e000      	b.n	8005458 <SPI_EndRxTxTransaction+0x70>
        break;
 8005456:	bf00      	nop
  }

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000028 	.word	0x20000028
 8005468:	165e9f81 	.word	0x165e9f81

0800546c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e041      	b.n	8005502 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fc fd36 	bl	8001f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3304      	adds	r3, #4
 80054a8:	4619      	mov	r1, r3
 80054aa:	4610      	mov	r0, r2
 80054ac:	f000 fad8 	bl	8005a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e041      	b.n	80055a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d106      	bne.n	8005536 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f839 	bl	80055a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2202      	movs	r2, #2
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3304      	adds	r3, #4
 8005546:	4619      	mov	r1, r3
 8005548:	4610      	mov	r0, r2
 800554a:	f000 fa89 	bl	8005a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d109      	bne.n	80055e0 <HAL_TIM_PWM_Start+0x24>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	bf14      	ite	ne
 80055d8:	2301      	movne	r3, #1
 80055da:	2300      	moveq	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	e022      	b.n	8005626 <HAL_TIM_PWM_Start+0x6a>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d109      	bne.n	80055fa <HAL_TIM_PWM_Start+0x3e>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	bf14      	ite	ne
 80055f2:	2301      	movne	r3, #1
 80055f4:	2300      	moveq	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	e015      	b.n	8005626 <HAL_TIM_PWM_Start+0x6a>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d109      	bne.n	8005614 <HAL_TIM_PWM_Start+0x58>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b01      	cmp	r3, #1
 800560a:	bf14      	ite	ne
 800560c:	2301      	movne	r3, #1
 800560e:	2300      	moveq	r3, #0
 8005610:	b2db      	uxtb	r3, r3
 8005612:	e008      	b.n	8005626 <HAL_TIM_PWM_Start+0x6a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b01      	cmp	r3, #1
 800561e:	bf14      	ite	ne
 8005620:	2301      	movne	r3, #1
 8005622:	2300      	moveq	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e07c      	b.n	8005728 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d104      	bne.n	800563e <HAL_TIM_PWM_Start+0x82>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800563c:	e013      	b.n	8005666 <HAL_TIM_PWM_Start+0xaa>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b04      	cmp	r3, #4
 8005642:	d104      	bne.n	800564e <HAL_TIM_PWM_Start+0x92>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800564c:	e00b      	b.n	8005666 <HAL_TIM_PWM_Start+0xaa>
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b08      	cmp	r3, #8
 8005652:	d104      	bne.n	800565e <HAL_TIM_PWM_Start+0xa2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800565c:	e003      	b.n	8005666 <HAL_TIM_PWM_Start+0xaa>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2202      	movs	r2, #2
 8005662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2201      	movs	r2, #1
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fce0 	bl	8006034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a2d      	ldr	r2, [pc, #180]	; (8005730 <HAL_TIM_PWM_Start+0x174>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d004      	beq.n	8005688 <HAL_TIM_PWM_Start+0xcc>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a2c      	ldr	r2, [pc, #176]	; (8005734 <HAL_TIM_PWM_Start+0x178>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d101      	bne.n	800568c <HAL_TIM_PWM_Start+0xd0>
 8005688:	2301      	movs	r3, #1
 800568a:	e000      	b.n	800568e <HAL_TIM_PWM_Start+0xd2>
 800568c:	2300      	movs	r3, #0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d007      	beq.n	80056a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a22      	ldr	r2, [pc, #136]	; (8005730 <HAL_TIM_PWM_Start+0x174>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d022      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x136>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b4:	d01d      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x136>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1f      	ldr	r2, [pc, #124]	; (8005738 <HAL_TIM_PWM_Start+0x17c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d018      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x136>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a1d      	ldr	r2, [pc, #116]	; (800573c <HAL_TIM_PWM_Start+0x180>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d013      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x136>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a1c      	ldr	r2, [pc, #112]	; (8005740 <HAL_TIM_PWM_Start+0x184>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00e      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x136>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a16      	ldr	r2, [pc, #88]	; (8005734 <HAL_TIM_PWM_Start+0x178>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d009      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x136>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a18      	ldr	r2, [pc, #96]	; (8005744 <HAL_TIM_PWM_Start+0x188>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d004      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x136>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a16      	ldr	r2, [pc, #88]	; (8005748 <HAL_TIM_PWM_Start+0x18c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d111      	bne.n	8005716 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b06      	cmp	r3, #6
 8005702:	d010      	beq.n	8005726 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005714:	e007      	b.n	8005726 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0201 	orr.w	r2, r2, #1
 8005724:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40010000 	.word	0x40010000
 8005734:	40010400 	.word	0x40010400
 8005738:	40000400 	.word	0x40000400
 800573c:	40000800 	.word	0x40000800
 8005740:	40000c00 	.word	0x40000c00
 8005744:	40014000 	.word	0x40014000
 8005748:	40001800 	.word	0x40001800

0800574c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005762:	2b01      	cmp	r3, #1
 8005764:	d101      	bne.n	800576a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005766:	2302      	movs	r3, #2
 8005768:	e0ae      	b.n	80058c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b0c      	cmp	r3, #12
 8005776:	f200 809f 	bhi.w	80058b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800577a:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800577c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005780:	080057b5 	.word	0x080057b5
 8005784:	080058b9 	.word	0x080058b9
 8005788:	080058b9 	.word	0x080058b9
 800578c:	080058b9 	.word	0x080058b9
 8005790:	080057f5 	.word	0x080057f5
 8005794:	080058b9 	.word	0x080058b9
 8005798:	080058b9 	.word	0x080058b9
 800579c:	080058b9 	.word	0x080058b9
 80057a0:	08005837 	.word	0x08005837
 80057a4:	080058b9 	.word	0x080058b9
 80057a8:	080058b9 	.word	0x080058b9
 80057ac:	080058b9 	.word	0x080058b9
 80057b0:	08005877 	.word	0x08005877
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68b9      	ldr	r1, [r7, #8]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 f9f0 	bl	8005ba0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0208 	orr.w	r2, r2, #8
 80057ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699a      	ldr	r2, [r3, #24]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0204 	bic.w	r2, r2, #4
 80057de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6999      	ldr	r1, [r3, #24]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	691a      	ldr	r2, [r3, #16]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	619a      	str	r2, [r3, #24]
      break;
 80057f2:	e064      	b.n	80058be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68b9      	ldr	r1, [r7, #8]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 fa40 	bl	8005c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800580e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699a      	ldr	r2, [r3, #24]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800581e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6999      	ldr	r1, [r3, #24]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	021a      	lsls	r2, r3, #8
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	619a      	str	r2, [r3, #24]
      break;
 8005834:	e043      	b.n	80058be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fa95 	bl	8005d6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69da      	ldr	r2, [r3, #28]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f042 0208 	orr.w	r2, r2, #8
 8005850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69da      	ldr	r2, [r3, #28]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0204 	bic.w	r2, r2, #4
 8005860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69d9      	ldr	r1, [r3, #28]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	61da      	str	r2, [r3, #28]
      break;
 8005874:	e023      	b.n	80058be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fae9 	bl	8005e54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69da      	ldr	r2, [r3, #28]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69da      	ldr	r2, [r3, #28]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69d9      	ldr	r1, [r3, #28]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	021a      	lsls	r2, r3, #8
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	61da      	str	r2, [r3, #28]
      break;
 80058b6:	e002      	b.n	80058be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	75fb      	strb	r3, [r7, #23]
      break;
 80058bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_TIM_ConfigClockSource+0x1c>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e0b4      	b.n	8005a56 <HAL_TIM_ConfigClockSource+0x186>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800590a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005912:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005924:	d03e      	beq.n	80059a4 <HAL_TIM_ConfigClockSource+0xd4>
 8005926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800592a:	f200 8087 	bhi.w	8005a3c <HAL_TIM_ConfigClockSource+0x16c>
 800592e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005932:	f000 8086 	beq.w	8005a42 <HAL_TIM_ConfigClockSource+0x172>
 8005936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800593a:	d87f      	bhi.n	8005a3c <HAL_TIM_ConfigClockSource+0x16c>
 800593c:	2b70      	cmp	r3, #112	; 0x70
 800593e:	d01a      	beq.n	8005976 <HAL_TIM_ConfigClockSource+0xa6>
 8005940:	2b70      	cmp	r3, #112	; 0x70
 8005942:	d87b      	bhi.n	8005a3c <HAL_TIM_ConfigClockSource+0x16c>
 8005944:	2b60      	cmp	r3, #96	; 0x60
 8005946:	d050      	beq.n	80059ea <HAL_TIM_ConfigClockSource+0x11a>
 8005948:	2b60      	cmp	r3, #96	; 0x60
 800594a:	d877      	bhi.n	8005a3c <HAL_TIM_ConfigClockSource+0x16c>
 800594c:	2b50      	cmp	r3, #80	; 0x50
 800594e:	d03c      	beq.n	80059ca <HAL_TIM_ConfigClockSource+0xfa>
 8005950:	2b50      	cmp	r3, #80	; 0x50
 8005952:	d873      	bhi.n	8005a3c <HAL_TIM_ConfigClockSource+0x16c>
 8005954:	2b40      	cmp	r3, #64	; 0x40
 8005956:	d058      	beq.n	8005a0a <HAL_TIM_ConfigClockSource+0x13a>
 8005958:	2b40      	cmp	r3, #64	; 0x40
 800595a:	d86f      	bhi.n	8005a3c <HAL_TIM_ConfigClockSource+0x16c>
 800595c:	2b30      	cmp	r3, #48	; 0x30
 800595e:	d064      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0x15a>
 8005960:	2b30      	cmp	r3, #48	; 0x30
 8005962:	d86b      	bhi.n	8005a3c <HAL_TIM_ConfigClockSource+0x16c>
 8005964:	2b20      	cmp	r3, #32
 8005966:	d060      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0x15a>
 8005968:	2b20      	cmp	r3, #32
 800596a:	d867      	bhi.n	8005a3c <HAL_TIM_ConfigClockSource+0x16c>
 800596c:	2b00      	cmp	r3, #0
 800596e:	d05c      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0x15a>
 8005970:	2b10      	cmp	r3, #16
 8005972:	d05a      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0x15a>
 8005974:	e062      	b.n	8005a3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	6899      	ldr	r1, [r3, #8]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f000 fb35 	bl	8005ff4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005998:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	609a      	str	r2, [r3, #8]
      break;
 80059a2:	e04f      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6818      	ldr	r0, [r3, #0]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	6899      	ldr	r1, [r3, #8]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f000 fb1e 	bl	8005ff4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059c6:	609a      	str	r2, [r3, #8]
      break;
 80059c8:	e03c      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6818      	ldr	r0, [r3, #0]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	6859      	ldr	r1, [r3, #4]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	461a      	mov	r2, r3
 80059d8:	f000 fa92 	bl	8005f00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2150      	movs	r1, #80	; 0x50
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 faeb 	bl	8005fbe <TIM_ITRx_SetConfig>
      break;
 80059e8:	e02c      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6818      	ldr	r0, [r3, #0]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	6859      	ldr	r1, [r3, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	461a      	mov	r2, r3
 80059f8:	f000 fab1 	bl	8005f5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2160      	movs	r1, #96	; 0x60
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 fadb 	bl	8005fbe <TIM_ITRx_SetConfig>
      break;
 8005a08:	e01c      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	6859      	ldr	r1, [r3, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	461a      	mov	r2, r3
 8005a18:	f000 fa72 	bl	8005f00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2140      	movs	r1, #64	; 0x40
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 facb 	bl	8005fbe <TIM_ITRx_SetConfig>
      break;
 8005a28:	e00c      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4619      	mov	r1, r3
 8005a34:	4610      	mov	r0, r2
 8005a36:	f000 fac2 	bl	8005fbe <TIM_ITRx_SetConfig>
      break;
 8005a3a:	e003      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a40:	e000      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a40      	ldr	r2, [pc, #256]	; (8005b74 <TIM_Base_SetConfig+0x114>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d013      	beq.n	8005aa0 <TIM_Base_SetConfig+0x40>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7e:	d00f      	beq.n	8005aa0 <TIM_Base_SetConfig+0x40>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a3d      	ldr	r2, [pc, #244]	; (8005b78 <TIM_Base_SetConfig+0x118>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00b      	beq.n	8005aa0 <TIM_Base_SetConfig+0x40>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a3c      	ldr	r2, [pc, #240]	; (8005b7c <TIM_Base_SetConfig+0x11c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d007      	beq.n	8005aa0 <TIM_Base_SetConfig+0x40>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a3b      	ldr	r2, [pc, #236]	; (8005b80 <TIM_Base_SetConfig+0x120>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d003      	beq.n	8005aa0 <TIM_Base_SetConfig+0x40>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a3a      	ldr	r2, [pc, #232]	; (8005b84 <TIM_Base_SetConfig+0x124>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d108      	bne.n	8005ab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a2f      	ldr	r2, [pc, #188]	; (8005b74 <TIM_Base_SetConfig+0x114>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d02b      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac0:	d027      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a2c      	ldr	r2, [pc, #176]	; (8005b78 <TIM_Base_SetConfig+0x118>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d023      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a2b      	ldr	r2, [pc, #172]	; (8005b7c <TIM_Base_SetConfig+0x11c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d01f      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a2a      	ldr	r2, [pc, #168]	; (8005b80 <TIM_Base_SetConfig+0x120>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d01b      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a29      	ldr	r2, [pc, #164]	; (8005b84 <TIM_Base_SetConfig+0x124>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d017      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a28      	ldr	r2, [pc, #160]	; (8005b88 <TIM_Base_SetConfig+0x128>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d013      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a27      	ldr	r2, [pc, #156]	; (8005b8c <TIM_Base_SetConfig+0x12c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00f      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a26      	ldr	r2, [pc, #152]	; (8005b90 <TIM_Base_SetConfig+0x130>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00b      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a25      	ldr	r2, [pc, #148]	; (8005b94 <TIM_Base_SetConfig+0x134>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d007      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a24      	ldr	r2, [pc, #144]	; (8005b98 <TIM_Base_SetConfig+0x138>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d003      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a23      	ldr	r2, [pc, #140]	; (8005b9c <TIM_Base_SetConfig+0x13c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d108      	bne.n	8005b24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a0a      	ldr	r2, [pc, #40]	; (8005b74 <TIM_Base_SetConfig+0x114>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d003      	beq.n	8005b58 <TIM_Base_SetConfig+0xf8>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a0c      	ldr	r2, [pc, #48]	; (8005b84 <TIM_Base_SetConfig+0x124>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d103      	bne.n	8005b60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	615a      	str	r2, [r3, #20]
}
 8005b66:	bf00      	nop
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	40010000 	.word	0x40010000
 8005b78:	40000400 	.word	0x40000400
 8005b7c:	40000800 	.word	0x40000800
 8005b80:	40000c00 	.word	0x40000c00
 8005b84:	40010400 	.word	0x40010400
 8005b88:	40014000 	.word	0x40014000
 8005b8c:	40014400 	.word	0x40014400
 8005b90:	40014800 	.word	0x40014800
 8005b94:	40001800 	.word	0x40001800
 8005b98:	40001c00 	.word	0x40001c00
 8005b9c:	40002000 	.word	0x40002000

08005ba0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	f023 0201 	bic.w	r2, r3, #1
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0303 	bic.w	r3, r3, #3
 8005bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f023 0302 	bic.w	r3, r3, #2
 8005be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a20      	ldr	r2, [pc, #128]	; (8005c78 <TIM_OC1_SetConfig+0xd8>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d003      	beq.n	8005c04 <TIM_OC1_SetConfig+0x64>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a1f      	ldr	r2, [pc, #124]	; (8005c7c <TIM_OC1_SetConfig+0xdc>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d10c      	bne.n	8005c1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f023 0308 	bic.w	r3, r3, #8
 8005c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f023 0304 	bic.w	r3, r3, #4
 8005c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a15      	ldr	r2, [pc, #84]	; (8005c78 <TIM_OC1_SetConfig+0xd8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d003      	beq.n	8005c2e <TIM_OC1_SetConfig+0x8e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a14      	ldr	r2, [pc, #80]	; (8005c7c <TIM_OC1_SetConfig+0xdc>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d111      	bne.n	8005c52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	621a      	str	r2, [r3, #32]
}
 8005c6c:	bf00      	nop
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	40010000 	.word	0x40010000
 8005c7c:	40010400 	.word	0x40010400

08005c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	f023 0210 	bic.w	r2, r3, #16
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	021b      	lsls	r3, r3, #8
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f023 0320 	bic.w	r3, r3, #32
 8005cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a22      	ldr	r2, [pc, #136]	; (8005d64 <TIM_OC2_SetConfig+0xe4>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d003      	beq.n	8005ce8 <TIM_OC2_SetConfig+0x68>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a21      	ldr	r2, [pc, #132]	; (8005d68 <TIM_OC2_SetConfig+0xe8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d10d      	bne.n	8005d04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	011b      	lsls	r3, r3, #4
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a17      	ldr	r2, [pc, #92]	; (8005d64 <TIM_OC2_SetConfig+0xe4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d003      	beq.n	8005d14 <TIM_OC2_SetConfig+0x94>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a16      	ldr	r2, [pc, #88]	; (8005d68 <TIM_OC2_SetConfig+0xe8>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d113      	bne.n	8005d3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	621a      	str	r2, [r3, #32]
}
 8005d56:	bf00      	nop
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40010000 	.word	0x40010000
 8005d68:	40010400 	.word	0x40010400

08005d6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 0303 	bic.w	r3, r3, #3
 8005da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	021b      	lsls	r3, r3, #8
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a21      	ldr	r2, [pc, #132]	; (8005e4c <TIM_OC3_SetConfig+0xe0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d003      	beq.n	8005dd2 <TIM_OC3_SetConfig+0x66>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a20      	ldr	r2, [pc, #128]	; (8005e50 <TIM_OC3_SetConfig+0xe4>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d10d      	bne.n	8005dee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	021b      	lsls	r3, r3, #8
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a16      	ldr	r2, [pc, #88]	; (8005e4c <TIM_OC3_SetConfig+0xe0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d003      	beq.n	8005dfe <TIM_OC3_SetConfig+0x92>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a15      	ldr	r2, [pc, #84]	; (8005e50 <TIM_OC3_SetConfig+0xe4>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d113      	bne.n	8005e26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	621a      	str	r2, [r3, #32]
}
 8005e40:	bf00      	nop
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	40010000 	.word	0x40010000
 8005e50:	40010400 	.word	0x40010400

08005e54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	021b      	lsls	r3, r3, #8
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	031b      	lsls	r3, r3, #12
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a12      	ldr	r2, [pc, #72]	; (8005ef8 <TIM_OC4_SetConfig+0xa4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d003      	beq.n	8005ebc <TIM_OC4_SetConfig+0x68>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a11      	ldr	r2, [pc, #68]	; (8005efc <TIM_OC4_SetConfig+0xa8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d109      	bne.n	8005ed0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	019b      	lsls	r3, r3, #6
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	621a      	str	r2, [r3, #32]
}
 8005eea:	bf00      	nop
 8005eec:	371c      	adds	r7, #28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	40010000 	.word	0x40010000
 8005efc:	40010400 	.word	0x40010400

08005f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	f023 0201 	bic.w	r2, r3, #1
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f023 030a 	bic.w	r3, r3, #10
 8005f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	621a      	str	r2, [r3, #32]
}
 8005f52:	bf00      	nop
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b087      	sub	sp, #28
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	60f8      	str	r0, [r7, #12]
 8005f66:	60b9      	str	r1, [r7, #8]
 8005f68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	f023 0210 	bic.w	r2, r3, #16
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	031b      	lsls	r3, r3, #12
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	621a      	str	r2, [r3, #32]
}
 8005fb2:	bf00      	nop
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b085      	sub	sp, #20
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f043 0307 	orr.w	r3, r3, #7
 8005fe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	609a      	str	r2, [r3, #8]
}
 8005fe8:	bf00      	nop
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800600e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	021a      	lsls	r2, r3, #8
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	431a      	orrs	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4313      	orrs	r3, r2
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	609a      	str	r2, [r3, #8]
}
 8006028:	bf00      	nop
 800602a:	371c      	adds	r7, #28
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f003 031f 	and.w	r3, r3, #31
 8006046:	2201      	movs	r2, #1
 8006048:	fa02 f303 	lsl.w	r3, r2, r3
 800604c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a1a      	ldr	r2, [r3, #32]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	43db      	mvns	r3, r3
 8006056:	401a      	ands	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6a1a      	ldr	r2, [r3, #32]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	fa01 f303 	lsl.w	r3, r1, r3
 800606c:	431a      	orrs	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
	...

08006080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006094:	2302      	movs	r3, #2
 8006096:	e05a      	b.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a21      	ldr	r2, [pc, #132]	; (800615c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d022      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e4:	d01d      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1d      	ldr	r2, [pc, #116]	; (8006160 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d018      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a1b      	ldr	r2, [pc, #108]	; (8006164 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a1a      	ldr	r2, [pc, #104]	; (8006168 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00e      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a18      	ldr	r2, [pc, #96]	; (800616c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d009      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a17      	ldr	r2, [pc, #92]	; (8006170 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d004      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a15      	ldr	r2, [pc, #84]	; (8006174 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d10c      	bne.n	800613c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006128:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	4313      	orrs	r3, r2
 8006132:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40010000 	.word	0x40010000
 8006160:	40000400 	.word	0x40000400
 8006164:	40000800 	.word	0x40000800
 8006168:	40000c00 	.word	0x40000c00
 800616c:	40010400 	.word	0x40010400
 8006170:	40014000 	.word	0x40014000
 8006174:	40001800 	.word	0x40001800

08006178 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006178:	b084      	sub	sp, #16
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	f107 001c 	add.w	r0, r7, #28
 8006186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	2b01      	cmp	r3, #1
 800618e:	d122      	bne.n	80061d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006194:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80061a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d105      	bne.n	80061ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 fbee 	bl	80079ac <USB_CoreReset>
 80061d0:	4603      	mov	r3, r0
 80061d2:	73fb      	strb	r3, [r7, #15]
 80061d4:	e01a      	b.n	800620c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f001 fbe2 	bl	80079ac <USB_CoreReset>
 80061e8:	4603      	mov	r3, r0
 80061ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	639a      	str	r2, [r3, #56]	; 0x38
 80061fe:	e005      	b.n	800620c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	2b01      	cmp	r3, #1
 8006210:	d10b      	bne.n	800622a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f043 0206 	orr.w	r2, r3, #6
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f043 0220 	orr.w	r2, r3, #32
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800622a:	7bfb      	ldrb	r3, [r7, #15]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006236:	b004      	add	sp, #16
 8006238:	4770      	bx	lr
	...

0800623c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	4613      	mov	r3, r2
 8006248:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800624a:	79fb      	ldrb	r3, [r7, #7]
 800624c:	2b02      	cmp	r3, #2
 800624e:	d165      	bne.n	800631c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	4a41      	ldr	r2, [pc, #260]	; (8006358 <USB_SetTurnaroundTime+0x11c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d906      	bls.n	8006266 <USB_SetTurnaroundTime+0x2a>
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4a40      	ldr	r2, [pc, #256]	; (800635c <USB_SetTurnaroundTime+0x120>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d202      	bcs.n	8006266 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006260:	230f      	movs	r3, #15
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e062      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4a3c      	ldr	r2, [pc, #240]	; (800635c <USB_SetTurnaroundTime+0x120>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d306      	bcc.n	800627c <USB_SetTurnaroundTime+0x40>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	4a3b      	ldr	r2, [pc, #236]	; (8006360 <USB_SetTurnaroundTime+0x124>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d202      	bcs.n	800627c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006276:	230e      	movs	r3, #14
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	e057      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4a38      	ldr	r2, [pc, #224]	; (8006360 <USB_SetTurnaroundTime+0x124>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d306      	bcc.n	8006292 <USB_SetTurnaroundTime+0x56>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4a37      	ldr	r2, [pc, #220]	; (8006364 <USB_SetTurnaroundTime+0x128>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d202      	bcs.n	8006292 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800628c:	230d      	movs	r3, #13
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	e04c      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	4a33      	ldr	r2, [pc, #204]	; (8006364 <USB_SetTurnaroundTime+0x128>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d306      	bcc.n	80062a8 <USB_SetTurnaroundTime+0x6c>
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4a32      	ldr	r2, [pc, #200]	; (8006368 <USB_SetTurnaroundTime+0x12c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d802      	bhi.n	80062a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80062a2:	230c      	movs	r3, #12
 80062a4:	617b      	str	r3, [r7, #20]
 80062a6:	e041      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4a2f      	ldr	r2, [pc, #188]	; (8006368 <USB_SetTurnaroundTime+0x12c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d906      	bls.n	80062be <USB_SetTurnaroundTime+0x82>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4a2e      	ldr	r2, [pc, #184]	; (800636c <USB_SetTurnaroundTime+0x130>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d802      	bhi.n	80062be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80062b8:	230b      	movs	r3, #11
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e036      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	4a2a      	ldr	r2, [pc, #168]	; (800636c <USB_SetTurnaroundTime+0x130>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d906      	bls.n	80062d4 <USB_SetTurnaroundTime+0x98>
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4a29      	ldr	r2, [pc, #164]	; (8006370 <USB_SetTurnaroundTime+0x134>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d802      	bhi.n	80062d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80062ce:	230a      	movs	r3, #10
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	e02b      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4a26      	ldr	r2, [pc, #152]	; (8006370 <USB_SetTurnaroundTime+0x134>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d906      	bls.n	80062ea <USB_SetTurnaroundTime+0xae>
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4a25      	ldr	r2, [pc, #148]	; (8006374 <USB_SetTurnaroundTime+0x138>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d202      	bcs.n	80062ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80062e4:	2309      	movs	r3, #9
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	e020      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4a21      	ldr	r2, [pc, #132]	; (8006374 <USB_SetTurnaroundTime+0x138>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d306      	bcc.n	8006300 <USB_SetTurnaroundTime+0xc4>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	4a20      	ldr	r2, [pc, #128]	; (8006378 <USB_SetTurnaroundTime+0x13c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d802      	bhi.n	8006300 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80062fa:	2308      	movs	r3, #8
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	e015      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4a1d      	ldr	r2, [pc, #116]	; (8006378 <USB_SetTurnaroundTime+0x13c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d906      	bls.n	8006316 <USB_SetTurnaroundTime+0xda>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4a1c      	ldr	r2, [pc, #112]	; (800637c <USB_SetTurnaroundTime+0x140>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d202      	bcs.n	8006316 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006310:	2307      	movs	r3, #7
 8006312:	617b      	str	r3, [r7, #20]
 8006314:	e00a      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006316:	2306      	movs	r3, #6
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	e007      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800631c:	79fb      	ldrb	r3, [r7, #7]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d102      	bne.n	8006328 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006322:	2309      	movs	r3, #9
 8006324:	617b      	str	r3, [r7, #20]
 8006326:	e001      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006328:	2309      	movs	r3, #9
 800632a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	029b      	lsls	r3, r3, #10
 8006340:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006344:	431a      	orrs	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	00d8acbf 	.word	0x00d8acbf
 800635c:	00e4e1c0 	.word	0x00e4e1c0
 8006360:	00f42400 	.word	0x00f42400
 8006364:	01067380 	.word	0x01067380
 8006368:	011a499f 	.word	0x011a499f
 800636c:	01312cff 	.word	0x01312cff
 8006370:	014ca43f 	.word	0x014ca43f
 8006374:	016e3600 	.word	0x016e3600
 8006378:	01a6ab1f 	.word	0x01a6ab1f
 800637c:	01e84800 	.word	0x01e84800

08006380 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f043 0201 	orr.w	r2, r3, #1
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f023 0201 	bic.w	r2, r3, #1
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d115      	bne.n	8006412 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063f2:	2001      	movs	r0, #1
 80063f4:	f7fb ff36 	bl	8002264 <HAL_Delay>
      ms++;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	3301      	adds	r3, #1
 80063fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f001 fa45 	bl	800788e <USB_GetMode>
 8006404:	4603      	mov	r3, r0
 8006406:	2b01      	cmp	r3, #1
 8006408:	d01e      	beq.n	8006448 <USB_SetCurrentMode+0x84>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b31      	cmp	r3, #49	; 0x31
 800640e:	d9f0      	bls.n	80063f2 <USB_SetCurrentMode+0x2e>
 8006410:	e01a      	b.n	8006448 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006412:	78fb      	ldrb	r3, [r7, #3]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d115      	bne.n	8006444 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006424:	2001      	movs	r0, #1
 8006426:	f7fb ff1d 	bl	8002264 <HAL_Delay>
      ms++;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3301      	adds	r3, #1
 800642e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f001 fa2c 	bl	800788e <USB_GetMode>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d005      	beq.n	8006448 <USB_SetCurrentMode+0x84>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b31      	cmp	r3, #49	; 0x31
 8006440:	d9f0      	bls.n	8006424 <USB_SetCurrentMode+0x60>
 8006442:	e001      	b.n	8006448 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e005      	b.n	8006454 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b32      	cmp	r3, #50	; 0x32
 800644c:	d101      	bne.n	8006452 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800645c:	b084      	sub	sp, #16
 800645e:	b580      	push	{r7, lr}
 8006460:	b086      	sub	sp, #24
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800646a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006476:	2300      	movs	r3, #0
 8006478:	613b      	str	r3, [r7, #16]
 800647a:	e009      	b.n	8006490 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	3340      	adds	r3, #64	; 0x40
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	2200      	movs	r2, #0
 8006488:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	3301      	adds	r3, #1
 800648e:	613b      	str	r3, [r7, #16]
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	2b0e      	cmp	r3, #14
 8006494:	d9f2      	bls.n	800647c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006498:	2b00      	cmp	r3, #0
 800649a:	d11c      	bne.n	80064d6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064aa:	f043 0302 	orr.w	r3, r3, #2
 80064ae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064cc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38
 80064d4:	e00b      	b.n	80064ee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064f4:	461a      	mov	r2, r3
 80064f6:	2300      	movs	r3, #0
 80064f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006500:	4619      	mov	r1, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006508:	461a      	mov	r2, r3
 800650a:	680b      	ldr	r3, [r1, #0]
 800650c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006510:	2b01      	cmp	r3, #1
 8006512:	d10c      	bne.n	800652e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006516:	2b00      	cmp	r3, #0
 8006518:	d104      	bne.n	8006524 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800651a:	2100      	movs	r1, #0
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f965 	bl	80067ec <USB_SetDevSpeed>
 8006522:	e008      	b.n	8006536 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006524:	2101      	movs	r1, #1
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f960 	bl	80067ec <USB_SetDevSpeed>
 800652c:	e003      	b.n	8006536 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800652e:	2103      	movs	r1, #3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f95b 	bl	80067ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006536:	2110      	movs	r1, #16
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f8f3 	bl	8006724 <USB_FlushTxFifo>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f91f 	bl	800678c <USB_FlushRxFifo>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655e:	461a      	mov	r2, r3
 8006560:	2300      	movs	r3, #0
 8006562:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656a:	461a      	mov	r2, r3
 800656c:	2300      	movs	r3, #0
 800656e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006576:	461a      	mov	r2, r3
 8006578:	2300      	movs	r3, #0
 800657a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800657c:	2300      	movs	r3, #0
 800657e:	613b      	str	r3, [r7, #16]
 8006580:	e043      	b.n	800660a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006598:	d118      	bne.n	80065cc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10a      	bne.n	80065b6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ac:	461a      	mov	r2, r3
 80065ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	e013      	b.n	80065de <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c2:	461a      	mov	r2, r3
 80065c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	e008      	b.n	80065de <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d8:	461a      	mov	r2, r3
 80065da:	2300      	movs	r3, #0
 80065dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ea:	461a      	mov	r2, r3
 80065ec:	2300      	movs	r3, #0
 80065ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065fc:	461a      	mov	r2, r3
 80065fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006602:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	3301      	adds	r3, #1
 8006608:	613b      	str	r3, [r7, #16]
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	429a      	cmp	r2, r3
 8006610:	d3b7      	bcc.n	8006582 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006612:	2300      	movs	r3, #0
 8006614:	613b      	str	r3, [r7, #16]
 8006616:	e043      	b.n	80066a0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800662a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800662e:	d118      	bne.n	8006662 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	461a      	mov	r2, r3
 8006644:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	e013      	b.n	8006674 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006658:	461a      	mov	r2, r3
 800665a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	e008      	b.n	8006674 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666e:	461a      	mov	r2, r3
 8006670:	2300      	movs	r3, #0
 8006672:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006680:	461a      	mov	r2, r3
 8006682:	2300      	movs	r3, #0
 8006684:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006692:	461a      	mov	r2, r3
 8006694:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006698:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	3301      	adds	r3, #1
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d3b7      	bcc.n	8006618 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80066c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d105      	bne.n	80066dc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	f043 0210 	orr.w	r2, r3, #16
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	699a      	ldr	r2, [r3, #24]
 80066e0:	4b0f      	ldr	r3, [pc, #60]	; (8006720 <USB_DevInit+0x2c4>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d005      	beq.n	80066fa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	f043 0208 	orr.w	r2, r3, #8
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d107      	bne.n	8006710 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006708:	f043 0304 	orr.w	r3, r3, #4
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006710:	7dfb      	ldrb	r3, [r7, #23]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3718      	adds	r7, #24
 8006716:	46bd      	mov	sp, r7
 8006718:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800671c:	b004      	add	sp, #16
 800671e:	4770      	bx	lr
 8006720:	803c3800 	.word	0x803c3800

08006724 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3301      	adds	r3, #1
 8006736:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4a13      	ldr	r2, [pc, #76]	; (8006788 <USB_FlushTxFifo+0x64>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d901      	bls.n	8006744 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e01b      	b.n	800677c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	daf2      	bge.n	8006732 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	019b      	lsls	r3, r3, #6
 8006754:	f043 0220 	orr.w	r2, r3, #32
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3301      	adds	r3, #1
 8006760:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4a08      	ldr	r2, [pc, #32]	; (8006788 <USB_FlushTxFifo+0x64>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d901      	bls.n	800676e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e006      	b.n	800677c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b20      	cmp	r3, #32
 8006778:	d0f0      	beq.n	800675c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	00030d40 	.word	0x00030d40

0800678c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3301      	adds	r3, #1
 800679c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4a11      	ldr	r2, [pc, #68]	; (80067e8 <USB_FlushRxFifo+0x5c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d901      	bls.n	80067aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e018      	b.n	80067dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	daf2      	bge.n	8006798 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2210      	movs	r2, #16
 80067ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3301      	adds	r3, #1
 80067c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4a08      	ldr	r2, [pc, #32]	; (80067e8 <USB_FlushRxFifo+0x5c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d901      	bls.n	80067ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e006      	b.n	80067dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f003 0310 	and.w	r3, r3, #16
 80067d6:	2b10      	cmp	r3, #16
 80067d8:	d0f0      	beq.n	80067bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	00030d40 	.word	0x00030d40

080067ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	68f9      	ldr	r1, [r7, #12]
 8006808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800680c:	4313      	orrs	r3, r2
 800680e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800681e:	b480      	push	{r7}
 8006820:	b087      	sub	sp, #28
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 0306 	and.w	r3, r3, #6
 8006836:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d102      	bne.n	8006844 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800683e:	2300      	movs	r3, #0
 8006840:	75fb      	strb	r3, [r7, #23]
 8006842:	e00a      	b.n	800685a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b02      	cmp	r3, #2
 8006848:	d002      	beq.n	8006850 <USB_GetDevSpeed+0x32>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2b06      	cmp	r3, #6
 800684e:	d102      	bne.n	8006856 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006850:	2302      	movs	r3, #2
 8006852:	75fb      	strb	r3, [r7, #23]
 8006854:	e001      	b.n	800685a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006856:	230f      	movs	r3, #15
 8006858:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800685a:	7dfb      	ldrb	r3, [r7, #23]
}
 800685c:	4618      	mov	r0, r3
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	785b      	ldrb	r3, [r3, #1]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d13a      	bne.n	80068fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800688a:	69da      	ldr	r2, [r3, #28]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	f003 030f 	and.w	r3, r3, #15
 8006894:	2101      	movs	r1, #1
 8006896:	fa01 f303 	lsl.w	r3, r1, r3
 800689a:	b29b      	uxth	r3, r3
 800689c:	68f9      	ldr	r1, [r7, #12]
 800689e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068a2:	4313      	orrs	r3, r2
 80068a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d155      	bne.n	8006968 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	791b      	ldrb	r3, [r3, #4]
 80068d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	059b      	lsls	r3, r3, #22
 80068de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068e0:	4313      	orrs	r3, r2
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	0151      	lsls	r1, r2, #5
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	440a      	add	r2, r1
 80068ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	e036      	b.n	8006968 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006900:	69da      	ldr	r2, [r3, #28]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	2101      	movs	r1, #1
 800690c:	fa01 f303 	lsl.w	r3, r1, r3
 8006910:	041b      	lsls	r3, r3, #16
 8006912:	68f9      	ldr	r1, [r7, #12]
 8006914:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006918:	4313      	orrs	r3, r2
 800691a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d11a      	bne.n	8006968 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	791b      	ldrb	r3, [r3, #4]
 800694c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800694e:	430b      	orrs	r3, r1
 8006950:	4313      	orrs	r3, r2
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	0151      	lsls	r1, r2, #5
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	440a      	add	r2, r1
 800695a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800695e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006966:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
	...

08006978 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	785b      	ldrb	r3, [r3, #1]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d161      	bne.n	8006a58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069aa:	d11f      	bne.n	80069ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	0151      	lsls	r1, r2, #5
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	440a      	add	r2, r1
 80069c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	0151      	lsls	r1, r2, #5
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	440a      	add	r2, r1
 80069e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	f003 030f 	and.w	r3, r3, #15
 80069fc:	2101      	movs	r1, #1
 80069fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	43db      	mvns	r3, r3
 8006a06:	68f9      	ldr	r1, [r7, #12]
 8006a08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a16:	69da      	ldr	r2, [r3, #28]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	f003 030f 	and.w	r3, r3, #15
 8006a20:	2101      	movs	r1, #1
 8006a22:	fa01 f303 	lsl.w	r3, r1, r3
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	43db      	mvns	r3, r3
 8006a2a:	68f9      	ldr	r1, [r7, #12]
 8006a2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a30:	4013      	ands	r3, r2
 8006a32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	0159      	lsls	r1, r3, #5
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	440b      	add	r3, r1
 8006a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4b35      	ldr	r3, [pc, #212]	; (8006b28 <USB_DeactivateEndpoint+0x1b0>)
 8006a52:	4013      	ands	r3, r2
 8006a54:	600b      	str	r3, [r1, #0]
 8006a56:	e060      	b.n	8006b1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a6e:	d11f      	bne.n	8006ab0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	0151      	lsls	r1, r2, #5
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	440a      	add	r2, r1
 8006a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	0151      	lsls	r1, r2, #5
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	440a      	add	r2, r1
 8006aa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	f003 030f 	and.w	r3, r3, #15
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac6:	041b      	lsls	r3, r3, #16
 8006ac8:	43db      	mvns	r3, r3
 8006aca:	68f9      	ldr	r1, [r7, #12]
 8006acc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ada:	69da      	ldr	r2, [r3, #28]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	f003 030f 	and.w	r3, r3, #15
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aea:	041b      	lsls	r3, r3, #16
 8006aec:	43db      	mvns	r3, r3
 8006aee:	68f9      	ldr	r1, [r7, #12]
 8006af0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006af4:	4013      	ands	r3, r2
 8006af6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	0159      	lsls	r1, r3, #5
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	440b      	add	r3, r1
 8006b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b12:	4619      	mov	r1, r3
 8006b14:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <USB_DeactivateEndpoint+0x1b4>)
 8006b16:	4013      	ands	r3, r2
 8006b18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	ec337800 	.word	0xec337800
 8006b2c:	eff37800 	.word	0xeff37800

08006b30 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b08a      	sub	sp, #40	; 0x28
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	785b      	ldrb	r3, [r3, #1]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	f040 815c 	bne.w	8006e0a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d132      	bne.n	8006bc0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	0151      	lsls	r1, r2, #5
 8006b6c:	69fa      	ldr	r2, [r7, #28]
 8006b6e:	440a      	add	r2, r1
 8006b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	0151      	lsls	r1, r2, #5
 8006b90:	69fa      	ldr	r2, [r7, #28]
 8006b92:	440a      	add	r2, r1
 8006b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	69ba      	ldr	r2, [r7, #24]
 8006bae:	0151      	lsls	r1, r2, #5
 8006bb0:	69fa      	ldr	r2, [r7, #28]
 8006bb2:	440a      	add	r2, r1
 8006bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bb8:	0cdb      	lsrs	r3, r3, #19
 8006bba:	04db      	lsls	r3, r3, #19
 8006bbc:	6113      	str	r3, [r2, #16]
 8006bbe:	e074      	b.n	8006caa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	0151      	lsls	r1, r2, #5
 8006bd2:	69fa      	ldr	r2, [r7, #28]
 8006bd4:	440a      	add	r2, r1
 8006bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bda:	0cdb      	lsrs	r3, r3, #19
 8006bdc:	04db      	lsls	r3, r3, #19
 8006bde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	0151      	lsls	r1, r2, #5
 8006bf2:	69fa      	ldr	r2, [r7, #28]
 8006bf4:	440a      	add	r2, r1
 8006bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bfa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bfe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c10:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	6999      	ldr	r1, [r3, #24]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	440b      	add	r3, r1
 8006c1c:	1e59      	subs	r1, r3, #1
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c26:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006c28:	4b9d      	ldr	r3, [pc, #628]	; (8006ea0 <USB_EPStartXfer+0x370>)
 8006c2a:	400b      	ands	r3, r1
 8006c2c:	69b9      	ldr	r1, [r7, #24]
 8006c2e:	0148      	lsls	r0, r1, #5
 8006c30:	69f9      	ldr	r1, [r7, #28]
 8006c32:	4401      	add	r1, r0
 8006c34:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c48:	691a      	ldr	r2, [r3, #16]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c52:	69b9      	ldr	r1, [r7, #24]
 8006c54:	0148      	lsls	r0, r1, #5
 8006c56:	69f9      	ldr	r1, [r7, #28]
 8006c58:	4401      	add	r1, r0
 8006c5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	791b      	ldrb	r3, [r3, #4]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d11f      	bne.n	8006caa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	0151      	lsls	r1, r2, #5
 8006c7c:	69fa      	ldr	r2, [r7, #28]
 8006c7e:	440a      	add	r2, r1
 8006c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c84:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006c88:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	0151      	lsls	r1, r2, #5
 8006c9c:	69fa      	ldr	r2, [r7, #28]
 8006c9e:	440a      	add	r2, r1
 8006ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ca4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ca8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006caa:	79fb      	ldrb	r3, [r7, #7]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d14b      	bne.n	8006d48 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d009      	beq.n	8006ccc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	791b      	ldrb	r3, [r3, #4]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d128      	bne.n	8006d26 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d110      	bne.n	8006d06 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	0151      	lsls	r1, r2, #5
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	440a      	add	r2, r1
 8006cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	e00f      	b.n	8006d26 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	0151      	lsls	r1, r2, #5
 8006d18:	69fa      	ldr	r2, [r7, #28]
 8006d1a:	440a      	add	r2, r1
 8006d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d24:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	0151      	lsls	r1, r2, #5
 8006d38:	69fa      	ldr	r2, [r7, #28]
 8006d3a:	440a      	add	r2, r1
 8006d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	e133      	b.n	8006fb0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	0151      	lsls	r1, r2, #5
 8006d5a:	69fa      	ldr	r2, [r7, #28]
 8006d5c:	440a      	add	r2, r1
 8006d5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d66:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	791b      	ldrb	r3, [r3, #4]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d015      	beq.n	8006d9c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 811b 	beq.w	8006fb0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	f003 030f 	and.w	r3, r3, #15
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d90:	69f9      	ldr	r1, [r7, #28]
 8006d92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d96:	4313      	orrs	r3, r2
 8006d98:	634b      	str	r3, [r1, #52]	; 0x34
 8006d9a:	e109      	b.n	8006fb0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d110      	bne.n	8006dce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	0151      	lsls	r1, r2, #5
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	440a      	add	r2, r1
 8006dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006dca:	6013      	str	r3, [r2, #0]
 8006dcc:	e00f      	b.n	8006dee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	0151      	lsls	r1, r2, #5
 8006de0:	69fa      	ldr	r2, [r7, #28]
 8006de2:	440a      	add	r2, r1
 8006de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	6919      	ldr	r1, [r3, #16]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	781a      	ldrb	r2, [r3, #0]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	b298      	uxth	r0, r3
 8006dfc:	79fb      	ldrb	r3, [r7, #7]
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	4603      	mov	r3, r0
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 fade 	bl	80073c4 <USB_WritePacket>
 8006e08:	e0d2      	b.n	8006fb0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	015a      	lsls	r2, r3, #5
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	4413      	add	r3, r2
 8006e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	0151      	lsls	r1, r2, #5
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	440a      	add	r2, r1
 8006e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e24:	0cdb      	lsrs	r3, r3, #19
 8006e26:	04db      	lsls	r3, r3, #19
 8006e28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	0151      	lsls	r1, r2, #5
 8006e3c:	69fa      	ldr	r2, [r7, #28]
 8006e3e:	440a      	add	r2, r1
 8006e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e4c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d126      	bne.n	8006ea4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	015a      	lsls	r2, r3, #5
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e62:	691a      	ldr	r2, [r3, #16]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e6c:	69b9      	ldr	r1, [r7, #24]
 8006e6e:	0148      	lsls	r0, r1, #5
 8006e70:	69f9      	ldr	r1, [r7, #28]
 8006e72:	4401      	add	r1, r0
 8006e74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	0151      	lsls	r1, r2, #5
 8006e8e:	69fa      	ldr	r2, [r7, #28]
 8006e90:	440a      	add	r2, r1
 8006e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e9a:	6113      	str	r3, [r2, #16]
 8006e9c:	e03a      	b.n	8006f14 <USB_EPStartXfer+0x3e4>
 8006e9e:	bf00      	nop
 8006ea0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	699a      	ldr	r2, [r3, #24]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	4413      	add	r3, r2
 8006eae:	1e5a      	subs	r2, r3, #1
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	8afa      	ldrh	r2, [r7, #22]
 8006ec0:	fb03 f202 	mul.w	r2, r3, r2
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed4:	691a      	ldr	r2, [r3, #16]
 8006ed6:	8afb      	ldrh	r3, [r7, #22]
 8006ed8:	04d9      	lsls	r1, r3, #19
 8006eda:	4b38      	ldr	r3, [pc, #224]	; (8006fbc <USB_EPStartXfer+0x48c>)
 8006edc:	400b      	ands	r3, r1
 8006ede:	69b9      	ldr	r1, [r7, #24]
 8006ee0:	0148      	lsls	r0, r1, #5
 8006ee2:	69f9      	ldr	r1, [r7, #28]
 8006ee4:	4401      	add	r1, r0
 8006ee6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006eea:	4313      	orrs	r3, r2
 8006eec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efa:	691a      	ldr	r2, [r3, #16]
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f04:	69b9      	ldr	r1, [r7, #24]
 8006f06:	0148      	lsls	r0, r1, #5
 8006f08:	69f9      	ldr	r1, [r7, #28]
 8006f0a:	4401      	add	r1, r0
 8006f0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f10:	4313      	orrs	r3, r2
 8006f12:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f14:	79fb      	ldrb	r3, [r7, #7]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d10d      	bne.n	8006f36 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d009      	beq.n	8006f36 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	6919      	ldr	r1, [r3, #16]
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f32:	460a      	mov	r2, r1
 8006f34:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	791b      	ldrb	r3, [r3, #4]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d128      	bne.n	8006f90 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d110      	bne.n	8006f70 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	0151      	lsls	r1, r2, #5
 8006f60:	69fa      	ldr	r2, [r7, #28]
 8006f62:	440a      	add	r2, r1
 8006f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f6c:	6013      	str	r3, [r2, #0]
 8006f6e:	e00f      	b.n	8006f90 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	0151      	lsls	r1, r2, #5
 8006f82:	69fa      	ldr	r2, [r7, #28]
 8006f84:	440a      	add	r2, r1
 8006f86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f8e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	0151      	lsls	r1, r2, #5
 8006fa2:	69fa      	ldr	r2, [r7, #28]
 8006fa4:	440a      	add	r2, r1
 8006fa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006faa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3720      	adds	r7, #32
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	1ff80000 	.word	0x1ff80000

08006fc0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	785b      	ldrb	r3, [r3, #1]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	f040 80ce 	bne.w	800717e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d132      	bne.n	8007050 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	0151      	lsls	r1, r2, #5
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	440a      	add	r2, r1
 8007000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007004:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007008:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800700c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	0151      	lsls	r1, r2, #5
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	440a      	add	r2, r1
 8007024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007028:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800702c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	4413      	add	r3, r2
 8007036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	0151      	lsls	r1, r2, #5
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	440a      	add	r2, r1
 8007044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007048:	0cdb      	lsrs	r3, r3, #19
 800704a:	04db      	lsls	r3, r3, #19
 800704c:	6113      	str	r3, [r2, #16]
 800704e:	e04e      	b.n	80070ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	0151      	lsls	r1, r2, #5
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	440a      	add	r2, r1
 8007066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800706a:	0cdb      	lsrs	r3, r3, #19
 800706c:	04db      	lsls	r3, r3, #19
 800706e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	0151      	lsls	r1, r2, #5
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	440a      	add	r2, r1
 8007086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800708a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800708e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007092:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	699a      	ldr	r2, [r3, #24]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	429a      	cmp	r2, r3
 800709e:	d903      	bls.n	80070a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	0151      	lsls	r1, r2, #5
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	440a      	add	r2, r1
 80070be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d4:	691a      	ldr	r2, [r3, #16]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070de:	6939      	ldr	r1, [r7, #16]
 80070e0:	0148      	lsls	r0, r1, #5
 80070e2:	6979      	ldr	r1, [r7, #20]
 80070e4:	4401      	add	r1, r0
 80070e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070ea:	4313      	orrs	r3, r2
 80070ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80070ee:	79fb      	ldrb	r3, [r7, #7]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d11e      	bne.n	8007132 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d009      	beq.n	8007110 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007108:	461a      	mov	r2, r3
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	0151      	lsls	r1, r2, #5
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	440a      	add	r2, r1
 8007126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800712a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800712e:	6013      	str	r3, [r2, #0]
 8007130:	e097      	b.n	8007262 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	4413      	add	r3, r2
 800713a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	0151      	lsls	r1, r2, #5
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	440a      	add	r2, r1
 8007148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800714c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007150:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 8083 	beq.w	8007262 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	f003 030f 	and.w	r3, r3, #15
 800716c:	2101      	movs	r1, #1
 800716e:	fa01 f303 	lsl.w	r3, r1, r3
 8007172:	6979      	ldr	r1, [r7, #20]
 8007174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007178:	4313      	orrs	r3, r2
 800717a:	634b      	str	r3, [r1, #52]	; 0x34
 800717c:	e071      	b.n	8007262 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	4413      	add	r3, r2
 8007186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	0151      	lsls	r1, r2, #5
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	440a      	add	r2, r1
 8007194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007198:	0cdb      	lsrs	r3, r3, #19
 800719a:	04db      	lsls	r3, r3, #19
 800719c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	0151      	lsls	r1, r2, #5
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	440a      	add	r2, r1
 80071b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	68da      	ldr	r2, [r3, #12]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	68da      	ldr	r2, [r3, #12]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	015a      	lsls	r2, r3, #5
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	4413      	add	r3, r2
 80071e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	0151      	lsls	r1, r2, #5
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	440a      	add	r2, r1
 80071f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007206:	691a      	ldr	r2, [r3, #16]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007210:	6939      	ldr	r1, [r7, #16]
 8007212:	0148      	lsls	r0, r1, #5
 8007214:	6979      	ldr	r1, [r7, #20]
 8007216:	4401      	add	r1, r0
 8007218:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800721c:	4313      	orrs	r3, r2
 800721e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007220:	79fb      	ldrb	r3, [r7, #7]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d10d      	bne.n	8007242 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d009      	beq.n	8007242 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	6919      	ldr	r1, [r3, #16]
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	4413      	add	r3, r2
 800723a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723e:	460a      	mov	r2, r1
 8007240:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	4413      	add	r3, r2
 800724a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	0151      	lsls	r1, r2, #5
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	440a      	add	r2, r1
 8007258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800725c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007260:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	371c      	adds	r7, #28
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	785b      	ldrb	r3, [r3, #1]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d14a      	bne.n	8007324 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072a6:	f040 8086 	bne.w	80073b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	7812      	ldrb	r2, [r2, #0]
 80072be:	0151      	lsls	r1, r2, #5
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	440a      	add	r2, r1
 80072c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	7812      	ldrb	r2, [r2, #0]
 80072e2:	0151      	lsls	r1, r2, #5
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	440a      	add	r2, r1
 80072e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	3301      	adds	r3, #1
 80072f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80072fe:	4293      	cmp	r3, r2
 8007300:	d902      	bls.n	8007308 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	75fb      	strb	r3, [r7, #23]
          break;
 8007306:	e056      	b.n	80073b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800731c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007320:	d0e7      	beq.n	80072f2 <USB_EPStopXfer+0x82>
 8007322:	e048      	b.n	80073b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007338:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800733c:	d13b      	bne.n	80073b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	7812      	ldrb	r2, [r2, #0]
 8007352:	0151      	lsls	r1, r2, #5
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	440a      	add	r2, r1
 8007358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800735c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007360:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	4413      	add	r3, r2
 800736c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	7812      	ldrb	r2, [r2, #0]
 8007376:	0151      	lsls	r1, r2, #5
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	440a      	add	r2, r1
 800737c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007380:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007384:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	3301      	adds	r3, #1
 800738a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007392:	4293      	cmp	r3, r2
 8007394:	d902      	bls.n	800739c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	75fb      	strb	r3, [r7, #23]
          break;
 800739a:	e00c      	b.n	80073b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073b4:	d0e7      	beq.n	8007386 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	371c      	adds	r7, #28
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b089      	sub	sp, #36	; 0x24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	4611      	mov	r1, r2
 80073d0:	461a      	mov	r2, r3
 80073d2:	460b      	mov	r3, r1
 80073d4:	71fb      	strb	r3, [r7, #7]
 80073d6:	4613      	mov	r3, r2
 80073d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80073e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d123      	bne.n	8007432 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80073ea:	88bb      	ldrh	r3, [r7, #4]
 80073ec:	3303      	adds	r3, #3
 80073ee:	089b      	lsrs	r3, r3, #2
 80073f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80073f2:	2300      	movs	r3, #0
 80073f4:	61bb      	str	r3, [r7, #24]
 80073f6:	e018      	b.n	800742a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073f8:	79fb      	ldrb	r3, [r7, #7]
 80073fa:	031a      	lsls	r2, r3, #12
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007404:	461a      	mov	r2, r3
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	3301      	adds	r3, #1
 8007410:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	3301      	adds	r3, #1
 8007416:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	3301      	adds	r3, #1
 800741c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	3301      	adds	r3, #1
 8007422:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	3301      	adds	r3, #1
 8007428:	61bb      	str	r3, [r7, #24]
 800742a:	69ba      	ldr	r2, [r7, #24]
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	429a      	cmp	r2, r3
 8007430:	d3e2      	bcc.n	80073f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3724      	adds	r7, #36	; 0x24
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007440:	b480      	push	{r7}
 8007442:	b08b      	sub	sp, #44	; 0x2c
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	4613      	mov	r3, r2
 800744c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007456:	88fb      	ldrh	r3, [r7, #6]
 8007458:	089b      	lsrs	r3, r3, #2
 800745a:	b29b      	uxth	r3, r3
 800745c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800745e:	88fb      	ldrh	r3, [r7, #6]
 8007460:	f003 0303 	and.w	r3, r3, #3
 8007464:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007466:	2300      	movs	r3, #0
 8007468:	623b      	str	r3, [r7, #32]
 800746a:	e014      	b.n	8007496 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	601a      	str	r2, [r3, #0]
    pDest++;
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	3301      	adds	r3, #1
 800747c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	3301      	adds	r3, #1
 8007482:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	3301      	adds	r3, #1
 8007488:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	3301      	adds	r3, #1
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	3301      	adds	r3, #1
 8007494:	623b      	str	r3, [r7, #32]
 8007496:	6a3a      	ldr	r2, [r7, #32]
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	429a      	cmp	r2, r3
 800749c:	d3e6      	bcc.n	800746c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800749e:	8bfb      	ldrh	r3, [r7, #30]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d01e      	beq.n	80074e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ae:	461a      	mov	r2, r3
 80074b0:	f107 0310 	add.w	r3, r7, #16
 80074b4:	6812      	ldr	r2, [r2, #0]
 80074b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	fa22 f303 	lsr.w	r3, r2, r3
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	701a      	strb	r2, [r3, #0]
      i++;
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	3301      	adds	r3, #1
 80074ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d2:	3301      	adds	r3, #1
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80074d6:	8bfb      	ldrh	r3, [r7, #30]
 80074d8:	3b01      	subs	r3, #1
 80074da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80074dc:	8bfb      	ldrh	r3, [r7, #30]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1ea      	bne.n	80074b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	372c      	adds	r7, #44	; 0x2c
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	785b      	ldrb	r3, [r3, #1]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d12c      	bne.n	8007566 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4413      	add	r3, r2
 8007514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	db12      	blt.n	8007544 <USB_EPSetStall+0x54>
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00f      	beq.n	8007544 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	0151      	lsls	r1, r2, #5
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	440a      	add	r2, r1
 800753a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800753e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007542:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4413      	add	r3, r2
 800754c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	0151      	lsls	r1, r2, #5
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	440a      	add	r2, r1
 800755a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800755e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	e02b      	b.n	80075be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	4413      	add	r3, r2
 800756e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	db12      	blt.n	800759e <USB_EPSetStall+0xae>
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00f      	beq.n	800759e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	015a      	lsls	r2, r3, #5
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	4413      	add	r3, r2
 8007586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	0151      	lsls	r1, r2, #5
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	440a      	add	r2, r1
 8007594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007598:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800759c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	0151      	lsls	r1, r2, #5
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	440a      	add	r2, r1
 80075b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	785b      	ldrb	r3, [r3, #1]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d128      	bne.n	800763a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	0151      	lsls	r1, r2, #5
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	440a      	add	r2, r1
 80075fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007602:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007606:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	791b      	ldrb	r3, [r3, #4]
 800760c:	2b03      	cmp	r3, #3
 800760e:	d003      	beq.n	8007618 <USB_EPClearStall+0x4c>
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	791b      	ldrb	r3, [r3, #4]
 8007614:	2b02      	cmp	r3, #2
 8007616:	d138      	bne.n	800768a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	0151      	lsls	r1, r2, #5
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	440a      	add	r2, r1
 800762e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007636:	6013      	str	r3, [r2, #0]
 8007638:	e027      	b.n	800768a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	0151      	lsls	r1, r2, #5
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	440a      	add	r2, r1
 8007650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007654:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007658:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	791b      	ldrb	r3, [r3, #4]
 800765e:	2b03      	cmp	r3, #3
 8007660:	d003      	beq.n	800766a <USB_EPClearStall+0x9e>
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	791b      	ldrb	r3, [r3, #4]
 8007666:	2b02      	cmp	r3, #2
 8007668:	d10f      	bne.n	800768a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4413      	add	r3, r2
 8007672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	0151      	lsls	r1, r2, #5
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	440a      	add	r2, r1
 8007680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007688:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80076ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	011b      	lsls	r3, r3, #4
 80076c8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80076cc:	68f9      	ldr	r1, [r7, #12]
 80076ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076d2:	4313      	orrs	r3, r2
 80076d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076fe:	f023 0303 	bic.w	r3, r3, #3
 8007702:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007712:	f023 0302 	bic.w	r3, r3, #2
 8007716:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007726:	b480      	push	{r7}
 8007728:	b085      	sub	sp, #20
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007740:	f023 0303 	bic.w	r3, r3, #3
 8007744:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007754:	f043 0302 	orr.w	r3, r3, #2
 8007758:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4013      	ands	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007780:	68fb      	ldr	r3, [r7, #12]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800778e:	b480      	push	{r7}
 8007790:	b085      	sub	sp, #20
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	4013      	ands	r3, r2
 80077b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	0c1b      	lsrs	r3, r3, #16
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b085      	sub	sp, #20
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	4013      	ands	r3, r2
 80077e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	b29b      	uxth	r3, r3
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b085      	sub	sp, #20
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	460b      	mov	r3, r1
 8007800:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007806:	78fb      	ldrb	r3, [r7, #3]
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4413      	add	r3, r2
 800780e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	4013      	ands	r3, r2
 8007822:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007824:	68bb      	ldr	r3, [r7, #8]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007832:	b480      	push	{r7}
 8007834:	b087      	sub	sp, #28
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	460b      	mov	r3, r1
 800783c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007854:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007856:	78fb      	ldrb	r3, [r7, #3]
 8007858:	f003 030f 	and.w	r3, r3, #15
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	fa22 f303 	lsr.w	r3, r2, r3
 8007862:	01db      	lsls	r3, r3, #7
 8007864:	b2db      	uxtb	r3, r3
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	4313      	orrs	r3, r2
 800786a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800786c:	78fb      	ldrb	r3, [r7, #3]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	4013      	ands	r3, r2
 800787e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007880:	68bb      	ldr	r3, [r7, #8]
}
 8007882:	4618      	mov	r0, r3
 8007884:	371c      	adds	r7, #28
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	f003 0301 	and.w	r3, r3, #1
}
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b085      	sub	sp, #20
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80078c8:	f023 0307 	bic.w	r3, r3, #7
 80078cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	460b      	mov	r3, r1
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	333c      	adds	r3, #60	; 0x3c
 8007906:	3304      	adds	r3, #4
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	4a26      	ldr	r2, [pc, #152]	; (80079a8 <USB_EP0_OutStart+0xb8>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d90a      	bls.n	800792a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007924:	d101      	bne.n	800792a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	e037      	b.n	800799a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007930:	461a      	mov	r2, r3
 8007932:	2300      	movs	r3, #0
 8007934:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007944:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007948:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007958:	f043 0318 	orr.w	r3, r3, #24
 800795c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800796c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007970:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007972:	7afb      	ldrb	r3, [r7, #11]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d10f      	bne.n	8007998 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800797e:	461a      	mov	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007992:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007996:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	371c      	adds	r7, #28
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	4f54300a 	.word	0x4f54300a

080079ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	3301      	adds	r3, #1
 80079bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	4a13      	ldr	r2, [pc, #76]	; (8007a10 <USB_CoreReset+0x64>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d901      	bls.n	80079ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e01b      	b.n	8007a02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	daf2      	bge.n	80079b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f043 0201 	orr.w	r2, r3, #1
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3301      	adds	r3, #1
 80079e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4a09      	ldr	r2, [pc, #36]	; (8007a10 <USB_CoreReset+0x64>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d901      	bls.n	80079f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e006      	b.n	8007a02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d0f0      	beq.n	80079e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	00030d40 	.word	0x00030d40

08007a14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a20:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a24:	f002 fc94 	bl	800a350 <USBD_static_malloc>
 8007a28:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d109      	bne.n	8007a44 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	32b0      	adds	r2, #176	; 0xb0
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007a40:	2302      	movs	r3, #2
 8007a42:	e0d4      	b.n	8007bee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007a44:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007a48:	2100      	movs	r1, #0
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f002 fcee 	bl	800a42c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	32b0      	adds	r2, #176	; 0xb0
 8007a5a:	68f9      	ldr	r1, [r7, #12]
 8007a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	32b0      	adds	r2, #176	; 0xb0
 8007a6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	7c1b      	ldrb	r3, [r3, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d138      	bne.n	8007aee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a7c:	4b5e      	ldr	r3, [pc, #376]	; (8007bf8 <USBD_CDC_Init+0x1e4>)
 8007a7e:	7819      	ldrb	r1, [r3, #0]
 8007a80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a84:	2202      	movs	r2, #2
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f002 fb3f 	bl	800a10a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a8c:	4b5a      	ldr	r3, [pc, #360]	; (8007bf8 <USBD_CDC_Init+0x1e4>)
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	f003 020f 	and.w	r2, r3, #15
 8007a94:	6879      	ldr	r1, [r7, #4]
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	440b      	add	r3, r1
 8007aa0:	3324      	adds	r3, #36	; 0x24
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007aa6:	4b55      	ldr	r3, [pc, #340]	; (8007bfc <USBD_CDC_Init+0x1e8>)
 8007aa8:	7819      	ldrb	r1, [r3, #0]
 8007aaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007aae:	2202      	movs	r2, #2
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f002 fb2a 	bl	800a10a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007ab6:	4b51      	ldr	r3, [pc, #324]	; (8007bfc <USBD_CDC_Init+0x1e8>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	f003 020f 	and.w	r2, r3, #15
 8007abe:	6879      	ldr	r1, [r7, #4]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	440b      	add	r3, r1
 8007aca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ace:	2201      	movs	r2, #1
 8007ad0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007ad2:	4b4b      	ldr	r3, [pc, #300]	; (8007c00 <USBD_CDC_Init+0x1ec>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	f003 020f 	and.w	r2, r3, #15
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	4613      	mov	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	440b      	add	r3, r1
 8007ae6:	3326      	adds	r3, #38	; 0x26
 8007ae8:	2210      	movs	r2, #16
 8007aea:	801a      	strh	r2, [r3, #0]
 8007aec:	e035      	b.n	8007b5a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007aee:	4b42      	ldr	r3, [pc, #264]	; (8007bf8 <USBD_CDC_Init+0x1e4>)
 8007af0:	7819      	ldrb	r1, [r3, #0]
 8007af2:	2340      	movs	r3, #64	; 0x40
 8007af4:	2202      	movs	r2, #2
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f002 fb07 	bl	800a10a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007afc:	4b3e      	ldr	r3, [pc, #248]	; (8007bf8 <USBD_CDC_Init+0x1e4>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	f003 020f 	and.w	r2, r3, #15
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	440b      	add	r3, r1
 8007b10:	3324      	adds	r3, #36	; 0x24
 8007b12:	2201      	movs	r2, #1
 8007b14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b16:	4b39      	ldr	r3, [pc, #228]	; (8007bfc <USBD_CDC_Init+0x1e8>)
 8007b18:	7819      	ldrb	r1, [r3, #0]
 8007b1a:	2340      	movs	r3, #64	; 0x40
 8007b1c:	2202      	movs	r2, #2
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f002 faf3 	bl	800a10a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b24:	4b35      	ldr	r3, [pc, #212]	; (8007bfc <USBD_CDC_Init+0x1e8>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	f003 020f 	and.w	r2, r3, #15
 8007b2c:	6879      	ldr	r1, [r7, #4]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	440b      	add	r3, r1
 8007b38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007b40:	4b2f      	ldr	r3, [pc, #188]	; (8007c00 <USBD_CDC_Init+0x1ec>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	f003 020f 	and.w	r2, r3, #15
 8007b48:	6879      	ldr	r1, [r7, #4]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	440b      	add	r3, r1
 8007b54:	3326      	adds	r3, #38	; 0x26
 8007b56:	2210      	movs	r2, #16
 8007b58:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b5a:	4b29      	ldr	r3, [pc, #164]	; (8007c00 <USBD_CDC_Init+0x1ec>)
 8007b5c:	7819      	ldrb	r1, [r3, #0]
 8007b5e:	2308      	movs	r3, #8
 8007b60:	2203      	movs	r2, #3
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f002 fad1 	bl	800a10a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007b68:	4b25      	ldr	r3, [pc, #148]	; (8007c00 <USBD_CDC_Init+0x1ec>)
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	f003 020f 	and.w	r2, r3, #15
 8007b70:	6879      	ldr	r1, [r7, #4]
 8007b72:	4613      	mov	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	440b      	add	r3, r1
 8007b7c:	3324      	adds	r3, #36	; 0x24
 8007b7e:	2201      	movs	r2, #1
 8007b80:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	33b0      	adds	r3, #176	; 0xb0
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007bb8:	2302      	movs	r3, #2
 8007bba:	e018      	b.n	8007bee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	7c1b      	ldrb	r3, [r3, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10a      	bne.n	8007bda <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bc4:	4b0d      	ldr	r3, [pc, #52]	; (8007bfc <USBD_CDC_Init+0x1e8>)
 8007bc6:	7819      	ldrb	r1, [r3, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f002 fb88 	bl	800a2e8 <USBD_LL_PrepareReceive>
 8007bd8:	e008      	b.n	8007bec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bda:	4b08      	ldr	r3, [pc, #32]	; (8007bfc <USBD_CDC_Init+0x1e8>)
 8007bdc:	7819      	ldrb	r1, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007be4:	2340      	movs	r3, #64	; 0x40
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f002 fb7e 	bl	800a2e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	200000bb 	.word	0x200000bb
 8007bfc:	200000bc 	.word	0x200000bc
 8007c00:	200000bd 	.word	0x200000bd

08007c04 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007c10:	4b3a      	ldr	r3, [pc, #232]	; (8007cfc <USBD_CDC_DeInit+0xf8>)
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f002 fa9d 	bl	800a156 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007c1c:	4b37      	ldr	r3, [pc, #220]	; (8007cfc <USBD_CDC_DeInit+0xf8>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	f003 020f 	and.w	r2, r3, #15
 8007c24:	6879      	ldr	r1, [r7, #4]
 8007c26:	4613      	mov	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	440b      	add	r3, r1
 8007c30:	3324      	adds	r3, #36	; 0x24
 8007c32:	2200      	movs	r2, #0
 8007c34:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007c36:	4b32      	ldr	r3, [pc, #200]	; (8007d00 <USBD_CDC_DeInit+0xfc>)
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f002 fa8a 	bl	800a156 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007c42:	4b2f      	ldr	r3, [pc, #188]	; (8007d00 <USBD_CDC_DeInit+0xfc>)
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	f003 020f 	and.w	r2, r3, #15
 8007c4a:	6879      	ldr	r1, [r7, #4]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	440b      	add	r3, r1
 8007c56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007c5e:	4b29      	ldr	r3, [pc, #164]	; (8007d04 <USBD_CDC_DeInit+0x100>)
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f002 fa76 	bl	800a156 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007c6a:	4b26      	ldr	r3, [pc, #152]	; (8007d04 <USBD_CDC_DeInit+0x100>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	f003 020f 	and.w	r2, r3, #15
 8007c72:	6879      	ldr	r1, [r7, #4]
 8007c74:	4613      	mov	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	440b      	add	r3, r1
 8007c7e:	3324      	adds	r3, #36	; 0x24
 8007c80:	2200      	movs	r2, #0
 8007c82:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007c84:	4b1f      	ldr	r3, [pc, #124]	; (8007d04 <USBD_CDC_DeInit+0x100>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	f003 020f 	and.w	r2, r3, #15
 8007c8c:	6879      	ldr	r1, [r7, #4]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	440b      	add	r3, r1
 8007c98:	3326      	adds	r3, #38	; 0x26
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	32b0      	adds	r2, #176	; 0xb0
 8007ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d01f      	beq.n	8007cf0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	33b0      	adds	r3, #176	; 0xb0
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	32b0      	adds	r2, #176	; 0xb0
 8007cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f002 fb4a 	bl	800a36c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	32b0      	adds	r2, #176	; 0xb0
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	200000bb 	.word	0x200000bb
 8007d00:	200000bc 	.word	0x200000bc
 8007d04:	200000bd 	.word	0x200000bd

08007d08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	32b0      	adds	r2, #176	; 0xb0
 8007d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d20:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007d22:	2300      	movs	r3, #0
 8007d24:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d101      	bne.n	8007d38 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e0bf      	b.n	8007eb8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d050      	beq.n	8007de6 <USBD_CDC_Setup+0xde>
 8007d44:	2b20      	cmp	r3, #32
 8007d46:	f040 80af 	bne.w	8007ea8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	88db      	ldrh	r3, [r3, #6]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d03a      	beq.n	8007dc8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	b25b      	sxtb	r3, r3
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	da1b      	bge.n	8007d94 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	33b0      	adds	r3, #176	; 0xb0
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007d72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d74:	683a      	ldr	r2, [r7, #0]
 8007d76:	88d2      	ldrh	r2, [r2, #6]
 8007d78:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	88db      	ldrh	r3, [r3, #6]
 8007d7e:	2b07      	cmp	r3, #7
 8007d80:	bf28      	it	cs
 8007d82:	2307      	movcs	r3, #7
 8007d84:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	89fa      	ldrh	r2, [r7, #14]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f001 fd89 	bl	80098a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007d92:	e090      	b.n	8007eb6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	785a      	ldrb	r2, [r3, #1]
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	88db      	ldrh	r3, [r3, #6]
 8007da2:	2b3f      	cmp	r3, #63	; 0x3f
 8007da4:	d803      	bhi.n	8007dae <USBD_CDC_Setup+0xa6>
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	88db      	ldrh	r3, [r3, #6]
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	e000      	b.n	8007db0 <USBD_CDC_Setup+0xa8>
 8007dae:	2240      	movs	r2, #64	; 0x40
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007db6:	6939      	ldr	r1, [r7, #16]
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 fd9b 	bl	80098fc <USBD_CtlPrepareRx>
      break;
 8007dc6:	e076      	b.n	8007eb6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	33b0      	adds	r3, #176	; 0xb0
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	7850      	ldrb	r0, [r2, #1]
 8007dde:	2200      	movs	r2, #0
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	4798      	blx	r3
      break;
 8007de4:	e067      	b.n	8007eb6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	785b      	ldrb	r3, [r3, #1]
 8007dea:	2b0b      	cmp	r3, #11
 8007dec:	d851      	bhi.n	8007e92 <USBD_CDC_Setup+0x18a>
 8007dee:	a201      	add	r2, pc, #4	; (adr r2, 8007df4 <USBD_CDC_Setup+0xec>)
 8007df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df4:	08007e25 	.word	0x08007e25
 8007df8:	08007ea1 	.word	0x08007ea1
 8007dfc:	08007e93 	.word	0x08007e93
 8007e00:	08007e93 	.word	0x08007e93
 8007e04:	08007e93 	.word	0x08007e93
 8007e08:	08007e93 	.word	0x08007e93
 8007e0c:	08007e93 	.word	0x08007e93
 8007e10:	08007e93 	.word	0x08007e93
 8007e14:	08007e93 	.word	0x08007e93
 8007e18:	08007e93 	.word	0x08007e93
 8007e1c:	08007e4f 	.word	0x08007e4f
 8007e20:	08007e79 	.word	0x08007e79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b03      	cmp	r3, #3
 8007e2e:	d107      	bne.n	8007e40 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e30:	f107 030a 	add.w	r3, r7, #10
 8007e34:	2202      	movs	r2, #2
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f001 fd33 	bl	80098a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e3e:	e032      	b.n	8007ea6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f001 fcbd 	bl	80097c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	75fb      	strb	r3, [r7, #23]
          break;
 8007e4c:	e02b      	b.n	8007ea6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d107      	bne.n	8007e6a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e5a:	f107 030d 	add.w	r3, r7, #13
 8007e5e:	2201      	movs	r2, #1
 8007e60:	4619      	mov	r1, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f001 fd1e 	bl	80098a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e68:	e01d      	b.n	8007ea6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f001 fca8 	bl	80097c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e72:	2303      	movs	r3, #3
 8007e74:	75fb      	strb	r3, [r7, #23]
          break;
 8007e76:	e016      	b.n	8007ea6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d00f      	beq.n	8007ea4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f001 fc9b 	bl	80097c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e90:	e008      	b.n	8007ea4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 fc94 	bl	80097c2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e9e:	e002      	b.n	8007ea6 <USBD_CDC_Setup+0x19e>
          break;
 8007ea0:	bf00      	nop
 8007ea2:	e008      	b.n	8007eb6 <USBD_CDC_Setup+0x1ae>
          break;
 8007ea4:	bf00      	nop
      }
      break;
 8007ea6:	e006      	b.n	8007eb6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f001 fc89 	bl	80097c2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8007eb4:	bf00      	nop
  }

  return (uint8_t)ret;
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ed2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	32b0      	adds	r2, #176	; 0xb0
 8007ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e065      	b.n	8007fb6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	32b0      	adds	r2, #176	; 0xb0
 8007ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	f003 020f 	and.w	r2, r3, #15
 8007f00:	6879      	ldr	r1, [r7, #4]
 8007f02:	4613      	mov	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	440b      	add	r3, r1
 8007f0c:	3318      	adds	r3, #24
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d02f      	beq.n	8007f74 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	f003 020f 	and.w	r2, r3, #15
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	440b      	add	r3, r1
 8007f26:	3318      	adds	r3, #24
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	78fb      	ldrb	r3, [r7, #3]
 8007f2c:	f003 010f 	and.w	r1, r3, #15
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	460b      	mov	r3, r1
 8007f34:	00db      	lsls	r3, r3, #3
 8007f36:	440b      	add	r3, r1
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4403      	add	r3, r0
 8007f3c:	3348      	adds	r3, #72	; 0x48
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f44:	fb01 f303 	mul.w	r3, r1, r3
 8007f48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d112      	bne.n	8007f74 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007f4e:	78fb      	ldrb	r3, [r7, #3]
 8007f50:	f003 020f 	and.w	r2, r3, #15
 8007f54:	6879      	ldr	r1, [r7, #4]
 8007f56:	4613      	mov	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	440b      	add	r3, r1
 8007f60:	3318      	adds	r3, #24
 8007f62:	2200      	movs	r2, #0
 8007f64:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f66:	78f9      	ldrb	r1, [r7, #3]
 8007f68:	2300      	movs	r3, #0
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f002 f99a 	bl	800a2a6 <USBD_LL_Transmit>
 8007f72:	e01f      	b.n	8007fb4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	33b0      	adds	r3, #176	; 0xb0
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d010      	beq.n	8007fb4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	33b0      	adds	r3, #176	; 0xb0
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007fb0:	78fa      	ldrb	r2, [r7, #3]
 8007fb2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b084      	sub	sp, #16
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	32b0      	adds	r2, #176	; 0xb0
 8007fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	32b0      	adds	r2, #176	; 0xb0
 8007fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e01a      	b.n	8008026 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007ff0:	78fb      	ldrb	r3, [r7, #3]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f002 f998 	bl	800a32a <USBD_LL_GetRxDataSize>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	33b0      	adds	r3, #176	; 0xb0
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008020:	4611      	mov	r1, r2
 8008022:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	32b0      	adds	r2, #176	; 0xb0
 8008040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008044:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800804c:	2303      	movs	r3, #3
 800804e:	e025      	b.n	800809c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	33b0      	adds	r3, #176	; 0xb0
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d01a      	beq.n	800809a <USBD_CDC_EP0_RxReady+0x6c>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800806a:	2bff      	cmp	r3, #255	; 0xff
 800806c:	d015      	beq.n	800809a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	33b0      	adds	r3, #176	; 0xb0
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008086:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800808e:	b292      	uxth	r2, r2
 8008090:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	22ff      	movs	r2, #255	; 0xff
 8008096:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80080ac:	2182      	movs	r1, #130	; 0x82
 80080ae:	4818      	ldr	r0, [pc, #96]	; (8008110 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080b0:	f000 fd4f 	bl	8008b52 <USBD_GetEpDesc>
 80080b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080b6:	2101      	movs	r1, #1
 80080b8:	4815      	ldr	r0, [pc, #84]	; (8008110 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080ba:	f000 fd4a 	bl	8008b52 <USBD_GetEpDesc>
 80080be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80080c0:	2181      	movs	r1, #129	; 0x81
 80080c2:	4813      	ldr	r0, [pc, #76]	; (8008110 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080c4:	f000 fd45 	bl	8008b52 <USBD_GetEpDesc>
 80080c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	2210      	movs	r2, #16
 80080d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d006      	beq.n	80080ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	2200      	movs	r2, #0
 80080e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080e4:	711a      	strb	r2, [r3, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d006      	beq.n	80080fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080f8:	711a      	strb	r2, [r3, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2243      	movs	r2, #67	; 0x43
 8008102:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008104:	4b02      	ldr	r3, [pc, #8]	; (8008110 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20000078 	.word	0x20000078

08008114 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800811c:	2182      	movs	r1, #130	; 0x82
 800811e:	4818      	ldr	r0, [pc, #96]	; (8008180 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008120:	f000 fd17 	bl	8008b52 <USBD_GetEpDesc>
 8008124:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008126:	2101      	movs	r1, #1
 8008128:	4815      	ldr	r0, [pc, #84]	; (8008180 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800812a:	f000 fd12 	bl	8008b52 <USBD_GetEpDesc>
 800812e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008130:	2181      	movs	r1, #129	; 0x81
 8008132:	4813      	ldr	r0, [pc, #76]	; (8008180 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008134:	f000 fd0d 	bl	8008b52 <USBD_GetEpDesc>
 8008138:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	2210      	movs	r2, #16
 8008144:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d006      	beq.n	800815a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	2200      	movs	r2, #0
 8008150:	711a      	strb	r2, [r3, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f042 0202 	orr.w	r2, r2, #2
 8008158:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d006      	beq.n	800816e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	711a      	strb	r2, [r3, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	f042 0202 	orr.w	r2, r2, #2
 800816c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2243      	movs	r2, #67	; 0x43
 8008172:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008174:	4b02      	ldr	r3, [pc, #8]	; (8008180 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008176:	4618      	mov	r0, r3
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20000078 	.word	0x20000078

08008184 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800818c:	2182      	movs	r1, #130	; 0x82
 800818e:	4818      	ldr	r0, [pc, #96]	; (80081f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008190:	f000 fcdf 	bl	8008b52 <USBD_GetEpDesc>
 8008194:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008196:	2101      	movs	r1, #1
 8008198:	4815      	ldr	r0, [pc, #84]	; (80081f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800819a:	f000 fcda 	bl	8008b52 <USBD_GetEpDesc>
 800819e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081a0:	2181      	movs	r1, #129	; 0x81
 80081a2:	4813      	ldr	r0, [pc, #76]	; (80081f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80081a4:	f000 fcd5 	bl	8008b52 <USBD_GetEpDesc>
 80081a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	2210      	movs	r2, #16
 80081b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d006      	beq.n	80081ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	2200      	movs	r2, #0
 80081c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081c4:	711a      	strb	r2, [r3, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d006      	beq.n	80081de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081d8:	711a      	strb	r2, [r3, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2243      	movs	r2, #67	; 0x43
 80081e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081e4:	4b02      	ldr	r3, [pc, #8]	; (80081f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3718      	adds	r7, #24
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	20000078 	.word	0x20000078

080081f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	220a      	movs	r2, #10
 8008200:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008202:	4b03      	ldr	r3, [pc, #12]	; (8008210 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008204:	4618      	mov	r0, r3
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	20000034 	.word	0x20000034

08008214 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008224:	2303      	movs	r3, #3
 8008226:	e009      	b.n	800823c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	33b0      	adds	r3, #176	; 0xb0
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008248:	b480      	push	{r7}
 800824a:	b087      	sub	sp, #28
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	32b0      	adds	r2, #176	; 0xb0
 800825e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008262:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800826a:	2303      	movs	r3, #3
 800826c:	e008      	b.n	8008280 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	371c      	adds	r7, #28
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	32b0      	adds	r2, #176	; 0xb0
 80082a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e004      	b.n	80082ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
	...

080082c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	32b0      	adds	r2, #176	; 0xb0
 80082da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082de:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80082e0:	2301      	movs	r3, #1
 80082e2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	32b0      	adds	r2, #176	; 0xb0
 80082ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e025      	b.n	8008346 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008300:	2b00      	cmp	r3, #0
 8008302:	d11f      	bne.n	8008344 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2201      	movs	r2, #1
 8008308:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800830c:	4b10      	ldr	r3, [pc, #64]	; (8008350 <USBD_CDC_TransmitPacket+0x88>)
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	f003 020f 	and.w	r2, r3, #15
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4613      	mov	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4403      	add	r3, r0
 8008326:	3318      	adds	r3, #24
 8008328:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800832a:	4b09      	ldr	r3, [pc, #36]	; (8008350 <USBD_CDC_TransmitPacket+0x88>)
 800832c:	7819      	ldrb	r1, [r3, #0]
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f001 ffb3 	bl	800a2a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008344:	7bfb      	ldrb	r3, [r7, #15]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	200000bb 	.word	0x200000bb

08008354 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	32b0      	adds	r2, #176	; 0xb0
 8008366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	32b0      	adds	r2, #176	; 0xb0
 8008376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800837e:	2303      	movs	r3, #3
 8008380:	e018      	b.n	80083b4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	7c1b      	ldrb	r3, [r3, #16]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10a      	bne.n	80083a0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800838a:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <USBD_CDC_ReceivePacket+0x68>)
 800838c:	7819      	ldrb	r1, [r3, #0]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008394:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 ffa5 	bl	800a2e8 <USBD_LL_PrepareReceive>
 800839e:	e008      	b.n	80083b2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083a0:	4b06      	ldr	r3, [pc, #24]	; (80083bc <USBD_CDC_ReceivePacket+0x68>)
 80083a2:	7819      	ldrb	r1, [r3, #0]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083aa:	2340      	movs	r3, #64	; 0x40
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f001 ff9b 	bl	800a2e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	200000bc 	.word	0x200000bc

080083c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	4613      	mov	r3, r2
 80083cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d101      	bne.n	80083d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e01f      	b.n	8008418 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	79fa      	ldrb	r2, [r7, #7]
 800840a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f001 fe15 	bl	800a03c <USBD_LL_Init>
 8008412:	4603      	mov	r3, r0
 8008414:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008416:	7dfb      	ldrb	r3, [r7, #23]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3718      	adds	r7, #24
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d101      	bne.n	8008438 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008434:	2303      	movs	r3, #3
 8008436:	e025      	b.n	8008484 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	683a      	ldr	r2, [r7, #0]
 800843c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	32ae      	adds	r2, #174	; 0xae
 800844a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00f      	beq.n	8008474 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	32ae      	adds	r2, #174	; 0xae
 800845e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008464:	f107 020e 	add.w	r2, r7, #14
 8008468:	4610      	mov	r0, r2
 800846a:	4798      	blx	r3
 800846c:	4602      	mov	r2, r0
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800847a:	1c5a      	adds	r2, r3, #1
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f001 fe1d 	bl	800a0d4 <USBD_LL_Start>
 800849a:	4603      	mov	r3, r0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	460b      	mov	r3, r1
 80084c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d009      	beq.n	80084e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	78fa      	ldrb	r2, [r7, #3]
 80084de:	4611      	mov	r1, r2
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	4798      	blx	r3
 80084e4:	4603      	mov	r3, r0
 80084e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	460b      	mov	r3, r1
 80084fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	78fa      	ldrb	r2, [r7, #3]
 800850c:	4611      	mov	r1, r2
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	4798      	blx	r3
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d001      	beq.n	800851c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008518:	2303      	movs	r3, #3
 800851a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800851c:	7bfb      	ldrb	r3, [r7, #15]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b084      	sub	sp, #16
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
 800852e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	4618      	mov	r0, r3
 800853a:	f001 f908 	bl	800974e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800854c:	461a      	mov	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800855a:	f003 031f 	and.w	r3, r3, #31
 800855e:	2b02      	cmp	r3, #2
 8008560:	d01a      	beq.n	8008598 <USBD_LL_SetupStage+0x72>
 8008562:	2b02      	cmp	r3, #2
 8008564:	d822      	bhi.n	80085ac <USBD_LL_SetupStage+0x86>
 8008566:	2b00      	cmp	r3, #0
 8008568:	d002      	beq.n	8008570 <USBD_LL_SetupStage+0x4a>
 800856a:	2b01      	cmp	r3, #1
 800856c:	d00a      	beq.n	8008584 <USBD_LL_SetupStage+0x5e>
 800856e:	e01d      	b.n	80085ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fb5f 	bl	8008c3c <USBD_StdDevReq>
 800857e:	4603      	mov	r3, r0
 8008580:	73fb      	strb	r3, [r7, #15]
      break;
 8008582:	e020      	b.n	80085c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fbc7 	bl	8008d20 <USBD_StdItfReq>
 8008592:	4603      	mov	r3, r0
 8008594:	73fb      	strb	r3, [r7, #15]
      break;
 8008596:	e016      	b.n	80085c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fc29 	bl	8008df8 <USBD_StdEPReq>
 80085a6:	4603      	mov	r3, r0
 80085a8:	73fb      	strb	r3, [r7, #15]
      break;
 80085aa:	e00c      	b.n	80085c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80085b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	4619      	mov	r1, r3
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f001 fdea 	bl	800a194 <USBD_LL_StallEP>
 80085c0:	4603      	mov	r3, r0
 80085c2:	73fb      	strb	r3, [r7, #15]
      break;
 80085c4:	bf00      	nop
  }

  return ret;
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	460b      	mov	r3, r1
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80085e2:	7afb      	ldrb	r3, [r7, #11]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d16e      	bne.n	80086c6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80085ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	f040 8098 	bne.w	800872c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	689a      	ldr	r2, [r3, #8]
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	429a      	cmp	r2, r3
 8008606:	d913      	bls.n	8008630 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	689a      	ldr	r2, [r3, #8]
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	1ad2      	subs	r2, r2, r3
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	68da      	ldr	r2, [r3, #12]
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	4293      	cmp	r3, r2
 8008620:	bf28      	it	cs
 8008622:	4613      	movcs	r3, r2
 8008624:	461a      	mov	r2, r3
 8008626:	6879      	ldr	r1, [r7, #4]
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f001 f984 	bl	8009936 <USBD_CtlContinueRx>
 800862e:	e07d      	b.n	800872c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008636:	f003 031f 	and.w	r3, r3, #31
 800863a:	2b02      	cmp	r3, #2
 800863c:	d014      	beq.n	8008668 <USBD_LL_DataOutStage+0x98>
 800863e:	2b02      	cmp	r3, #2
 8008640:	d81d      	bhi.n	800867e <USBD_LL_DataOutStage+0xae>
 8008642:	2b00      	cmp	r3, #0
 8008644:	d002      	beq.n	800864c <USBD_LL_DataOutStage+0x7c>
 8008646:	2b01      	cmp	r3, #1
 8008648:	d003      	beq.n	8008652 <USBD_LL_DataOutStage+0x82>
 800864a:	e018      	b.n	800867e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800864c:	2300      	movs	r3, #0
 800864e:	75bb      	strb	r3, [r7, #22]
            break;
 8008650:	e018      	b.n	8008684 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008658:	b2db      	uxtb	r3, r3
 800865a:	4619      	mov	r1, r3
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 fa5e 	bl	8008b1e <USBD_CoreFindIF>
 8008662:	4603      	mov	r3, r0
 8008664:	75bb      	strb	r3, [r7, #22]
            break;
 8008666:	e00d      	b.n	8008684 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800866e:	b2db      	uxtb	r3, r3
 8008670:	4619      	mov	r1, r3
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 fa60 	bl	8008b38 <USBD_CoreFindEP>
 8008678:	4603      	mov	r3, r0
 800867a:	75bb      	strb	r3, [r7, #22]
            break;
 800867c:	e002      	b.n	8008684 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	75bb      	strb	r3, [r7, #22]
            break;
 8008682:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008684:	7dbb      	ldrb	r3, [r7, #22]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d119      	bne.n	80086be <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b03      	cmp	r3, #3
 8008694:	d113      	bne.n	80086be <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008696:	7dba      	ldrb	r2, [r7, #22]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	32ae      	adds	r2, #174	; 0xae
 800869c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00b      	beq.n	80086be <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80086a6:	7dba      	ldrb	r2, [r7, #22]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80086ae:	7dba      	ldrb	r2, [r7, #22]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	32ae      	adds	r2, #174	; 0xae
 80086b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f001 f94a 	bl	8009958 <USBD_CtlSendStatus>
 80086c4:	e032      	b.n	800872c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80086c6:	7afb      	ldrb	r3, [r7, #11]
 80086c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	4619      	mov	r1, r3
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 fa31 	bl	8008b38 <USBD_CoreFindEP>
 80086d6:	4603      	mov	r3, r0
 80086d8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086da:	7dbb      	ldrb	r3, [r7, #22]
 80086dc:	2bff      	cmp	r3, #255	; 0xff
 80086de:	d025      	beq.n	800872c <USBD_LL_DataOutStage+0x15c>
 80086e0:	7dbb      	ldrb	r3, [r7, #22]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d122      	bne.n	800872c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d117      	bne.n	8008722 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80086f2:	7dba      	ldrb	r2, [r7, #22]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	32ae      	adds	r2, #174	; 0xae
 80086f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00f      	beq.n	8008722 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008702:	7dba      	ldrb	r2, [r7, #22]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800870a:	7dba      	ldrb	r2, [r7, #22]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	32ae      	adds	r2, #174	; 0xae
 8008710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	7afa      	ldrb	r2, [r7, #11]
 8008718:	4611      	mov	r1, r2
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	4798      	blx	r3
 800871e:	4603      	mov	r3, r0
 8008720:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d001      	beq.n	800872c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008728:	7dfb      	ldrb	r3, [r7, #23]
 800872a:	e000      	b.n	800872e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b086      	sub	sp, #24
 800873a:	af00      	add	r7, sp, #0
 800873c:	60f8      	str	r0, [r7, #12]
 800873e:	460b      	mov	r3, r1
 8008740:	607a      	str	r2, [r7, #4]
 8008742:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008744:	7afb      	ldrb	r3, [r7, #11]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d16f      	bne.n	800882a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	3314      	adds	r3, #20
 800874e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008756:	2b02      	cmp	r3, #2
 8008758:	d15a      	bne.n	8008810 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	689a      	ldr	r2, [r3, #8]
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	429a      	cmp	r2, r3
 8008764:	d914      	bls.n	8008790 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	689a      	ldr	r2, [r3, #8]
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	1ad2      	subs	r2, r2, r3
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	461a      	mov	r2, r3
 800877a:	6879      	ldr	r1, [r7, #4]
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f001 f8ac 	bl	80098da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008782:	2300      	movs	r3, #0
 8008784:	2200      	movs	r2, #0
 8008786:	2100      	movs	r1, #0
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f001 fdad 	bl	800a2e8 <USBD_LL_PrepareReceive>
 800878e:	e03f      	b.n	8008810 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	68da      	ldr	r2, [r3, #12]
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	429a      	cmp	r2, r3
 800879a:	d11c      	bne.n	80087d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	685a      	ldr	r2, [r3, #4]
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d316      	bcc.n	80087d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d20f      	bcs.n	80087d6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80087b6:	2200      	movs	r2, #0
 80087b8:	2100      	movs	r1, #0
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f001 f88d 	bl	80098da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087c8:	2300      	movs	r3, #0
 80087ca:	2200      	movs	r2, #0
 80087cc:	2100      	movs	r1, #0
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	f001 fd8a 	bl	800a2e8 <USBD_LL_PrepareReceive>
 80087d4:	e01c      	b.n	8008810 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d10f      	bne.n	8008802 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d009      	beq.n	8008802 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008802:	2180      	movs	r1, #128	; 0x80
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f001 fcc5 	bl	800a194 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f001 f8b7 	bl	800997e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d03a      	beq.n	8008890 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f7ff fe42 	bl	80084a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008828:	e032      	b.n	8008890 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800882a:	7afb      	ldrb	r3, [r7, #11]
 800882c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008830:	b2db      	uxtb	r3, r3
 8008832:	4619      	mov	r1, r3
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f000 f97f 	bl	8008b38 <USBD_CoreFindEP>
 800883a:	4603      	mov	r3, r0
 800883c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800883e:	7dfb      	ldrb	r3, [r7, #23]
 8008840:	2bff      	cmp	r3, #255	; 0xff
 8008842:	d025      	beq.n	8008890 <USBD_LL_DataInStage+0x15a>
 8008844:	7dfb      	ldrb	r3, [r7, #23]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d122      	bne.n	8008890 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b03      	cmp	r3, #3
 8008854:	d11c      	bne.n	8008890 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008856:	7dfa      	ldrb	r2, [r7, #23]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	32ae      	adds	r2, #174	; 0xae
 800885c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d014      	beq.n	8008890 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008866:	7dfa      	ldrb	r2, [r7, #23]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800886e:	7dfa      	ldrb	r2, [r7, #23]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	32ae      	adds	r2, #174	; 0xae
 8008874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	7afa      	ldrb	r2, [r7, #11]
 800887c:	4611      	mov	r1, r2
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	4798      	blx	r3
 8008882:	4603      	mov	r3, r0
 8008884:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008886:	7dbb      	ldrb	r3, [r7, #22]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800888c:	7dbb      	ldrb	r3, [r7, #22]
 800888e:	e000      	b.n	8008892 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3718      	adds	r7, #24
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b084      	sub	sp, #16
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d014      	beq.n	8008900 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00e      	beq.n	8008900 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	6852      	ldr	r2, [r2, #4]
 80088ee:	b2d2      	uxtb	r2, r2
 80088f0:	4611      	mov	r1, r2
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	4798      	blx	r3
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d001      	beq.n	8008900 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80088fc:	2303      	movs	r3, #3
 80088fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008900:	2340      	movs	r3, #64	; 0x40
 8008902:	2200      	movs	r2, #0
 8008904:	2100      	movs	r1, #0
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f001 fbff 	bl	800a10a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2240      	movs	r2, #64	; 0x40
 8008918:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800891c:	2340      	movs	r3, #64	; 0x40
 800891e:	2200      	movs	r2, #0
 8008920:	2180      	movs	r1, #128	; 0x80
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f001 fbf1 	bl	800a10a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2240      	movs	r2, #64	; 0x40
 8008932:	621a      	str	r2, [r3, #32]

  return ret;
 8008934:	7bfb      	ldrb	r3, [r7, #15]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	460b      	mov	r3, r1
 8008948:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	78fa      	ldrb	r2, [r7, #3]
 800894e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800896c:	b2da      	uxtb	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2204      	movs	r2, #4
 8008978:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800898a:	b480      	push	{r7}
 800898c:	b083      	sub	sp, #12
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b04      	cmp	r3, #4
 800899c:	d106      	bne.n	80089ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80089a4:	b2da      	uxtb	r2, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b082      	sub	sp, #8
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d110      	bne.n	80089f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00b      	beq.n	80089f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089de:	69db      	ldr	r3, [r3, #28]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d005      	beq.n	80089f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ea:	69db      	ldr	r3, [r3, #28]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b082      	sub	sp, #8
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	460b      	mov	r3, r1
 8008a04:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	32ae      	adds	r2, #174	; 0xae
 8008a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d101      	bne.n	8008a1c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	e01c      	b.n	8008a56 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	2b03      	cmp	r3, #3
 8008a26:	d115      	bne.n	8008a54 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	32ae      	adds	r2, #174	; 0xae
 8008a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a36:	6a1b      	ldr	r3, [r3, #32]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00b      	beq.n	8008a54 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	32ae      	adds	r2, #174	; 0xae
 8008a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a4a:	6a1b      	ldr	r3, [r3, #32]
 8008a4c:	78fa      	ldrb	r2, [r7, #3]
 8008a4e:	4611      	mov	r1, r2
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b082      	sub	sp, #8
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	460b      	mov	r3, r1
 8008a68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	32ae      	adds	r2, #174	; 0xae
 8008a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	e01c      	b.n	8008aba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d115      	bne.n	8008ab8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	32ae      	adds	r2, #174	; 0xae
 8008a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00b      	beq.n	8008ab8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	32ae      	adds	r2, #174	; 0xae
 8008aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab0:	78fa      	ldrb	r2, [r7, #3]
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b083      	sub	sp, #12
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00e      	beq.n	8008b14 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	6852      	ldr	r2, [r2, #4]
 8008b02:	b2d2      	uxtb	r2, r2
 8008b04:	4611      	mov	r1, r2
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	4798      	blx	r3
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008b10:	2303      	movs	r3, #3
 8008b12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
 8008b26:	460b      	mov	r3, r1
 8008b28:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008b2a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008b44:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr

08008b52 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b086      	sub	sp, #24
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	885b      	ldrh	r3, [r3, #2]
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d920      	bls.n	8008bbc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008b82:	e013      	b.n	8008bac <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008b84:	f107 030a 	add.w	r3, r7, #10
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6978      	ldr	r0, [r7, #20]
 8008b8c:	f000 f81b 	bl	8008bc6 <USBD_GetNextDesc>
 8008b90:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	785b      	ldrb	r3, [r3, #1]
 8008b96:	2b05      	cmp	r3, #5
 8008b98:	d108      	bne.n	8008bac <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	789b      	ldrb	r3, [r3, #2]
 8008ba2:	78fa      	ldrb	r2, [r7, #3]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d008      	beq.n	8008bba <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	885b      	ldrh	r3, [r3, #2]
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	897b      	ldrh	r3, [r7, #10]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d8e5      	bhi.n	8008b84 <USBD_GetEpDesc+0x32>
 8008bb8:	e000      	b.n	8008bbc <USBD_GetEpDesc+0x6a>
          break;
 8008bba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008bbc:	693b      	ldr	r3, [r7, #16]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3718      	adds	r7, #24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b085      	sub	sp, #20
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	881a      	ldrh	r2, [r3, #0]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	4413      	add	r3, r2
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4413      	add	r3, r2
 8008bf0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b087      	sub	sp, #28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	3301      	adds	r3, #1
 8008c16:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008c1e:	8a3b      	ldrh	r3, [r7, #16]
 8008c20:	021b      	lsls	r3, r3, #8
 8008c22:	b21a      	sxth	r2, r3
 8008c24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	b21b      	sxth	r3, r3
 8008c2c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008c2e:	89fb      	ldrh	r3, [r7, #14]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	371c      	adds	r7, #28
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c52:	2b40      	cmp	r3, #64	; 0x40
 8008c54:	d005      	beq.n	8008c62 <USBD_StdDevReq+0x26>
 8008c56:	2b40      	cmp	r3, #64	; 0x40
 8008c58:	d857      	bhi.n	8008d0a <USBD_StdDevReq+0xce>
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00f      	beq.n	8008c7e <USBD_StdDevReq+0x42>
 8008c5e:	2b20      	cmp	r3, #32
 8008c60:	d153      	bne.n	8008d0a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	32ae      	adds	r2, #174	; 0xae
 8008c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	4798      	blx	r3
 8008c78:	4603      	mov	r3, r0
 8008c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c7c:	e04a      	b.n	8008d14 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	785b      	ldrb	r3, [r3, #1]
 8008c82:	2b09      	cmp	r3, #9
 8008c84:	d83b      	bhi.n	8008cfe <USBD_StdDevReq+0xc2>
 8008c86:	a201      	add	r2, pc, #4	; (adr r2, 8008c8c <USBD_StdDevReq+0x50>)
 8008c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8c:	08008ce1 	.word	0x08008ce1
 8008c90:	08008cf5 	.word	0x08008cf5
 8008c94:	08008cff 	.word	0x08008cff
 8008c98:	08008ceb 	.word	0x08008ceb
 8008c9c:	08008cff 	.word	0x08008cff
 8008ca0:	08008cbf 	.word	0x08008cbf
 8008ca4:	08008cb5 	.word	0x08008cb5
 8008ca8:	08008cff 	.word	0x08008cff
 8008cac:	08008cd7 	.word	0x08008cd7
 8008cb0:	08008cc9 	.word	0x08008cc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fa3c 	bl	8009134 <USBD_GetDescriptor>
          break;
 8008cbc:	e024      	b.n	8008d08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fba1 	bl	8009408 <USBD_SetAddress>
          break;
 8008cc6:	e01f      	b.n	8008d08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fbe0 	bl	8009490 <USBD_SetConfig>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73fb      	strb	r3, [r7, #15]
          break;
 8008cd4:	e018      	b.n	8008d08 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fc83 	bl	80095e4 <USBD_GetConfig>
          break;
 8008cde:	e013      	b.n	8008d08 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fcb4 	bl	8009650 <USBD_GetStatus>
          break;
 8008ce8:	e00e      	b.n	8008d08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fce3 	bl	80096b8 <USBD_SetFeature>
          break;
 8008cf2:	e009      	b.n	8008d08 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fd07 	bl	800970a <USBD_ClrFeature>
          break;
 8008cfc:	e004      	b.n	8008d08 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008cfe:	6839      	ldr	r1, [r7, #0]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fd5e 	bl	80097c2 <USBD_CtlError>
          break;
 8008d06:	bf00      	nop
      }
      break;
 8008d08:	e004      	b.n	8008d14 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008d0a:	6839      	ldr	r1, [r7, #0]
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 fd58 	bl	80097c2 <USBD_CtlError>
      break;
 8008d12:	bf00      	nop
  }

  return ret;
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop

08008d20 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d36:	2b40      	cmp	r3, #64	; 0x40
 8008d38:	d005      	beq.n	8008d46 <USBD_StdItfReq+0x26>
 8008d3a:	2b40      	cmp	r3, #64	; 0x40
 8008d3c:	d852      	bhi.n	8008de4 <USBD_StdItfReq+0xc4>
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <USBD_StdItfReq+0x26>
 8008d42:	2b20      	cmp	r3, #32
 8008d44:	d14e      	bne.n	8008de4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d840      	bhi.n	8008dd6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	889b      	ldrh	r3, [r3, #4]
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d836      	bhi.n	8008dcc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	889b      	ldrh	r3, [r3, #4]
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7ff fed9 	bl	8008b1e <USBD_CoreFindIF>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
 8008d72:	2bff      	cmp	r3, #255	; 0xff
 8008d74:	d01d      	beq.n	8008db2 <USBD_StdItfReq+0x92>
 8008d76:	7bbb      	ldrb	r3, [r7, #14]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d11a      	bne.n	8008db2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008d7c:	7bba      	ldrb	r2, [r7, #14]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	32ae      	adds	r2, #174	; 0xae
 8008d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00f      	beq.n	8008dac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008d8c:	7bba      	ldrb	r2, [r7, #14]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d94:	7bba      	ldrb	r2, [r7, #14]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	32ae      	adds	r2, #174	; 0xae
 8008d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	4798      	blx	r3
 8008da6:	4603      	mov	r3, r0
 8008da8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008daa:	e004      	b.n	8008db6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008dac:	2303      	movs	r3, #3
 8008dae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008db0:	e001      	b.n	8008db6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008db2:	2303      	movs	r3, #3
 8008db4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	88db      	ldrh	r3, [r3, #6]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d110      	bne.n	8008de0 <USBD_StdItfReq+0xc0>
 8008dbe:	7bfb      	ldrb	r3, [r7, #15]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d10d      	bne.n	8008de0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fdc7 	bl	8009958 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008dca:	e009      	b.n	8008de0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008dcc:	6839      	ldr	r1, [r7, #0]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fcf7 	bl	80097c2 <USBD_CtlError>
          break;
 8008dd4:	e004      	b.n	8008de0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fcf2 	bl	80097c2 <USBD_CtlError>
          break;
 8008dde:	e000      	b.n	8008de2 <USBD_StdItfReq+0xc2>
          break;
 8008de0:	bf00      	nop
      }
      break;
 8008de2:	e004      	b.n	8008dee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008de4:	6839      	ldr	r1, [r7, #0]
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fceb 	bl	80097c2 <USBD_CtlError>
      break;
 8008dec:	bf00      	nop
  }

  return ret;
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	889b      	ldrh	r3, [r3, #4]
 8008e0a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e14:	2b40      	cmp	r3, #64	; 0x40
 8008e16:	d007      	beq.n	8008e28 <USBD_StdEPReq+0x30>
 8008e18:	2b40      	cmp	r3, #64	; 0x40
 8008e1a:	f200 817f 	bhi.w	800911c <USBD_StdEPReq+0x324>
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d02a      	beq.n	8008e78 <USBD_StdEPReq+0x80>
 8008e22:	2b20      	cmp	r3, #32
 8008e24:	f040 817a 	bne.w	800911c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7ff fe83 	bl	8008b38 <USBD_CoreFindEP>
 8008e32:	4603      	mov	r3, r0
 8008e34:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e36:	7b7b      	ldrb	r3, [r7, #13]
 8008e38:	2bff      	cmp	r3, #255	; 0xff
 8008e3a:	f000 8174 	beq.w	8009126 <USBD_StdEPReq+0x32e>
 8008e3e:	7b7b      	ldrb	r3, [r7, #13]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f040 8170 	bne.w	8009126 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008e46:	7b7a      	ldrb	r2, [r7, #13]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008e4e:	7b7a      	ldrb	r2, [r7, #13]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	32ae      	adds	r2, #174	; 0xae
 8008e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 8163 	beq.w	8009126 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008e60:	7b7a      	ldrb	r2, [r7, #13]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	32ae      	adds	r2, #174	; 0xae
 8008e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	4798      	blx	r3
 8008e72:	4603      	mov	r3, r0
 8008e74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008e76:	e156      	b.n	8009126 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	785b      	ldrb	r3, [r3, #1]
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d008      	beq.n	8008e92 <USBD_StdEPReq+0x9a>
 8008e80:	2b03      	cmp	r3, #3
 8008e82:	f300 8145 	bgt.w	8009110 <USBD_StdEPReq+0x318>
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f000 809b 	beq.w	8008fc2 <USBD_StdEPReq+0x1ca>
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d03c      	beq.n	8008f0a <USBD_StdEPReq+0x112>
 8008e90:	e13e      	b.n	8009110 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d002      	beq.n	8008ea4 <USBD_StdEPReq+0xac>
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d016      	beq.n	8008ed0 <USBD_StdEPReq+0xd8>
 8008ea2:	e02c      	b.n	8008efe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ea4:	7bbb      	ldrb	r3, [r7, #14]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00d      	beq.n	8008ec6 <USBD_StdEPReq+0xce>
 8008eaa:	7bbb      	ldrb	r3, [r7, #14]
 8008eac:	2b80      	cmp	r3, #128	; 0x80
 8008eae:	d00a      	beq.n	8008ec6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008eb0:	7bbb      	ldrb	r3, [r7, #14]
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f001 f96d 	bl	800a194 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eba:	2180      	movs	r1, #128	; 0x80
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f001 f969 	bl	800a194 <USBD_LL_StallEP>
 8008ec2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ec4:	e020      	b.n	8008f08 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fc7a 	bl	80097c2 <USBD_CtlError>
              break;
 8008ece:	e01b      	b.n	8008f08 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	885b      	ldrh	r3, [r3, #2]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10e      	bne.n	8008ef6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00b      	beq.n	8008ef6 <USBD_StdEPReq+0xfe>
 8008ede:	7bbb      	ldrb	r3, [r7, #14]
 8008ee0:	2b80      	cmp	r3, #128	; 0x80
 8008ee2:	d008      	beq.n	8008ef6 <USBD_StdEPReq+0xfe>
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	88db      	ldrh	r3, [r3, #6]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d104      	bne.n	8008ef6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
 8008eee:	4619      	mov	r1, r3
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f001 f94f 	bl	800a194 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fd2e 	bl	8009958 <USBD_CtlSendStatus>

              break;
 8008efc:	e004      	b.n	8008f08 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fc5e 	bl	80097c2 <USBD_CtlError>
              break;
 8008f06:	bf00      	nop
          }
          break;
 8008f08:	e107      	b.n	800911a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d002      	beq.n	8008f1c <USBD_StdEPReq+0x124>
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	d016      	beq.n	8008f48 <USBD_StdEPReq+0x150>
 8008f1a:	e04b      	b.n	8008fb4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f1c:	7bbb      	ldrb	r3, [r7, #14]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00d      	beq.n	8008f3e <USBD_StdEPReq+0x146>
 8008f22:	7bbb      	ldrb	r3, [r7, #14]
 8008f24:	2b80      	cmp	r3, #128	; 0x80
 8008f26:	d00a      	beq.n	8008f3e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f001 f931 	bl	800a194 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f32:	2180      	movs	r1, #128	; 0x80
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f001 f92d 	bl	800a194 <USBD_LL_StallEP>
 8008f3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f3c:	e040      	b.n	8008fc0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008f3e:	6839      	ldr	r1, [r7, #0]
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fc3e 	bl	80097c2 <USBD_CtlError>
              break;
 8008f46:	e03b      	b.n	8008fc0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	885b      	ldrh	r3, [r3, #2]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d136      	bne.n	8008fbe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f50:	7bbb      	ldrb	r3, [r7, #14]
 8008f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d004      	beq.n	8008f64 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f001 f937 	bl	800a1d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 fcf7 	bl	8009958 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7ff fde2 	bl	8008b38 <USBD_CoreFindEP>
 8008f74:	4603      	mov	r3, r0
 8008f76:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f78:	7b7b      	ldrb	r3, [r7, #13]
 8008f7a:	2bff      	cmp	r3, #255	; 0xff
 8008f7c:	d01f      	beq.n	8008fbe <USBD_StdEPReq+0x1c6>
 8008f7e:	7b7b      	ldrb	r3, [r7, #13]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d11c      	bne.n	8008fbe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008f84:	7b7a      	ldrb	r2, [r7, #13]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008f8c:	7b7a      	ldrb	r2, [r7, #13]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	32ae      	adds	r2, #174	; 0xae
 8008f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d010      	beq.n	8008fbe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f9c:	7b7a      	ldrb	r2, [r7, #13]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	32ae      	adds	r2, #174	; 0xae
 8008fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	4798      	blx	r3
 8008fae:	4603      	mov	r3, r0
 8008fb0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008fb2:	e004      	b.n	8008fbe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fc03 	bl	80097c2 <USBD_CtlError>
              break;
 8008fbc:	e000      	b.n	8008fc0 <USBD_StdEPReq+0x1c8>
              break;
 8008fbe:	bf00      	nop
          }
          break;
 8008fc0:	e0ab      	b.n	800911a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d002      	beq.n	8008fd4 <USBD_StdEPReq+0x1dc>
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d032      	beq.n	8009038 <USBD_StdEPReq+0x240>
 8008fd2:	e097      	b.n	8009104 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fd4:	7bbb      	ldrb	r3, [r7, #14]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d007      	beq.n	8008fea <USBD_StdEPReq+0x1f2>
 8008fda:	7bbb      	ldrb	r3, [r7, #14]
 8008fdc:	2b80      	cmp	r3, #128	; 0x80
 8008fde:	d004      	beq.n	8008fea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fbed 	bl	80097c2 <USBD_CtlError>
                break;
 8008fe8:	e091      	b.n	800910e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	da0b      	bge.n	800900a <USBD_StdEPReq+0x212>
 8008ff2:	7bbb      	ldrb	r3, [r7, #14]
 8008ff4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4413      	add	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	3310      	adds	r3, #16
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	4413      	add	r3, r2
 8009006:	3304      	adds	r3, #4
 8009008:	e00b      	b.n	8009022 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800900a:	7bbb      	ldrb	r3, [r7, #14]
 800900c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009010:	4613      	mov	r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	4413      	add	r3, r2
 8009020:	3304      	adds	r3, #4
 8009022:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2200      	movs	r2, #0
 8009028:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	2202      	movs	r2, #2
 800902e:	4619      	mov	r1, r3
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fc37 	bl	80098a4 <USBD_CtlSendData>
              break;
 8009036:	e06a      	b.n	800910e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009038:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800903c:	2b00      	cmp	r3, #0
 800903e:	da11      	bge.n	8009064 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009040:	7bbb      	ldrb	r3, [r7, #14]
 8009042:	f003 020f 	and.w	r2, r3, #15
 8009046:	6879      	ldr	r1, [r7, #4]
 8009048:	4613      	mov	r3, r2
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4413      	add	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	440b      	add	r3, r1
 8009052:	3324      	adds	r3, #36	; 0x24
 8009054:	881b      	ldrh	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d117      	bne.n	800908a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fbb0 	bl	80097c2 <USBD_CtlError>
                  break;
 8009062:	e054      	b.n	800910e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	f003 020f 	and.w	r2, r3, #15
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	4613      	mov	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	440b      	add	r3, r1
 8009076:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d104      	bne.n	800908a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fb9d 	bl	80097c2 <USBD_CtlError>
                  break;
 8009088:	e041      	b.n	800910e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800908a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800908e:	2b00      	cmp	r3, #0
 8009090:	da0b      	bge.n	80090aa <USBD_StdEPReq+0x2b2>
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009098:	4613      	mov	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	3310      	adds	r3, #16
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	4413      	add	r3, r2
 80090a6:	3304      	adds	r3, #4
 80090a8:	e00b      	b.n	80090c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
 80090ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090b0:	4613      	mov	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	4413      	add	r3, r2
 80090c0:	3304      	adds	r3, #4
 80090c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80090c4:	7bbb      	ldrb	r3, [r7, #14]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d002      	beq.n	80090d0 <USBD_StdEPReq+0x2d8>
 80090ca:	7bbb      	ldrb	r3, [r7, #14]
 80090cc:	2b80      	cmp	r3, #128	; 0x80
 80090ce:	d103      	bne.n	80090d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2200      	movs	r2, #0
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	e00e      	b.n	80090f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	4619      	mov	r1, r3
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f001 f897 	bl	800a210 <USBD_LL_IsStallEP>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d003      	beq.n	80090f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	2201      	movs	r2, #1
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	e002      	b.n	80090f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	2200      	movs	r2, #0
 80090f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2202      	movs	r2, #2
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fbd1 	bl	80098a4 <USBD_CtlSendData>
              break;
 8009102:	e004      	b.n	800910e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fb5b 	bl	80097c2 <USBD_CtlError>
              break;
 800910c:	bf00      	nop
          }
          break;
 800910e:	e004      	b.n	800911a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fb55 	bl	80097c2 <USBD_CtlError>
          break;
 8009118:	bf00      	nop
      }
      break;
 800911a:	e005      	b.n	8009128 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800911c:	6839      	ldr	r1, [r7, #0]
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 fb4f 	bl	80097c2 <USBD_CtlError>
      break;
 8009124:	e000      	b.n	8009128 <USBD_StdEPReq+0x330>
      break;
 8009126:	bf00      	nop
  }

  return ret;
 8009128:	7bfb      	ldrb	r3, [r7, #15]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
	...

08009134 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800913e:	2300      	movs	r3, #0
 8009140:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009142:	2300      	movs	r3, #0
 8009144:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009146:	2300      	movs	r3, #0
 8009148:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	885b      	ldrh	r3, [r3, #2]
 800914e:	0a1b      	lsrs	r3, r3, #8
 8009150:	b29b      	uxth	r3, r3
 8009152:	3b01      	subs	r3, #1
 8009154:	2b06      	cmp	r3, #6
 8009156:	f200 8128 	bhi.w	80093aa <USBD_GetDescriptor+0x276>
 800915a:	a201      	add	r2, pc, #4	; (adr r2, 8009160 <USBD_GetDescriptor+0x2c>)
 800915c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009160:	0800917d 	.word	0x0800917d
 8009164:	08009195 	.word	0x08009195
 8009168:	080091d5 	.word	0x080091d5
 800916c:	080093ab 	.word	0x080093ab
 8009170:	080093ab 	.word	0x080093ab
 8009174:	0800934b 	.word	0x0800934b
 8009178:	08009377 	.word	0x08009377
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	7c12      	ldrb	r2, [r2, #16]
 8009188:	f107 0108 	add.w	r1, r7, #8
 800918c:	4610      	mov	r0, r2
 800918e:	4798      	blx	r3
 8009190:	60f8      	str	r0, [r7, #12]
      break;
 8009192:	e112      	b.n	80093ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	7c1b      	ldrb	r3, [r3, #16]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10d      	bne.n	80091b8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a4:	f107 0208 	add.w	r2, r7, #8
 80091a8:	4610      	mov	r0, r2
 80091aa:	4798      	blx	r3
 80091ac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3301      	adds	r3, #1
 80091b2:	2202      	movs	r2, #2
 80091b4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80091b6:	e100      	b.n	80093ba <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c0:	f107 0208 	add.w	r2, r7, #8
 80091c4:	4610      	mov	r0, r2
 80091c6:	4798      	blx	r3
 80091c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	3301      	adds	r3, #1
 80091ce:	2202      	movs	r2, #2
 80091d0:	701a      	strb	r2, [r3, #0]
      break;
 80091d2:	e0f2      	b.n	80093ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	885b      	ldrh	r3, [r3, #2]
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b05      	cmp	r3, #5
 80091dc:	f200 80ac 	bhi.w	8009338 <USBD_GetDescriptor+0x204>
 80091e0:	a201      	add	r2, pc, #4	; (adr r2, 80091e8 <USBD_GetDescriptor+0xb4>)
 80091e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e6:	bf00      	nop
 80091e8:	08009201 	.word	0x08009201
 80091ec:	08009235 	.word	0x08009235
 80091f0:	08009269 	.word	0x08009269
 80091f4:	0800929d 	.word	0x0800929d
 80091f8:	080092d1 	.word	0x080092d1
 80091fc:	08009305 	.word	0x08009305
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00b      	beq.n	8009224 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	7c12      	ldrb	r2, [r2, #16]
 8009218:	f107 0108 	add.w	r1, r7, #8
 800921c:	4610      	mov	r0, r2
 800921e:	4798      	blx	r3
 8009220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009222:	e091      	b.n	8009348 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 facb 	bl	80097c2 <USBD_CtlError>
            err++;
 800922c:	7afb      	ldrb	r3, [r7, #11]
 800922e:	3301      	adds	r3, #1
 8009230:	72fb      	strb	r3, [r7, #11]
          break;
 8009232:	e089      	b.n	8009348 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00b      	beq.n	8009258 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	7c12      	ldrb	r2, [r2, #16]
 800924c:	f107 0108 	add.w	r1, r7, #8
 8009250:	4610      	mov	r0, r2
 8009252:	4798      	blx	r3
 8009254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009256:	e077      	b.n	8009348 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fab1 	bl	80097c2 <USBD_CtlError>
            err++;
 8009260:	7afb      	ldrb	r3, [r7, #11]
 8009262:	3301      	adds	r3, #1
 8009264:	72fb      	strb	r3, [r7, #11]
          break;
 8009266:	e06f      	b.n	8009348 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00b      	beq.n	800928c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	7c12      	ldrb	r2, [r2, #16]
 8009280:	f107 0108 	add.w	r1, r7, #8
 8009284:	4610      	mov	r0, r2
 8009286:	4798      	blx	r3
 8009288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800928a:	e05d      	b.n	8009348 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fa97 	bl	80097c2 <USBD_CtlError>
            err++;
 8009294:	7afb      	ldrb	r3, [r7, #11]
 8009296:	3301      	adds	r3, #1
 8009298:	72fb      	strb	r3, [r7, #11]
          break;
 800929a:	e055      	b.n	8009348 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00b      	beq.n	80092c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	7c12      	ldrb	r2, [r2, #16]
 80092b4:	f107 0108 	add.w	r1, r7, #8
 80092b8:	4610      	mov	r0, r2
 80092ba:	4798      	blx	r3
 80092bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092be:	e043      	b.n	8009348 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092c0:	6839      	ldr	r1, [r7, #0]
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fa7d 	bl	80097c2 <USBD_CtlError>
            err++;
 80092c8:	7afb      	ldrb	r3, [r7, #11]
 80092ca:	3301      	adds	r3, #1
 80092cc:	72fb      	strb	r3, [r7, #11]
          break;
 80092ce:	e03b      	b.n	8009348 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092d6:	695b      	ldr	r3, [r3, #20]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00b      	beq.n	80092f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092e2:	695b      	ldr	r3, [r3, #20]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	7c12      	ldrb	r2, [r2, #16]
 80092e8:	f107 0108 	add.w	r1, r7, #8
 80092ec:	4610      	mov	r0, r2
 80092ee:	4798      	blx	r3
 80092f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092f2:	e029      	b.n	8009348 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 fa63 	bl	80097c2 <USBD_CtlError>
            err++;
 80092fc:	7afb      	ldrb	r3, [r7, #11]
 80092fe:	3301      	adds	r3, #1
 8009300:	72fb      	strb	r3, [r7, #11]
          break;
 8009302:	e021      	b.n	8009348 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00b      	beq.n	8009328 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	7c12      	ldrb	r2, [r2, #16]
 800931c:	f107 0108 	add.w	r1, r7, #8
 8009320:	4610      	mov	r0, r2
 8009322:	4798      	blx	r3
 8009324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009326:	e00f      	b.n	8009348 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fa49 	bl	80097c2 <USBD_CtlError>
            err++;
 8009330:	7afb      	ldrb	r3, [r7, #11]
 8009332:	3301      	adds	r3, #1
 8009334:	72fb      	strb	r3, [r7, #11]
          break;
 8009336:	e007      	b.n	8009348 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009338:	6839      	ldr	r1, [r7, #0]
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 fa41 	bl	80097c2 <USBD_CtlError>
          err++;
 8009340:	7afb      	ldrb	r3, [r7, #11]
 8009342:	3301      	adds	r3, #1
 8009344:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009346:	bf00      	nop
      }
      break;
 8009348:	e037      	b.n	80093ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	7c1b      	ldrb	r3, [r3, #16]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d109      	bne.n	8009366 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800935a:	f107 0208 	add.w	r2, r7, #8
 800935e:	4610      	mov	r0, r2
 8009360:	4798      	blx	r3
 8009362:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009364:	e029      	b.n	80093ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009366:	6839      	ldr	r1, [r7, #0]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fa2a 	bl	80097c2 <USBD_CtlError>
        err++;
 800936e:	7afb      	ldrb	r3, [r7, #11]
 8009370:	3301      	adds	r3, #1
 8009372:	72fb      	strb	r3, [r7, #11]
      break;
 8009374:	e021      	b.n	80093ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	7c1b      	ldrb	r3, [r3, #16]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10d      	bne.n	800939a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009386:	f107 0208 	add.w	r2, r7, #8
 800938a:	4610      	mov	r0, r2
 800938c:	4798      	blx	r3
 800938e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	3301      	adds	r3, #1
 8009394:	2207      	movs	r2, #7
 8009396:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009398:	e00f      	b.n	80093ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800939a:	6839      	ldr	r1, [r7, #0]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fa10 	bl	80097c2 <USBD_CtlError>
        err++;
 80093a2:	7afb      	ldrb	r3, [r7, #11]
 80093a4:	3301      	adds	r3, #1
 80093a6:	72fb      	strb	r3, [r7, #11]
      break;
 80093a8:	e007      	b.n	80093ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fa08 	bl	80097c2 <USBD_CtlError>
      err++;
 80093b2:	7afb      	ldrb	r3, [r7, #11]
 80093b4:	3301      	adds	r3, #1
 80093b6:	72fb      	strb	r3, [r7, #11]
      break;
 80093b8:	bf00      	nop
  }

  if (err != 0U)
 80093ba:	7afb      	ldrb	r3, [r7, #11]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d11e      	bne.n	80093fe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	88db      	ldrh	r3, [r3, #6]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d016      	beq.n	80093f6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80093c8:	893b      	ldrh	r3, [r7, #8]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00e      	beq.n	80093ec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	88da      	ldrh	r2, [r3, #6]
 80093d2:	893b      	ldrh	r3, [r7, #8]
 80093d4:	4293      	cmp	r3, r2
 80093d6:	bf28      	it	cs
 80093d8:	4613      	movcs	r3, r2
 80093da:	b29b      	uxth	r3, r3
 80093dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80093de:	893b      	ldrh	r3, [r7, #8]
 80093e0:	461a      	mov	r2, r3
 80093e2:	68f9      	ldr	r1, [r7, #12]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fa5d 	bl	80098a4 <USBD_CtlSendData>
 80093ea:	e009      	b.n	8009400 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f9e7 	bl	80097c2 <USBD_CtlError>
 80093f4:	e004      	b.n	8009400 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 faae 	bl	8009958 <USBD_CtlSendStatus>
 80093fc:	e000      	b.n	8009400 <USBD_GetDescriptor+0x2cc>
    return;
 80093fe:	bf00      	nop
  }
}
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop

08009408 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	889b      	ldrh	r3, [r3, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d131      	bne.n	800947e <USBD_SetAddress+0x76>
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	88db      	ldrh	r3, [r3, #6]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d12d      	bne.n	800947e <USBD_SetAddress+0x76>
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	885b      	ldrh	r3, [r3, #2]
 8009426:	2b7f      	cmp	r3, #127	; 0x7f
 8009428:	d829      	bhi.n	800947e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	885b      	ldrh	r3, [r3, #2]
 800942e:	b2db      	uxtb	r3, r3
 8009430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009434:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800943c:	b2db      	uxtb	r3, r3
 800943e:	2b03      	cmp	r3, #3
 8009440:	d104      	bne.n	800944c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f9bc 	bl	80097c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800944a:	e01d      	b.n	8009488 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	7bfa      	ldrb	r2, [r7, #15]
 8009450:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009454:	7bfb      	ldrb	r3, [r7, #15]
 8009456:	4619      	mov	r1, r3
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 ff05 	bl	800a268 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fa7a 	bl	8009958 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d004      	beq.n	8009474 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2202      	movs	r2, #2
 800946e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009472:	e009      	b.n	8009488 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800947c:	e004      	b.n	8009488 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f99e 	bl	80097c2 <USBD_CtlError>
  }
}
 8009486:	bf00      	nop
 8009488:	bf00      	nop
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	885b      	ldrh	r3, [r3, #2]
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	4b4e      	ldr	r3, [pc, #312]	; (80095e0 <USBD_SetConfig+0x150>)
 80094a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80094a8:	4b4d      	ldr	r3, [pc, #308]	; (80095e0 <USBD_SetConfig+0x150>)
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d905      	bls.n	80094bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f985 	bl	80097c2 <USBD_CtlError>
    return USBD_FAIL;
 80094b8:	2303      	movs	r3, #3
 80094ba:	e08c      	b.n	80095d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	d002      	beq.n	80094ce <USBD_SetConfig+0x3e>
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d029      	beq.n	8009520 <USBD_SetConfig+0x90>
 80094cc:	e075      	b.n	80095ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80094ce:	4b44      	ldr	r3, [pc, #272]	; (80095e0 <USBD_SetConfig+0x150>)
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d020      	beq.n	8009518 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80094d6:	4b42      	ldr	r3, [pc, #264]	; (80095e0 <USBD_SetConfig+0x150>)
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	461a      	mov	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094e0:	4b3f      	ldr	r3, [pc, #252]	; (80095e0 <USBD_SetConfig+0x150>)
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7fe ffe7 	bl	80084ba <USBD_SetClassConfig>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d008      	beq.n	8009508 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f962 	bl	80097c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2202      	movs	r2, #2
 8009502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009506:	e065      	b.n	80095d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fa25 	bl	8009958 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2203      	movs	r2, #3
 8009512:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009516:	e05d      	b.n	80095d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fa1d 	bl	8009958 <USBD_CtlSendStatus>
      break;
 800951e:	e059      	b.n	80095d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009520:	4b2f      	ldr	r3, [pc, #188]	; (80095e0 <USBD_SetConfig+0x150>)
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d112      	bne.n	800954e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2202      	movs	r2, #2
 800952c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009530:	4b2b      	ldr	r3, [pc, #172]	; (80095e0 <USBD_SetConfig+0x150>)
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	461a      	mov	r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800953a:	4b29      	ldr	r3, [pc, #164]	; (80095e0 <USBD_SetConfig+0x150>)
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f7fe ffd6 	bl	80084f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 fa06 	bl	8009958 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800954c:	e042      	b.n	80095d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800954e:	4b24      	ldr	r3, [pc, #144]	; (80095e0 <USBD_SetConfig+0x150>)
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	429a      	cmp	r2, r3
 800955a:	d02a      	beq.n	80095b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	b2db      	uxtb	r3, r3
 8009562:	4619      	mov	r1, r3
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7fe ffc4 	bl	80084f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800956a:	4b1d      	ldr	r3, [pc, #116]	; (80095e0 <USBD_SetConfig+0x150>)
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009574:	4b1a      	ldr	r3, [pc, #104]	; (80095e0 <USBD_SetConfig+0x150>)
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	4619      	mov	r1, r3
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f7fe ff9d 	bl	80084ba <USBD_SetClassConfig>
 8009580:	4603      	mov	r3, r0
 8009582:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009584:	7bfb      	ldrb	r3, [r7, #15]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00f      	beq.n	80095aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f918 	bl	80097c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	b2db      	uxtb	r3, r3
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7fe ffa9 	bl	80084f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2202      	movs	r2, #2
 80095a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80095a8:	e014      	b.n	80095d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f9d4 	bl	8009958 <USBD_CtlSendStatus>
      break;
 80095b0:	e010      	b.n	80095d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f9d0 	bl	8009958 <USBD_CtlSendStatus>
      break;
 80095b8:	e00c      	b.n	80095d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80095ba:	6839      	ldr	r1, [r7, #0]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f900 	bl	80097c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095c2:	4b07      	ldr	r3, [pc, #28]	; (80095e0 <USBD_SetConfig+0x150>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	4619      	mov	r1, r3
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f7fe ff92 	bl	80084f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80095ce:	2303      	movs	r3, #3
 80095d0:	73fb      	strb	r3, [r7, #15]
      break;
 80095d2:	bf00      	nop
  }

  return ret;
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	20000408 	.word	0x20000408

080095e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	88db      	ldrh	r3, [r3, #6]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d004      	beq.n	8009600 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f8e2 	bl	80097c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80095fe:	e023      	b.n	8009648 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b02      	cmp	r3, #2
 800960a:	dc02      	bgt.n	8009612 <USBD_GetConfig+0x2e>
 800960c:	2b00      	cmp	r3, #0
 800960e:	dc03      	bgt.n	8009618 <USBD_GetConfig+0x34>
 8009610:	e015      	b.n	800963e <USBD_GetConfig+0x5a>
 8009612:	2b03      	cmp	r3, #3
 8009614:	d00b      	beq.n	800962e <USBD_GetConfig+0x4a>
 8009616:	e012      	b.n	800963e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	3308      	adds	r3, #8
 8009622:	2201      	movs	r2, #1
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 f93c 	bl	80098a4 <USBD_CtlSendData>
        break;
 800962c:	e00c      	b.n	8009648 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	3304      	adds	r3, #4
 8009632:	2201      	movs	r2, #1
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f934 	bl	80098a4 <USBD_CtlSendData>
        break;
 800963c:	e004      	b.n	8009648 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f8be 	bl	80097c2 <USBD_CtlError>
        break;
 8009646:	bf00      	nop
}
 8009648:	bf00      	nop
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009660:	b2db      	uxtb	r3, r3
 8009662:	3b01      	subs	r3, #1
 8009664:	2b02      	cmp	r3, #2
 8009666:	d81e      	bhi.n	80096a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	88db      	ldrh	r3, [r3, #6]
 800966c:	2b02      	cmp	r3, #2
 800966e:	d004      	beq.n	800967a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009670:	6839      	ldr	r1, [r7, #0]
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f8a5 	bl	80097c2 <USBD_CtlError>
        break;
 8009678:	e01a      	b.n	80096b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2201      	movs	r2, #1
 800967e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009686:	2b00      	cmp	r3, #0
 8009688:	d005      	beq.n	8009696 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	f043 0202 	orr.w	r2, r3, #2
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	330c      	adds	r3, #12
 800969a:	2202      	movs	r2, #2
 800969c:	4619      	mov	r1, r3
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f900 	bl	80098a4 <USBD_CtlSendData>
      break;
 80096a4:	e004      	b.n	80096b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80096a6:	6839      	ldr	r1, [r7, #0]
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f88a 	bl	80097c2 <USBD_CtlError>
      break;
 80096ae:	bf00      	nop
  }
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	885b      	ldrh	r3, [r3, #2]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d107      	bne.n	80096da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f940 	bl	8009958 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80096d8:	e013      	b.n	8009702 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	885b      	ldrh	r3, [r3, #2]
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d10b      	bne.n	80096fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	889b      	ldrh	r3, [r3, #4]
 80096e6:	0a1b      	lsrs	r3, r3, #8
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f930 	bl	8009958 <USBD_CtlSendStatus>
}
 80096f8:	e003      	b.n	8009702 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f860 	bl	80097c2 <USBD_CtlError>
}
 8009702:	bf00      	nop
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b082      	sub	sp, #8
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
 8009712:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800971a:	b2db      	uxtb	r3, r3
 800971c:	3b01      	subs	r3, #1
 800971e:	2b02      	cmp	r3, #2
 8009720:	d80b      	bhi.n	800973a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	885b      	ldrh	r3, [r3, #2]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d10c      	bne.n	8009744 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f910 	bl	8009958 <USBD_CtlSendStatus>
      }
      break;
 8009738:	e004      	b.n	8009744 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800973a:	6839      	ldr	r1, [r7, #0]
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 f840 	bl	80097c2 <USBD_CtlError>
      break;
 8009742:	e000      	b.n	8009746 <USBD_ClrFeature+0x3c>
      break;
 8009744:	bf00      	nop
  }
}
 8009746:	bf00      	nop
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	781a      	ldrb	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	3301      	adds	r3, #1
 8009768:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	781a      	ldrb	r2, [r3, #0]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	3301      	adds	r3, #1
 8009776:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f7ff fa41 	bl	8008c00 <SWAPBYTE>
 800977e:	4603      	mov	r3, r0
 8009780:	461a      	mov	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	3301      	adds	r3, #1
 800978a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	3301      	adds	r3, #1
 8009790:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f7ff fa34 	bl	8008c00 <SWAPBYTE>
 8009798:	4603      	mov	r3, r0
 800979a:	461a      	mov	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	3301      	adds	r3, #1
 80097a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	3301      	adds	r3, #1
 80097aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f7ff fa27 	bl	8008c00 <SWAPBYTE>
 80097b2:	4603      	mov	r3, r0
 80097b4:	461a      	mov	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	80da      	strh	r2, [r3, #6]
}
 80097ba:	bf00      	nop
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b082      	sub	sp, #8
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80097cc:	2180      	movs	r1, #128	; 0x80
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 fce0 	bl	800a194 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80097d4:	2100      	movs	r1, #0
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fcdc 	bl	800a194 <USBD_LL_StallEP>
}
 80097dc:	bf00      	nop
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097f0:	2300      	movs	r3, #0
 80097f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d036      	beq.n	8009868 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80097fe:	6938      	ldr	r0, [r7, #16]
 8009800:	f000 f836 	bl	8009870 <USBD_GetLen>
 8009804:	4603      	mov	r3, r0
 8009806:	3301      	adds	r3, #1
 8009808:	b29b      	uxth	r3, r3
 800980a:	005b      	lsls	r3, r3, #1
 800980c:	b29a      	uxth	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009812:	7dfb      	ldrb	r3, [r7, #23]
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	4413      	add	r3, r2
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	7812      	ldrb	r2, [r2, #0]
 800981c:	701a      	strb	r2, [r3, #0]
  idx++;
 800981e:	7dfb      	ldrb	r3, [r7, #23]
 8009820:	3301      	adds	r3, #1
 8009822:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009824:	7dfb      	ldrb	r3, [r7, #23]
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	4413      	add	r3, r2
 800982a:	2203      	movs	r2, #3
 800982c:	701a      	strb	r2, [r3, #0]
  idx++;
 800982e:	7dfb      	ldrb	r3, [r7, #23]
 8009830:	3301      	adds	r3, #1
 8009832:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009834:	e013      	b.n	800985e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009836:	7dfb      	ldrb	r3, [r7, #23]
 8009838:	68ba      	ldr	r2, [r7, #8]
 800983a:	4413      	add	r3, r2
 800983c:	693a      	ldr	r2, [r7, #16]
 800983e:	7812      	ldrb	r2, [r2, #0]
 8009840:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	3301      	adds	r3, #1
 8009846:	613b      	str	r3, [r7, #16]
    idx++;
 8009848:	7dfb      	ldrb	r3, [r7, #23]
 800984a:	3301      	adds	r3, #1
 800984c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800984e:	7dfb      	ldrb	r3, [r7, #23]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	4413      	add	r3, r2
 8009854:	2200      	movs	r2, #0
 8009856:	701a      	strb	r2, [r3, #0]
    idx++;
 8009858:	7dfb      	ldrb	r3, [r7, #23]
 800985a:	3301      	adds	r3, #1
 800985c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1e7      	bne.n	8009836 <USBD_GetString+0x52>
 8009866:	e000      	b.n	800986a <USBD_GetString+0x86>
    return;
 8009868:	bf00      	nop
  }
}
 800986a:	3718      	adds	r7, #24
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009878:	2300      	movs	r3, #0
 800987a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009880:	e005      	b.n	800988e <USBD_GetLen+0x1e>
  {
    len++;
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	3301      	adds	r3, #1
 8009886:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	3301      	adds	r3, #1
 800988c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1f5      	bne.n	8009882 <USBD_GetLen+0x12>
  }

  return len;
 8009896:	7bfb      	ldrb	r3, [r7, #15]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3714      	adds	r7, #20
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2202      	movs	r2, #2
 80098b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	2100      	movs	r1, #0
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f000 fceb 	bl	800a2a6 <USBD_LL_Transmit>

  return USBD_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b084      	sub	sp, #16
 80098de:	af00      	add	r7, sp, #0
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	60b9      	str	r1, [r7, #8]
 80098e4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	2100      	movs	r1, #0
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f000 fcda 	bl	800a2a6 <USBD_LL_Transmit>

  return USBD_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2203      	movs	r2, #3
 800990c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	2100      	movs	r1, #0
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f000 fcde 	bl	800a2e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b084      	sub	sp, #16
 800993a:	af00      	add	r7, sp, #0
 800993c:	60f8      	str	r0, [r7, #12]
 800993e:	60b9      	str	r1, [r7, #8]
 8009940:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	2100      	movs	r1, #0
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f000 fccd 	bl	800a2e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2204      	movs	r2, #4
 8009964:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009968:	2300      	movs	r3, #0
 800996a:	2200      	movs	r2, #0
 800996c:	2100      	movs	r1, #0
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 fc99 	bl	800a2a6 <USBD_LL_Transmit>

  return USBD_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b082      	sub	sp, #8
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2205      	movs	r2, #5
 800998a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800998e:	2300      	movs	r3, #0
 8009990:	2200      	movs	r2, #0
 8009992:	2100      	movs	r1, #0
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fca7 	bl	800a2e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80099a8:	2200      	movs	r2, #0
 80099aa:	4912      	ldr	r1, [pc, #72]	; (80099f4 <MX_USB_DEVICE_Init+0x50>)
 80099ac:	4812      	ldr	r0, [pc, #72]	; (80099f8 <MX_USB_DEVICE_Init+0x54>)
 80099ae:	f7fe fd07 	bl	80083c0 <USBD_Init>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d001      	beq.n	80099bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80099b8:	f7f8 fa2c 	bl	8001e14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80099bc:	490f      	ldr	r1, [pc, #60]	; (80099fc <MX_USB_DEVICE_Init+0x58>)
 80099be:	480e      	ldr	r0, [pc, #56]	; (80099f8 <MX_USB_DEVICE_Init+0x54>)
 80099c0:	f7fe fd2e 	bl	8008420 <USBD_RegisterClass>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80099ca:	f7f8 fa23 	bl	8001e14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80099ce:	490c      	ldr	r1, [pc, #48]	; (8009a00 <MX_USB_DEVICE_Init+0x5c>)
 80099d0:	4809      	ldr	r0, [pc, #36]	; (80099f8 <MX_USB_DEVICE_Init+0x54>)
 80099d2:	f7fe fc1f 	bl	8008214 <USBD_CDC_RegisterInterface>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80099dc:	f7f8 fa1a 	bl	8001e14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80099e0:	4805      	ldr	r0, [pc, #20]	; (80099f8 <MX_USB_DEVICE_Init+0x54>)
 80099e2:	f7fe fd53 	bl	800848c <USBD_Start>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80099ec:	f7f8 fa12 	bl	8001e14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099f0:	bf00      	nop
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	200000d4 	.word	0x200000d4
 80099f8:	2000040c 	.word	0x2000040c
 80099fc:	20000040 	.word	0x20000040
 8009a00:	200000c0 	.word	0x200000c0

08009a04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a08:	2200      	movs	r2, #0
 8009a0a:	4905      	ldr	r1, [pc, #20]	; (8009a20 <CDC_Init_FS+0x1c>)
 8009a0c:	4805      	ldr	r0, [pc, #20]	; (8009a24 <CDC_Init_FS+0x20>)
 8009a0e:	f7fe fc1b 	bl	8008248 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a12:	4905      	ldr	r1, [pc, #20]	; (8009a28 <CDC_Init_FS+0x24>)
 8009a14:	4803      	ldr	r0, [pc, #12]	; (8009a24 <CDC_Init_FS+0x20>)
 8009a16:	f7fe fc39 	bl	800828c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	20000ee8 	.word	0x20000ee8
 8009a24:	2000040c 	.word	0x2000040c
 8009a28:	200006e8 	.word	0x200006e8

08009a2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	4603      	mov	r3, r0
 8009a44:	6039      	str	r1, [r7, #0]
 8009a46:	71fb      	strb	r3, [r7, #7]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009a4c:	79fb      	ldrb	r3, [r7, #7]
 8009a4e:	2b23      	cmp	r3, #35	; 0x23
 8009a50:	d84a      	bhi.n	8009ae8 <CDC_Control_FS+0xac>
 8009a52:	a201      	add	r2, pc, #4	; (adr r2, 8009a58 <CDC_Control_FS+0x1c>)
 8009a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a58:	08009ae9 	.word	0x08009ae9
 8009a5c:	08009ae9 	.word	0x08009ae9
 8009a60:	08009ae9 	.word	0x08009ae9
 8009a64:	08009ae9 	.word	0x08009ae9
 8009a68:	08009ae9 	.word	0x08009ae9
 8009a6c:	08009ae9 	.word	0x08009ae9
 8009a70:	08009ae9 	.word	0x08009ae9
 8009a74:	08009ae9 	.word	0x08009ae9
 8009a78:	08009ae9 	.word	0x08009ae9
 8009a7c:	08009ae9 	.word	0x08009ae9
 8009a80:	08009ae9 	.word	0x08009ae9
 8009a84:	08009ae9 	.word	0x08009ae9
 8009a88:	08009ae9 	.word	0x08009ae9
 8009a8c:	08009ae9 	.word	0x08009ae9
 8009a90:	08009ae9 	.word	0x08009ae9
 8009a94:	08009ae9 	.word	0x08009ae9
 8009a98:	08009ae9 	.word	0x08009ae9
 8009a9c:	08009ae9 	.word	0x08009ae9
 8009aa0:	08009ae9 	.word	0x08009ae9
 8009aa4:	08009ae9 	.word	0x08009ae9
 8009aa8:	08009ae9 	.word	0x08009ae9
 8009aac:	08009ae9 	.word	0x08009ae9
 8009ab0:	08009ae9 	.word	0x08009ae9
 8009ab4:	08009ae9 	.word	0x08009ae9
 8009ab8:	08009ae9 	.word	0x08009ae9
 8009abc:	08009ae9 	.word	0x08009ae9
 8009ac0:	08009ae9 	.word	0x08009ae9
 8009ac4:	08009ae9 	.word	0x08009ae9
 8009ac8:	08009ae9 	.word	0x08009ae9
 8009acc:	08009ae9 	.word	0x08009ae9
 8009ad0:	08009ae9 	.word	0x08009ae9
 8009ad4:	08009ae9 	.word	0x08009ae9
 8009ad8:	08009ae9 	.word	0x08009ae9
 8009adc:	08009ae9 	.word	0x08009ae9
 8009ae0:	08009ae9 	.word	0x08009ae9
 8009ae4:	08009ae9 	.word	0x08009ae9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009ae8:	bf00      	nop
  }

  return (USBD_OK);
 8009aea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b02:	6879      	ldr	r1, [r7, #4]
 8009b04:	4805      	ldr	r0, [pc, #20]	; (8009b1c <CDC_Receive_FS+0x24>)
 8009b06:	f7fe fbc1 	bl	800828c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b0a:	4804      	ldr	r0, [pc, #16]	; (8009b1c <CDC_Receive_FS+0x24>)
 8009b0c:	f7fe fc22 	bl	8008354 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009b10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	2000040c 	.word	0x2000040c

08009b20 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	460b      	mov	r3, r1
 8009b2a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009b30:	4b0d      	ldr	r3, [pc, #52]	; (8009b68 <CDC_Transmit_FS+0x48>)
 8009b32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b36:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009b42:	2301      	movs	r3, #1
 8009b44:	e00b      	b.n	8009b5e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009b46:	887b      	ldrh	r3, [r7, #2]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	6879      	ldr	r1, [r7, #4]
 8009b4c:	4806      	ldr	r0, [pc, #24]	; (8009b68 <CDC_Transmit_FS+0x48>)
 8009b4e:	f7fe fb7b 	bl	8008248 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009b52:	4805      	ldr	r0, [pc, #20]	; (8009b68 <CDC_Transmit_FS+0x48>)
 8009b54:	f7fe fbb8 	bl	80082c8 <USBD_CDC_TransmitPacket>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	2000040c 	.word	0x2000040c

08009b6c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b087      	sub	sp, #28
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	4613      	mov	r3, r2
 8009b78:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009b7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	371c      	adds	r7, #28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
	...

08009b90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	4603      	mov	r3, r0
 8009b98:	6039      	str	r1, [r7, #0]
 8009b9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	2212      	movs	r2, #18
 8009ba0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009ba2:	4b03      	ldr	r3, [pc, #12]	; (8009bb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	200000f0 	.word	0x200000f0

08009bb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	4603      	mov	r3, r0
 8009bbc:	6039      	str	r1, [r7, #0]
 8009bbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	2204      	movs	r2, #4
 8009bc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009bc6:	4b03      	ldr	r3, [pc, #12]	; (8009bd4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr
 8009bd4:	20000104 	.word	0x20000104

08009bd8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	4603      	mov	r3, r0
 8009be0:	6039      	str	r1, [r7, #0]
 8009be2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009be4:	79fb      	ldrb	r3, [r7, #7]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d105      	bne.n	8009bf6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	4907      	ldr	r1, [pc, #28]	; (8009c0c <USBD_FS_ProductStrDescriptor+0x34>)
 8009bee:	4808      	ldr	r0, [pc, #32]	; (8009c10 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bf0:	f7ff fdf8 	bl	80097e4 <USBD_GetString>
 8009bf4:	e004      	b.n	8009c00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	4904      	ldr	r1, [pc, #16]	; (8009c0c <USBD_FS_ProductStrDescriptor+0x34>)
 8009bfa:	4805      	ldr	r0, [pc, #20]	; (8009c10 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bfc:	f7ff fdf2 	bl	80097e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c00:	4b02      	ldr	r3, [pc, #8]	; (8009c0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	200016e8 	.word	0x200016e8
 8009c10:	0800ad50 	.word	0x0800ad50

08009c14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	6039      	str	r1, [r7, #0]
 8009c1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	4904      	ldr	r1, [pc, #16]	; (8009c34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c24:	4804      	ldr	r0, [pc, #16]	; (8009c38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c26:	f7ff fddd 	bl	80097e4 <USBD_GetString>
  return USBD_StrDesc;
 8009c2a:	4b02      	ldr	r3, [pc, #8]	; (8009c34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	200016e8 	.word	0x200016e8
 8009c38:	0800ad68 	.word	0x0800ad68

08009c3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	4603      	mov	r3, r0
 8009c44:	6039      	str	r1, [r7, #0]
 8009c46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	221a      	movs	r2, #26
 8009c4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c4e:	f000 f843 	bl	8009cd8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c52:	4b02      	ldr	r3, [pc, #8]	; (8009c5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	20000108 	.word	0x20000108

08009c60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	4603      	mov	r3, r0
 8009c68:	6039      	str	r1, [r7, #0]
 8009c6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c6c:	79fb      	ldrb	r3, [r7, #7]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d105      	bne.n	8009c7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	4907      	ldr	r1, [pc, #28]	; (8009c94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c76:	4808      	ldr	r0, [pc, #32]	; (8009c98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c78:	f7ff fdb4 	bl	80097e4 <USBD_GetString>
 8009c7c:	e004      	b.n	8009c88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c7e:	683a      	ldr	r2, [r7, #0]
 8009c80:	4904      	ldr	r1, [pc, #16]	; (8009c94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c82:	4805      	ldr	r0, [pc, #20]	; (8009c98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c84:	f7ff fdae 	bl	80097e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c88:	4b02      	ldr	r3, [pc, #8]	; (8009c94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	200016e8 	.word	0x200016e8
 8009c98:	0800ad7c 	.word	0x0800ad7c

08009c9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	6039      	str	r1, [r7, #0]
 8009ca6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ca8:	79fb      	ldrb	r3, [r7, #7]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d105      	bne.n	8009cba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	4907      	ldr	r1, [pc, #28]	; (8009cd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009cb2:	4808      	ldr	r0, [pc, #32]	; (8009cd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009cb4:	f7ff fd96 	bl	80097e4 <USBD_GetString>
 8009cb8:	e004      	b.n	8009cc4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cba:	683a      	ldr	r2, [r7, #0]
 8009cbc:	4904      	ldr	r1, [pc, #16]	; (8009cd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009cbe:	4805      	ldr	r0, [pc, #20]	; (8009cd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009cc0:	f7ff fd90 	bl	80097e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cc4:	4b02      	ldr	r3, [pc, #8]	; (8009cd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	200016e8 	.word	0x200016e8
 8009cd4:	0800ad88 	.word	0x0800ad88

08009cd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009cde:	4b0f      	ldr	r3, [pc, #60]	; (8009d1c <Get_SerialNum+0x44>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ce4:	4b0e      	ldr	r3, [pc, #56]	; (8009d20 <Get_SerialNum+0x48>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009cea:	4b0e      	ldr	r3, [pc, #56]	; (8009d24 <Get_SerialNum+0x4c>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d009      	beq.n	8009d12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009cfe:	2208      	movs	r2, #8
 8009d00:	4909      	ldr	r1, [pc, #36]	; (8009d28 <Get_SerialNum+0x50>)
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f000 f814 	bl	8009d30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d08:	2204      	movs	r2, #4
 8009d0a:	4908      	ldr	r1, [pc, #32]	; (8009d2c <Get_SerialNum+0x54>)
 8009d0c:	68b8      	ldr	r0, [r7, #8]
 8009d0e:	f000 f80f 	bl	8009d30 <IntToUnicode>
  }
}
 8009d12:	bf00      	nop
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	1fff7a10 	.word	0x1fff7a10
 8009d20:	1fff7a14 	.word	0x1fff7a14
 8009d24:	1fff7a18 	.word	0x1fff7a18
 8009d28:	2000010a 	.word	0x2000010a
 8009d2c:	2000011a 	.word	0x2000011a

08009d30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b087      	sub	sp, #28
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d42:	2300      	movs	r3, #0
 8009d44:	75fb      	strb	r3, [r7, #23]
 8009d46:	e027      	b.n	8009d98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	0f1b      	lsrs	r3, r3, #28
 8009d4c:	2b09      	cmp	r3, #9
 8009d4e:	d80b      	bhi.n	8009d68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	0f1b      	lsrs	r3, r3, #28
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	7dfb      	ldrb	r3, [r7, #23]
 8009d58:	005b      	lsls	r3, r3, #1
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	440b      	add	r3, r1
 8009d60:	3230      	adds	r2, #48	; 0x30
 8009d62:	b2d2      	uxtb	r2, r2
 8009d64:	701a      	strb	r2, [r3, #0]
 8009d66:	e00a      	b.n	8009d7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	0f1b      	lsrs	r3, r3, #28
 8009d6c:	b2da      	uxtb	r2, r3
 8009d6e:	7dfb      	ldrb	r3, [r7, #23]
 8009d70:	005b      	lsls	r3, r3, #1
 8009d72:	4619      	mov	r1, r3
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	440b      	add	r3, r1
 8009d78:	3237      	adds	r2, #55	; 0x37
 8009d7a:	b2d2      	uxtb	r2, r2
 8009d7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	011b      	lsls	r3, r3, #4
 8009d82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
 8009d86:	005b      	lsls	r3, r3, #1
 8009d88:	3301      	adds	r3, #1
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	2200      	movs	r2, #0
 8009d90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d92:	7dfb      	ldrb	r3, [r7, #23]
 8009d94:	3301      	adds	r3, #1
 8009d96:	75fb      	strb	r3, [r7, #23]
 8009d98:	7dfa      	ldrb	r2, [r7, #23]
 8009d9a:	79fb      	ldrb	r3, [r7, #7]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d3d3      	bcc.n	8009d48 <IntToUnicode+0x18>
  }
}
 8009da0:	bf00      	nop
 8009da2:	bf00      	nop
 8009da4:	371c      	adds	r7, #28
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr
	...

08009db0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b08a      	sub	sp, #40	; 0x28
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009db8:	f107 0314 	add.w	r3, r7, #20
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	601a      	str	r2, [r3, #0]
 8009dc0:	605a      	str	r2, [r3, #4]
 8009dc2:	609a      	str	r2, [r3, #8]
 8009dc4:	60da      	str	r2, [r3, #12]
 8009dc6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009dd0:	d13a      	bne.n	8009e48 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	613b      	str	r3, [r7, #16]
 8009dd6:	4b1e      	ldr	r3, [pc, #120]	; (8009e50 <HAL_PCD_MspInit+0xa0>)
 8009dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dda:	4a1d      	ldr	r2, [pc, #116]	; (8009e50 <HAL_PCD_MspInit+0xa0>)
 8009ddc:	f043 0301 	orr.w	r3, r3, #1
 8009de0:	6313      	str	r3, [r2, #48]	; 0x30
 8009de2:	4b1b      	ldr	r3, [pc, #108]	; (8009e50 <HAL_PCD_MspInit+0xa0>)
 8009de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	613b      	str	r3, [r7, #16]
 8009dec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009dee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009df4:	2302      	movs	r3, #2
 8009df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dfc:	2303      	movs	r3, #3
 8009dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e00:	230a      	movs	r3, #10
 8009e02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e04:	f107 0314 	add.w	r3, r7, #20
 8009e08:	4619      	mov	r1, r3
 8009e0a:	4812      	ldr	r0, [pc, #72]	; (8009e54 <HAL_PCD_MspInit+0xa4>)
 8009e0c:	f7f8 fbe6 	bl	80025dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e10:	4b0f      	ldr	r3, [pc, #60]	; (8009e50 <HAL_PCD_MspInit+0xa0>)
 8009e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e14:	4a0e      	ldr	r2, [pc, #56]	; (8009e50 <HAL_PCD_MspInit+0xa0>)
 8009e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e1a:	6353      	str	r3, [r2, #52]	; 0x34
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	60fb      	str	r3, [r7, #12]
 8009e20:	4b0b      	ldr	r3, [pc, #44]	; (8009e50 <HAL_PCD_MspInit+0xa0>)
 8009e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e24:	4a0a      	ldr	r2, [pc, #40]	; (8009e50 <HAL_PCD_MspInit+0xa0>)
 8009e26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e2a:	6453      	str	r3, [r2, #68]	; 0x44
 8009e2c:	4b08      	ldr	r3, [pc, #32]	; (8009e50 <HAL_PCD_MspInit+0xa0>)
 8009e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e34:	60fb      	str	r3, [r7, #12]
 8009e36:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009e38:	2200      	movs	r2, #0
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	2043      	movs	r0, #67	; 0x43
 8009e3e:	f7f8 fb10 	bl	8002462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009e42:	2043      	movs	r0, #67	; 0x43
 8009e44:	f7f8 fb29 	bl	800249a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009e48:	bf00      	nop
 8009e4a:	3728      	adds	r7, #40	; 0x28
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	40023800 	.word	0x40023800
 8009e54:	40020000 	.word	0x40020000

08009e58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	4610      	mov	r0, r2
 8009e70:	f7fe fb59 	bl	8008526 <USBD_LL_SetupStage>
}
 8009e74:	bf00      	nop
 8009e76:	3708      	adds	r7, #8
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	460b      	mov	r3, r1
 8009e86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009e8e:	78fa      	ldrb	r2, [r7, #3]
 8009e90:	6879      	ldr	r1, [r7, #4]
 8009e92:	4613      	mov	r3, r2
 8009e94:	00db      	lsls	r3, r3, #3
 8009e96:	4413      	add	r3, r2
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	440b      	add	r3, r1
 8009e9c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	78fb      	ldrb	r3, [r7, #3]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	f7fe fb93 	bl	80085d0 <USBD_LL_DataOutStage>
}
 8009eaa:	bf00      	nop
 8009eac:	3708      	adds	r7, #8
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b082      	sub	sp, #8
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	460b      	mov	r3, r1
 8009ebc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009ec4:	78fa      	ldrb	r2, [r7, #3]
 8009ec6:	6879      	ldr	r1, [r7, #4]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	00db      	lsls	r3, r3, #3
 8009ecc:	4413      	add	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	440b      	add	r3, r1
 8009ed2:	334c      	adds	r3, #76	; 0x4c
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	78fb      	ldrb	r3, [r7, #3]
 8009ed8:	4619      	mov	r1, r3
 8009eda:	f7fe fc2c 	bl	8008736 <USBD_LL_DataInStage>
}
 8009ede:	bf00      	nop
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b082      	sub	sp, #8
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7fe fd60 	bl	80089ba <USBD_LL_SOF>
}
 8009efa:	bf00      	nop
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b084      	sub	sp, #16
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d102      	bne.n	8009f1c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009f16:	2300      	movs	r3, #0
 8009f18:	73fb      	strb	r3, [r7, #15]
 8009f1a:	e008      	b.n	8009f2e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	2b02      	cmp	r3, #2
 8009f22:	d102      	bne.n	8009f2a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009f24:	2301      	movs	r3, #1
 8009f26:	73fb      	strb	r3, [r7, #15]
 8009f28:	e001      	b.n	8009f2e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009f2a:	f7f7 ff73 	bl	8001e14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f34:	7bfa      	ldrb	r2, [r7, #15]
 8009f36:	4611      	mov	r1, r2
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7fe fd00 	bl	800893e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7fe fca8 	bl	800889a <USBD_LL_Reset>
}
 8009f4a:	bf00      	nop
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
	...

08009f54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7fe fcfb 	bl	800895e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	6812      	ldr	r2, [r2, #0]
 8009f76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f7a:	f043 0301 	orr.w	r3, r3, #1
 8009f7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a1b      	ldr	r3, [r3, #32]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d005      	beq.n	8009f94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f88:	4b04      	ldr	r3, [pc, #16]	; (8009f9c <HAL_PCD_SuspendCallback+0x48>)
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	4a03      	ldr	r2, [pc, #12]	; (8009f9c <HAL_PCD_SuspendCallback+0x48>)
 8009f8e:	f043 0306 	orr.w	r3, r3, #6
 8009f92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f94:	bf00      	nop
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	e000ed00 	.word	0xe000ed00

08009fa0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fe fceb 	bl	800898a <USBD_LL_Resume>
}
 8009fb4:	bf00      	nop
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fce:	78fa      	ldrb	r2, [r7, #3]
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fe fd43 	bl	8008a5e <USBD_LL_IsoOUTIncomplete>
}
 8009fd8:	bf00      	nop
 8009fda:	3708      	adds	r7, #8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	460b      	mov	r3, r1
 8009fea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ff2:	78fa      	ldrb	r2, [r7, #3]
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7fe fcff 	bl	80089fa <USBD_LL_IsoINIncomplete>
}
 8009ffc:	bf00      	nop
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a012:	4618      	mov	r0, r3
 800a014:	f7fe fd55 	bl	8008ac2 <USBD_LL_DevConnected>
}
 800a018:	bf00      	nop
 800a01a:	3708      	adds	r7, #8
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fe fd52 	bl	8008ad8 <USBD_LL_DevDisconnected>
}
 800a034:	bf00      	nop
 800a036:	3708      	adds	r7, #8
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d13c      	bne.n	800a0c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a04c:	4a20      	ldr	r2, [pc, #128]	; (800a0d0 <USBD_LL_Init+0x94>)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a1e      	ldr	r2, [pc, #120]	; (800a0d0 <USBD_LL_Init+0x94>)
 800a058:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a05c:	4b1c      	ldr	r3, [pc, #112]	; (800a0d0 <USBD_LL_Init+0x94>)
 800a05e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a062:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a064:	4b1a      	ldr	r3, [pc, #104]	; (800a0d0 <USBD_LL_Init+0x94>)
 800a066:	2204      	movs	r2, #4
 800a068:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a06a:	4b19      	ldr	r3, [pc, #100]	; (800a0d0 <USBD_LL_Init+0x94>)
 800a06c:	2202      	movs	r2, #2
 800a06e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a070:	4b17      	ldr	r3, [pc, #92]	; (800a0d0 <USBD_LL_Init+0x94>)
 800a072:	2200      	movs	r2, #0
 800a074:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a076:	4b16      	ldr	r3, [pc, #88]	; (800a0d0 <USBD_LL_Init+0x94>)
 800a078:	2202      	movs	r2, #2
 800a07a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a07c:	4b14      	ldr	r3, [pc, #80]	; (800a0d0 <USBD_LL_Init+0x94>)
 800a07e:	2200      	movs	r2, #0
 800a080:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a082:	4b13      	ldr	r3, [pc, #76]	; (800a0d0 <USBD_LL_Init+0x94>)
 800a084:	2200      	movs	r2, #0
 800a086:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a088:	4b11      	ldr	r3, [pc, #68]	; (800a0d0 <USBD_LL_Init+0x94>)
 800a08a:	2200      	movs	r2, #0
 800a08c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a08e:	4b10      	ldr	r3, [pc, #64]	; (800a0d0 <USBD_LL_Init+0x94>)
 800a090:	2200      	movs	r2, #0
 800a092:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a094:	4b0e      	ldr	r3, [pc, #56]	; (800a0d0 <USBD_LL_Init+0x94>)
 800a096:	2200      	movs	r2, #0
 800a098:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a09a:	480d      	ldr	r0, [pc, #52]	; (800a0d0 <USBD_LL_Init+0x94>)
 800a09c:	f7f8 fc53 	bl	8002946 <HAL_PCD_Init>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d001      	beq.n	800a0aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a0a6:	f7f7 feb5 	bl	8001e14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a0aa:	2180      	movs	r1, #128	; 0x80
 800a0ac:	4808      	ldr	r0, [pc, #32]	; (800a0d0 <USBD_LL_Init+0x94>)
 800a0ae:	f7f9 feaa 	bl	8003e06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a0b2:	2240      	movs	r2, #64	; 0x40
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	4806      	ldr	r0, [pc, #24]	; (800a0d0 <USBD_LL_Init+0x94>)
 800a0b8:	f7f9 fe5e 	bl	8003d78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a0bc:	2280      	movs	r2, #128	; 0x80
 800a0be:	2101      	movs	r1, #1
 800a0c0:	4803      	ldr	r0, [pc, #12]	; (800a0d0 <USBD_LL_Init+0x94>)
 800a0c2:	f7f9 fe59 	bl	8003d78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	200018e8 	.word	0x200018e8

0800a0d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7f8 fd48 	bl	8002b80 <HAL_PCD_Start>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f000 f942 	bl	800a380 <USBD_Get_USB_Status>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a100:	7bbb      	ldrb	r3, [r7, #14]
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b084      	sub	sp, #16
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
 800a112:	4608      	mov	r0, r1
 800a114:	4611      	mov	r1, r2
 800a116:	461a      	mov	r2, r3
 800a118:	4603      	mov	r3, r0
 800a11a:	70fb      	strb	r3, [r7, #3]
 800a11c:	460b      	mov	r3, r1
 800a11e:	70bb      	strb	r3, [r7, #2]
 800a120:	4613      	mov	r3, r2
 800a122:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a132:	78bb      	ldrb	r3, [r7, #2]
 800a134:	883a      	ldrh	r2, [r7, #0]
 800a136:	78f9      	ldrb	r1, [r7, #3]
 800a138:	f7f9 fa19 	bl	800356e <HAL_PCD_EP_Open>
 800a13c:	4603      	mov	r3, r0
 800a13e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a140:	7bfb      	ldrb	r3, [r7, #15]
 800a142:	4618      	mov	r0, r3
 800a144:	f000 f91c 	bl	800a380 <USBD_Get_USB_Status>
 800a148:	4603      	mov	r3, r0
 800a14a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a14c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b084      	sub	sp, #16
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	460b      	mov	r3, r1
 800a160:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a162:	2300      	movs	r3, #0
 800a164:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a170:	78fa      	ldrb	r2, [r7, #3]
 800a172:	4611      	mov	r1, r2
 800a174:	4618      	mov	r0, r3
 800a176:	f7f9 fa62 	bl	800363e <HAL_PCD_EP_Close>
 800a17a:	4603      	mov	r3, r0
 800a17c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
 800a180:	4618      	mov	r0, r3
 800a182:	f000 f8fd 	bl	800a380 <USBD_Get_USB_Status>
 800a186:	4603      	mov	r3, r0
 800a188:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a18a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	460b      	mov	r3, r1
 800a19e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1ae:	78fa      	ldrb	r2, [r7, #3]
 800a1b0:	4611      	mov	r1, r2
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7f9 fb3a 	bl	800382c <HAL_PCD_EP_SetStall>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1bc:	7bfb      	ldrb	r3, [r7, #15]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 f8de 	bl	800a380 <USBD_Get_USB_Status>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b084      	sub	sp, #16
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	460b      	mov	r3, r1
 800a1dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1ec:	78fa      	ldrb	r2, [r7, #3]
 800a1ee:	4611      	mov	r1, r2
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7f9 fb7f 	bl	80038f4 <HAL_PCD_EP_ClrStall>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1fa:	7bfb      	ldrb	r3, [r7, #15]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f000 f8bf 	bl	800a380 <USBD_Get_USB_Status>
 800a202:	4603      	mov	r3, r0
 800a204:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a206:	7bbb      	ldrb	r3, [r7, #14]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3710      	adds	r7, #16
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	460b      	mov	r3, r1
 800a21a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a222:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	da0b      	bge.n	800a244 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a22c:	78fb      	ldrb	r3, [r7, #3]
 800a22e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a232:	68f9      	ldr	r1, [r7, #12]
 800a234:	4613      	mov	r3, r2
 800a236:	00db      	lsls	r3, r3, #3
 800a238:	4413      	add	r3, r2
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	440b      	add	r3, r1
 800a23e:	333e      	adds	r3, #62	; 0x3e
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	e00b      	b.n	800a25c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a244:	78fb      	ldrb	r3, [r7, #3]
 800a246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a24a:	68f9      	ldr	r1, [r7, #12]
 800a24c:	4613      	mov	r3, r2
 800a24e:	00db      	lsls	r3, r3, #3
 800a250:	4413      	add	r3, r2
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	440b      	add	r3, r1
 800a256:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a25a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3714      	adds	r7, #20
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	460b      	mov	r3, r1
 800a272:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a282:	78fa      	ldrb	r2, [r7, #3]
 800a284:	4611      	mov	r1, r2
 800a286:	4618      	mov	r0, r3
 800a288:	f7f9 f94c 	bl	8003524 <HAL_PCD_SetAddress>
 800a28c:	4603      	mov	r3, r0
 800a28e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	4618      	mov	r0, r3
 800a294:	f000 f874 	bl	800a380 <USBD_Get_USB_Status>
 800a298:	4603      	mov	r3, r0
 800a29a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a29c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b086      	sub	sp, #24
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	60f8      	str	r0, [r7, #12]
 800a2ae:	607a      	str	r2, [r7, #4]
 800a2b0:	603b      	str	r3, [r7, #0]
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a2c4:	7af9      	ldrb	r1, [r7, #11]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	f7f9 fa65 	bl	8003798 <HAL_PCD_EP_Transmit>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2d2:	7dfb      	ldrb	r3, [r7, #23]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f000 f853 	bl	800a380 <USBD_Get_USB_Status>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2de:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3718      	adds	r7, #24
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b086      	sub	sp, #24
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	607a      	str	r2, [r7, #4]
 800a2f2:	603b      	str	r3, [r7, #0]
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a306:	7af9      	ldrb	r1, [r7, #11]
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	f7f9 f9e1 	bl	80036d2 <HAL_PCD_EP_Receive>
 800a310:	4603      	mov	r3, r0
 800a312:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a314:	7dfb      	ldrb	r3, [r7, #23]
 800a316:	4618      	mov	r0, r3
 800a318:	f000 f832 	bl	800a380 <USBD_Get_USB_Status>
 800a31c:	4603      	mov	r3, r0
 800a31e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a320:	7dbb      	ldrb	r3, [r7, #22]
}
 800a322:	4618      	mov	r0, r3
 800a324:	3718      	adds	r7, #24
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b082      	sub	sp, #8
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
 800a332:	460b      	mov	r3, r1
 800a334:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a33c:	78fa      	ldrb	r2, [r7, #3]
 800a33e:	4611      	mov	r1, r2
 800a340:	4618      	mov	r0, r3
 800a342:	f7f9 fa11 	bl	8003768 <HAL_PCD_EP_GetRxCount>
 800a346:	4603      	mov	r3, r0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a358:	4b03      	ldr	r3, [pc, #12]	; (800a368 <USBD_static_malloc+0x18>)
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	370c      	adds	r7, #12
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	20001df4 	.word	0x20001df4

0800a36c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]

}
 800a374:	bf00      	nop
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	4603      	mov	r3, r0
 800a388:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a38e:	79fb      	ldrb	r3, [r7, #7]
 800a390:	2b03      	cmp	r3, #3
 800a392:	d817      	bhi.n	800a3c4 <USBD_Get_USB_Status+0x44>
 800a394:	a201      	add	r2, pc, #4	; (adr r2, 800a39c <USBD_Get_USB_Status+0x1c>)
 800a396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39a:	bf00      	nop
 800a39c:	0800a3ad 	.word	0x0800a3ad
 800a3a0:	0800a3b3 	.word	0x0800a3b3
 800a3a4:	0800a3b9 	.word	0x0800a3b9
 800a3a8:	0800a3bf 	.word	0x0800a3bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b0:	e00b      	b.n	800a3ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b6:	e008      	b.n	800a3ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a3bc:	e005      	b.n	800a3ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3be:	2303      	movs	r3, #3
 800a3c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3c2:	e002      	b.n	800a3ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3c8:	bf00      	nop
  }
  return usb_status;
 800a3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3714      	adds	r7, #20
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <__errno>:
 800a3d8:	4b01      	ldr	r3, [pc, #4]	; (800a3e0 <__errno+0x8>)
 800a3da:	6818      	ldr	r0, [r3, #0]
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	20000124 	.word	0x20000124

0800a3e4 <__libc_init_array>:
 800a3e4:	b570      	push	{r4, r5, r6, lr}
 800a3e6:	4d0d      	ldr	r5, [pc, #52]	; (800a41c <__libc_init_array+0x38>)
 800a3e8:	4c0d      	ldr	r4, [pc, #52]	; (800a420 <__libc_init_array+0x3c>)
 800a3ea:	1b64      	subs	r4, r4, r5
 800a3ec:	10a4      	asrs	r4, r4, #2
 800a3ee:	2600      	movs	r6, #0
 800a3f0:	42a6      	cmp	r6, r4
 800a3f2:	d109      	bne.n	800a408 <__libc_init_array+0x24>
 800a3f4:	4d0b      	ldr	r5, [pc, #44]	; (800a424 <__libc_init_array+0x40>)
 800a3f6:	4c0c      	ldr	r4, [pc, #48]	; (800a428 <__libc_init_array+0x44>)
 800a3f8:	f000 fc8e 	bl	800ad18 <_init>
 800a3fc:	1b64      	subs	r4, r4, r5
 800a3fe:	10a4      	asrs	r4, r4, #2
 800a400:	2600      	movs	r6, #0
 800a402:	42a6      	cmp	r6, r4
 800a404:	d105      	bne.n	800a412 <__libc_init_array+0x2e>
 800a406:	bd70      	pop	{r4, r5, r6, pc}
 800a408:	f855 3b04 	ldr.w	r3, [r5], #4
 800a40c:	4798      	blx	r3
 800a40e:	3601      	adds	r6, #1
 800a410:	e7ee      	b.n	800a3f0 <__libc_init_array+0xc>
 800a412:	f855 3b04 	ldr.w	r3, [r5], #4
 800a416:	4798      	blx	r3
 800a418:	3601      	adds	r6, #1
 800a41a:	e7f2      	b.n	800a402 <__libc_init_array+0x1e>
 800a41c:	0800ade4 	.word	0x0800ade4
 800a420:	0800ade4 	.word	0x0800ade4
 800a424:	0800ade4 	.word	0x0800ade4
 800a428:	0800ade8 	.word	0x0800ade8

0800a42c <memset>:
 800a42c:	4402      	add	r2, r0
 800a42e:	4603      	mov	r3, r0
 800a430:	4293      	cmp	r3, r2
 800a432:	d100      	bne.n	800a436 <memset+0xa>
 800a434:	4770      	bx	lr
 800a436:	f803 1b01 	strb.w	r1, [r3], #1
 800a43a:	e7f9      	b.n	800a430 <memset+0x4>

0800a43c <siprintf>:
 800a43c:	b40e      	push	{r1, r2, r3}
 800a43e:	b500      	push	{lr}
 800a440:	b09c      	sub	sp, #112	; 0x70
 800a442:	ab1d      	add	r3, sp, #116	; 0x74
 800a444:	9002      	str	r0, [sp, #8]
 800a446:	9006      	str	r0, [sp, #24]
 800a448:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a44c:	4809      	ldr	r0, [pc, #36]	; (800a474 <siprintf+0x38>)
 800a44e:	9107      	str	r1, [sp, #28]
 800a450:	9104      	str	r1, [sp, #16]
 800a452:	4909      	ldr	r1, [pc, #36]	; (800a478 <siprintf+0x3c>)
 800a454:	f853 2b04 	ldr.w	r2, [r3], #4
 800a458:	9105      	str	r1, [sp, #20]
 800a45a:	6800      	ldr	r0, [r0, #0]
 800a45c:	9301      	str	r3, [sp, #4]
 800a45e:	a902      	add	r1, sp, #8
 800a460:	f000 f868 	bl	800a534 <_svfiprintf_r>
 800a464:	9b02      	ldr	r3, [sp, #8]
 800a466:	2200      	movs	r2, #0
 800a468:	701a      	strb	r2, [r3, #0]
 800a46a:	b01c      	add	sp, #112	; 0x70
 800a46c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a470:	b003      	add	sp, #12
 800a472:	4770      	bx	lr
 800a474:	20000124 	.word	0x20000124
 800a478:	ffff0208 	.word	0xffff0208

0800a47c <__ssputs_r>:
 800a47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a480:	688e      	ldr	r6, [r1, #8]
 800a482:	429e      	cmp	r6, r3
 800a484:	4682      	mov	sl, r0
 800a486:	460c      	mov	r4, r1
 800a488:	4690      	mov	r8, r2
 800a48a:	461f      	mov	r7, r3
 800a48c:	d838      	bhi.n	800a500 <__ssputs_r+0x84>
 800a48e:	898a      	ldrh	r2, [r1, #12]
 800a490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a494:	d032      	beq.n	800a4fc <__ssputs_r+0x80>
 800a496:	6825      	ldr	r5, [r4, #0]
 800a498:	6909      	ldr	r1, [r1, #16]
 800a49a:	eba5 0901 	sub.w	r9, r5, r1
 800a49e:	6965      	ldr	r5, [r4, #20]
 800a4a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	444b      	add	r3, r9
 800a4ac:	106d      	asrs	r5, r5, #1
 800a4ae:	429d      	cmp	r5, r3
 800a4b0:	bf38      	it	cc
 800a4b2:	461d      	movcc	r5, r3
 800a4b4:	0553      	lsls	r3, r2, #21
 800a4b6:	d531      	bpl.n	800a51c <__ssputs_r+0xa0>
 800a4b8:	4629      	mov	r1, r5
 800a4ba:	f000 fb63 	bl	800ab84 <_malloc_r>
 800a4be:	4606      	mov	r6, r0
 800a4c0:	b950      	cbnz	r0, 800a4d8 <__ssputs_r+0x5c>
 800a4c2:	230c      	movs	r3, #12
 800a4c4:	f8ca 3000 	str.w	r3, [sl]
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ce:	81a3      	strh	r3, [r4, #12]
 800a4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d8:	6921      	ldr	r1, [r4, #16]
 800a4da:	464a      	mov	r2, r9
 800a4dc:	f000 fabe 	bl	800aa5c <memcpy>
 800a4e0:	89a3      	ldrh	r3, [r4, #12]
 800a4e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a4e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4ea:	81a3      	strh	r3, [r4, #12]
 800a4ec:	6126      	str	r6, [r4, #16]
 800a4ee:	6165      	str	r5, [r4, #20]
 800a4f0:	444e      	add	r6, r9
 800a4f2:	eba5 0509 	sub.w	r5, r5, r9
 800a4f6:	6026      	str	r6, [r4, #0]
 800a4f8:	60a5      	str	r5, [r4, #8]
 800a4fa:	463e      	mov	r6, r7
 800a4fc:	42be      	cmp	r6, r7
 800a4fe:	d900      	bls.n	800a502 <__ssputs_r+0x86>
 800a500:	463e      	mov	r6, r7
 800a502:	6820      	ldr	r0, [r4, #0]
 800a504:	4632      	mov	r2, r6
 800a506:	4641      	mov	r1, r8
 800a508:	f000 fab6 	bl	800aa78 <memmove>
 800a50c:	68a3      	ldr	r3, [r4, #8]
 800a50e:	1b9b      	subs	r3, r3, r6
 800a510:	60a3      	str	r3, [r4, #8]
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	4433      	add	r3, r6
 800a516:	6023      	str	r3, [r4, #0]
 800a518:	2000      	movs	r0, #0
 800a51a:	e7db      	b.n	800a4d4 <__ssputs_r+0x58>
 800a51c:	462a      	mov	r2, r5
 800a51e:	f000 fba5 	bl	800ac6c <_realloc_r>
 800a522:	4606      	mov	r6, r0
 800a524:	2800      	cmp	r0, #0
 800a526:	d1e1      	bne.n	800a4ec <__ssputs_r+0x70>
 800a528:	6921      	ldr	r1, [r4, #16]
 800a52a:	4650      	mov	r0, sl
 800a52c:	f000 fabe 	bl	800aaac <_free_r>
 800a530:	e7c7      	b.n	800a4c2 <__ssputs_r+0x46>
	...

0800a534 <_svfiprintf_r>:
 800a534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a538:	4698      	mov	r8, r3
 800a53a:	898b      	ldrh	r3, [r1, #12]
 800a53c:	061b      	lsls	r3, r3, #24
 800a53e:	b09d      	sub	sp, #116	; 0x74
 800a540:	4607      	mov	r7, r0
 800a542:	460d      	mov	r5, r1
 800a544:	4614      	mov	r4, r2
 800a546:	d50e      	bpl.n	800a566 <_svfiprintf_r+0x32>
 800a548:	690b      	ldr	r3, [r1, #16]
 800a54a:	b963      	cbnz	r3, 800a566 <_svfiprintf_r+0x32>
 800a54c:	2140      	movs	r1, #64	; 0x40
 800a54e:	f000 fb19 	bl	800ab84 <_malloc_r>
 800a552:	6028      	str	r0, [r5, #0]
 800a554:	6128      	str	r0, [r5, #16]
 800a556:	b920      	cbnz	r0, 800a562 <_svfiprintf_r+0x2e>
 800a558:	230c      	movs	r3, #12
 800a55a:	603b      	str	r3, [r7, #0]
 800a55c:	f04f 30ff 	mov.w	r0, #4294967295
 800a560:	e0d1      	b.n	800a706 <_svfiprintf_r+0x1d2>
 800a562:	2340      	movs	r3, #64	; 0x40
 800a564:	616b      	str	r3, [r5, #20]
 800a566:	2300      	movs	r3, #0
 800a568:	9309      	str	r3, [sp, #36]	; 0x24
 800a56a:	2320      	movs	r3, #32
 800a56c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a570:	f8cd 800c 	str.w	r8, [sp, #12]
 800a574:	2330      	movs	r3, #48	; 0x30
 800a576:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a720 <_svfiprintf_r+0x1ec>
 800a57a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a57e:	f04f 0901 	mov.w	r9, #1
 800a582:	4623      	mov	r3, r4
 800a584:	469a      	mov	sl, r3
 800a586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a58a:	b10a      	cbz	r2, 800a590 <_svfiprintf_r+0x5c>
 800a58c:	2a25      	cmp	r2, #37	; 0x25
 800a58e:	d1f9      	bne.n	800a584 <_svfiprintf_r+0x50>
 800a590:	ebba 0b04 	subs.w	fp, sl, r4
 800a594:	d00b      	beq.n	800a5ae <_svfiprintf_r+0x7a>
 800a596:	465b      	mov	r3, fp
 800a598:	4622      	mov	r2, r4
 800a59a:	4629      	mov	r1, r5
 800a59c:	4638      	mov	r0, r7
 800a59e:	f7ff ff6d 	bl	800a47c <__ssputs_r>
 800a5a2:	3001      	adds	r0, #1
 800a5a4:	f000 80aa 	beq.w	800a6fc <_svfiprintf_r+0x1c8>
 800a5a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5aa:	445a      	add	r2, fp
 800a5ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a5ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f000 80a2 	beq.w	800a6fc <_svfiprintf_r+0x1c8>
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a5be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5c2:	f10a 0a01 	add.w	sl, sl, #1
 800a5c6:	9304      	str	r3, [sp, #16]
 800a5c8:	9307      	str	r3, [sp, #28]
 800a5ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5ce:	931a      	str	r3, [sp, #104]	; 0x68
 800a5d0:	4654      	mov	r4, sl
 800a5d2:	2205      	movs	r2, #5
 800a5d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5d8:	4851      	ldr	r0, [pc, #324]	; (800a720 <_svfiprintf_r+0x1ec>)
 800a5da:	f7f5 fe01 	bl	80001e0 <memchr>
 800a5de:	9a04      	ldr	r2, [sp, #16]
 800a5e0:	b9d8      	cbnz	r0, 800a61a <_svfiprintf_r+0xe6>
 800a5e2:	06d0      	lsls	r0, r2, #27
 800a5e4:	bf44      	itt	mi
 800a5e6:	2320      	movmi	r3, #32
 800a5e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5ec:	0711      	lsls	r1, r2, #28
 800a5ee:	bf44      	itt	mi
 800a5f0:	232b      	movmi	r3, #43	; 0x2b
 800a5f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a5fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a5fc:	d015      	beq.n	800a62a <_svfiprintf_r+0xf6>
 800a5fe:	9a07      	ldr	r2, [sp, #28]
 800a600:	4654      	mov	r4, sl
 800a602:	2000      	movs	r0, #0
 800a604:	f04f 0c0a 	mov.w	ip, #10
 800a608:	4621      	mov	r1, r4
 800a60a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a60e:	3b30      	subs	r3, #48	; 0x30
 800a610:	2b09      	cmp	r3, #9
 800a612:	d94e      	bls.n	800a6b2 <_svfiprintf_r+0x17e>
 800a614:	b1b0      	cbz	r0, 800a644 <_svfiprintf_r+0x110>
 800a616:	9207      	str	r2, [sp, #28]
 800a618:	e014      	b.n	800a644 <_svfiprintf_r+0x110>
 800a61a:	eba0 0308 	sub.w	r3, r0, r8
 800a61e:	fa09 f303 	lsl.w	r3, r9, r3
 800a622:	4313      	orrs	r3, r2
 800a624:	9304      	str	r3, [sp, #16]
 800a626:	46a2      	mov	sl, r4
 800a628:	e7d2      	b.n	800a5d0 <_svfiprintf_r+0x9c>
 800a62a:	9b03      	ldr	r3, [sp, #12]
 800a62c:	1d19      	adds	r1, r3, #4
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	9103      	str	r1, [sp, #12]
 800a632:	2b00      	cmp	r3, #0
 800a634:	bfbb      	ittet	lt
 800a636:	425b      	neglt	r3, r3
 800a638:	f042 0202 	orrlt.w	r2, r2, #2
 800a63c:	9307      	strge	r3, [sp, #28]
 800a63e:	9307      	strlt	r3, [sp, #28]
 800a640:	bfb8      	it	lt
 800a642:	9204      	strlt	r2, [sp, #16]
 800a644:	7823      	ldrb	r3, [r4, #0]
 800a646:	2b2e      	cmp	r3, #46	; 0x2e
 800a648:	d10c      	bne.n	800a664 <_svfiprintf_r+0x130>
 800a64a:	7863      	ldrb	r3, [r4, #1]
 800a64c:	2b2a      	cmp	r3, #42	; 0x2a
 800a64e:	d135      	bne.n	800a6bc <_svfiprintf_r+0x188>
 800a650:	9b03      	ldr	r3, [sp, #12]
 800a652:	1d1a      	adds	r2, r3, #4
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	9203      	str	r2, [sp, #12]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	bfb8      	it	lt
 800a65c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a660:	3402      	adds	r4, #2
 800a662:	9305      	str	r3, [sp, #20]
 800a664:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a730 <_svfiprintf_r+0x1fc>
 800a668:	7821      	ldrb	r1, [r4, #0]
 800a66a:	2203      	movs	r2, #3
 800a66c:	4650      	mov	r0, sl
 800a66e:	f7f5 fdb7 	bl	80001e0 <memchr>
 800a672:	b140      	cbz	r0, 800a686 <_svfiprintf_r+0x152>
 800a674:	2340      	movs	r3, #64	; 0x40
 800a676:	eba0 000a 	sub.w	r0, r0, sl
 800a67a:	fa03 f000 	lsl.w	r0, r3, r0
 800a67e:	9b04      	ldr	r3, [sp, #16]
 800a680:	4303      	orrs	r3, r0
 800a682:	3401      	adds	r4, #1
 800a684:	9304      	str	r3, [sp, #16]
 800a686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a68a:	4826      	ldr	r0, [pc, #152]	; (800a724 <_svfiprintf_r+0x1f0>)
 800a68c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a690:	2206      	movs	r2, #6
 800a692:	f7f5 fda5 	bl	80001e0 <memchr>
 800a696:	2800      	cmp	r0, #0
 800a698:	d038      	beq.n	800a70c <_svfiprintf_r+0x1d8>
 800a69a:	4b23      	ldr	r3, [pc, #140]	; (800a728 <_svfiprintf_r+0x1f4>)
 800a69c:	bb1b      	cbnz	r3, 800a6e6 <_svfiprintf_r+0x1b2>
 800a69e:	9b03      	ldr	r3, [sp, #12]
 800a6a0:	3307      	adds	r3, #7
 800a6a2:	f023 0307 	bic.w	r3, r3, #7
 800a6a6:	3308      	adds	r3, #8
 800a6a8:	9303      	str	r3, [sp, #12]
 800a6aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6ac:	4433      	add	r3, r6
 800a6ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a6b0:	e767      	b.n	800a582 <_svfiprintf_r+0x4e>
 800a6b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6b6:	460c      	mov	r4, r1
 800a6b8:	2001      	movs	r0, #1
 800a6ba:	e7a5      	b.n	800a608 <_svfiprintf_r+0xd4>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	3401      	adds	r4, #1
 800a6c0:	9305      	str	r3, [sp, #20]
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	f04f 0c0a 	mov.w	ip, #10
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6ce:	3a30      	subs	r2, #48	; 0x30
 800a6d0:	2a09      	cmp	r2, #9
 800a6d2:	d903      	bls.n	800a6dc <_svfiprintf_r+0x1a8>
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d0c5      	beq.n	800a664 <_svfiprintf_r+0x130>
 800a6d8:	9105      	str	r1, [sp, #20]
 800a6da:	e7c3      	b.n	800a664 <_svfiprintf_r+0x130>
 800a6dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e7f0      	b.n	800a6c8 <_svfiprintf_r+0x194>
 800a6e6:	ab03      	add	r3, sp, #12
 800a6e8:	9300      	str	r3, [sp, #0]
 800a6ea:	462a      	mov	r2, r5
 800a6ec:	4b0f      	ldr	r3, [pc, #60]	; (800a72c <_svfiprintf_r+0x1f8>)
 800a6ee:	a904      	add	r1, sp, #16
 800a6f0:	4638      	mov	r0, r7
 800a6f2:	f3af 8000 	nop.w
 800a6f6:	1c42      	adds	r2, r0, #1
 800a6f8:	4606      	mov	r6, r0
 800a6fa:	d1d6      	bne.n	800a6aa <_svfiprintf_r+0x176>
 800a6fc:	89ab      	ldrh	r3, [r5, #12]
 800a6fe:	065b      	lsls	r3, r3, #25
 800a700:	f53f af2c 	bmi.w	800a55c <_svfiprintf_r+0x28>
 800a704:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a706:	b01d      	add	sp, #116	; 0x74
 800a708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a70c:	ab03      	add	r3, sp, #12
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	462a      	mov	r2, r5
 800a712:	4b06      	ldr	r3, [pc, #24]	; (800a72c <_svfiprintf_r+0x1f8>)
 800a714:	a904      	add	r1, sp, #16
 800a716:	4638      	mov	r0, r7
 800a718:	f000 f87a 	bl	800a810 <_printf_i>
 800a71c:	e7eb      	b.n	800a6f6 <_svfiprintf_r+0x1c2>
 800a71e:	bf00      	nop
 800a720:	0800ada8 	.word	0x0800ada8
 800a724:	0800adb2 	.word	0x0800adb2
 800a728:	00000000 	.word	0x00000000
 800a72c:	0800a47d 	.word	0x0800a47d
 800a730:	0800adae 	.word	0x0800adae

0800a734 <_printf_common>:
 800a734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a738:	4616      	mov	r6, r2
 800a73a:	4699      	mov	r9, r3
 800a73c:	688a      	ldr	r2, [r1, #8]
 800a73e:	690b      	ldr	r3, [r1, #16]
 800a740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a744:	4293      	cmp	r3, r2
 800a746:	bfb8      	it	lt
 800a748:	4613      	movlt	r3, r2
 800a74a:	6033      	str	r3, [r6, #0]
 800a74c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a750:	4607      	mov	r7, r0
 800a752:	460c      	mov	r4, r1
 800a754:	b10a      	cbz	r2, 800a75a <_printf_common+0x26>
 800a756:	3301      	adds	r3, #1
 800a758:	6033      	str	r3, [r6, #0]
 800a75a:	6823      	ldr	r3, [r4, #0]
 800a75c:	0699      	lsls	r1, r3, #26
 800a75e:	bf42      	ittt	mi
 800a760:	6833      	ldrmi	r3, [r6, #0]
 800a762:	3302      	addmi	r3, #2
 800a764:	6033      	strmi	r3, [r6, #0]
 800a766:	6825      	ldr	r5, [r4, #0]
 800a768:	f015 0506 	ands.w	r5, r5, #6
 800a76c:	d106      	bne.n	800a77c <_printf_common+0x48>
 800a76e:	f104 0a19 	add.w	sl, r4, #25
 800a772:	68e3      	ldr	r3, [r4, #12]
 800a774:	6832      	ldr	r2, [r6, #0]
 800a776:	1a9b      	subs	r3, r3, r2
 800a778:	42ab      	cmp	r3, r5
 800a77a:	dc26      	bgt.n	800a7ca <_printf_common+0x96>
 800a77c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a780:	1e13      	subs	r3, r2, #0
 800a782:	6822      	ldr	r2, [r4, #0]
 800a784:	bf18      	it	ne
 800a786:	2301      	movne	r3, #1
 800a788:	0692      	lsls	r2, r2, #26
 800a78a:	d42b      	bmi.n	800a7e4 <_printf_common+0xb0>
 800a78c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a790:	4649      	mov	r1, r9
 800a792:	4638      	mov	r0, r7
 800a794:	47c0      	blx	r8
 800a796:	3001      	adds	r0, #1
 800a798:	d01e      	beq.n	800a7d8 <_printf_common+0xa4>
 800a79a:	6823      	ldr	r3, [r4, #0]
 800a79c:	68e5      	ldr	r5, [r4, #12]
 800a79e:	6832      	ldr	r2, [r6, #0]
 800a7a0:	f003 0306 	and.w	r3, r3, #6
 800a7a4:	2b04      	cmp	r3, #4
 800a7a6:	bf08      	it	eq
 800a7a8:	1aad      	subeq	r5, r5, r2
 800a7aa:	68a3      	ldr	r3, [r4, #8]
 800a7ac:	6922      	ldr	r2, [r4, #16]
 800a7ae:	bf0c      	ite	eq
 800a7b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7b4:	2500      	movne	r5, #0
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	bfc4      	itt	gt
 800a7ba:	1a9b      	subgt	r3, r3, r2
 800a7bc:	18ed      	addgt	r5, r5, r3
 800a7be:	2600      	movs	r6, #0
 800a7c0:	341a      	adds	r4, #26
 800a7c2:	42b5      	cmp	r5, r6
 800a7c4:	d11a      	bne.n	800a7fc <_printf_common+0xc8>
 800a7c6:	2000      	movs	r0, #0
 800a7c8:	e008      	b.n	800a7dc <_printf_common+0xa8>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	4652      	mov	r2, sl
 800a7ce:	4649      	mov	r1, r9
 800a7d0:	4638      	mov	r0, r7
 800a7d2:	47c0      	blx	r8
 800a7d4:	3001      	adds	r0, #1
 800a7d6:	d103      	bne.n	800a7e0 <_printf_common+0xac>
 800a7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e0:	3501      	adds	r5, #1
 800a7e2:	e7c6      	b.n	800a772 <_printf_common+0x3e>
 800a7e4:	18e1      	adds	r1, r4, r3
 800a7e6:	1c5a      	adds	r2, r3, #1
 800a7e8:	2030      	movs	r0, #48	; 0x30
 800a7ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7ee:	4422      	add	r2, r4
 800a7f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7f8:	3302      	adds	r3, #2
 800a7fa:	e7c7      	b.n	800a78c <_printf_common+0x58>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	4622      	mov	r2, r4
 800a800:	4649      	mov	r1, r9
 800a802:	4638      	mov	r0, r7
 800a804:	47c0      	blx	r8
 800a806:	3001      	adds	r0, #1
 800a808:	d0e6      	beq.n	800a7d8 <_printf_common+0xa4>
 800a80a:	3601      	adds	r6, #1
 800a80c:	e7d9      	b.n	800a7c2 <_printf_common+0x8e>
	...

0800a810 <_printf_i>:
 800a810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a814:	7e0f      	ldrb	r7, [r1, #24]
 800a816:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a818:	2f78      	cmp	r7, #120	; 0x78
 800a81a:	4691      	mov	r9, r2
 800a81c:	4680      	mov	r8, r0
 800a81e:	460c      	mov	r4, r1
 800a820:	469a      	mov	sl, r3
 800a822:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a826:	d807      	bhi.n	800a838 <_printf_i+0x28>
 800a828:	2f62      	cmp	r7, #98	; 0x62
 800a82a:	d80a      	bhi.n	800a842 <_printf_i+0x32>
 800a82c:	2f00      	cmp	r7, #0
 800a82e:	f000 80d8 	beq.w	800a9e2 <_printf_i+0x1d2>
 800a832:	2f58      	cmp	r7, #88	; 0x58
 800a834:	f000 80a3 	beq.w	800a97e <_printf_i+0x16e>
 800a838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a83c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a840:	e03a      	b.n	800a8b8 <_printf_i+0xa8>
 800a842:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a846:	2b15      	cmp	r3, #21
 800a848:	d8f6      	bhi.n	800a838 <_printf_i+0x28>
 800a84a:	a101      	add	r1, pc, #4	; (adr r1, 800a850 <_printf_i+0x40>)
 800a84c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a850:	0800a8a9 	.word	0x0800a8a9
 800a854:	0800a8bd 	.word	0x0800a8bd
 800a858:	0800a839 	.word	0x0800a839
 800a85c:	0800a839 	.word	0x0800a839
 800a860:	0800a839 	.word	0x0800a839
 800a864:	0800a839 	.word	0x0800a839
 800a868:	0800a8bd 	.word	0x0800a8bd
 800a86c:	0800a839 	.word	0x0800a839
 800a870:	0800a839 	.word	0x0800a839
 800a874:	0800a839 	.word	0x0800a839
 800a878:	0800a839 	.word	0x0800a839
 800a87c:	0800a9c9 	.word	0x0800a9c9
 800a880:	0800a8ed 	.word	0x0800a8ed
 800a884:	0800a9ab 	.word	0x0800a9ab
 800a888:	0800a839 	.word	0x0800a839
 800a88c:	0800a839 	.word	0x0800a839
 800a890:	0800a9eb 	.word	0x0800a9eb
 800a894:	0800a839 	.word	0x0800a839
 800a898:	0800a8ed 	.word	0x0800a8ed
 800a89c:	0800a839 	.word	0x0800a839
 800a8a0:	0800a839 	.word	0x0800a839
 800a8a4:	0800a9b3 	.word	0x0800a9b3
 800a8a8:	682b      	ldr	r3, [r5, #0]
 800a8aa:	1d1a      	adds	r2, r3, #4
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	602a      	str	r2, [r5, #0]
 800a8b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e0a3      	b.n	800aa04 <_printf_i+0x1f4>
 800a8bc:	6820      	ldr	r0, [r4, #0]
 800a8be:	6829      	ldr	r1, [r5, #0]
 800a8c0:	0606      	lsls	r6, r0, #24
 800a8c2:	f101 0304 	add.w	r3, r1, #4
 800a8c6:	d50a      	bpl.n	800a8de <_printf_i+0xce>
 800a8c8:	680e      	ldr	r6, [r1, #0]
 800a8ca:	602b      	str	r3, [r5, #0]
 800a8cc:	2e00      	cmp	r6, #0
 800a8ce:	da03      	bge.n	800a8d8 <_printf_i+0xc8>
 800a8d0:	232d      	movs	r3, #45	; 0x2d
 800a8d2:	4276      	negs	r6, r6
 800a8d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8d8:	485e      	ldr	r0, [pc, #376]	; (800aa54 <_printf_i+0x244>)
 800a8da:	230a      	movs	r3, #10
 800a8dc:	e019      	b.n	800a912 <_printf_i+0x102>
 800a8de:	680e      	ldr	r6, [r1, #0]
 800a8e0:	602b      	str	r3, [r5, #0]
 800a8e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a8e6:	bf18      	it	ne
 800a8e8:	b236      	sxthne	r6, r6
 800a8ea:	e7ef      	b.n	800a8cc <_printf_i+0xbc>
 800a8ec:	682b      	ldr	r3, [r5, #0]
 800a8ee:	6820      	ldr	r0, [r4, #0]
 800a8f0:	1d19      	adds	r1, r3, #4
 800a8f2:	6029      	str	r1, [r5, #0]
 800a8f4:	0601      	lsls	r1, r0, #24
 800a8f6:	d501      	bpl.n	800a8fc <_printf_i+0xec>
 800a8f8:	681e      	ldr	r6, [r3, #0]
 800a8fa:	e002      	b.n	800a902 <_printf_i+0xf2>
 800a8fc:	0646      	lsls	r6, r0, #25
 800a8fe:	d5fb      	bpl.n	800a8f8 <_printf_i+0xe8>
 800a900:	881e      	ldrh	r6, [r3, #0]
 800a902:	4854      	ldr	r0, [pc, #336]	; (800aa54 <_printf_i+0x244>)
 800a904:	2f6f      	cmp	r7, #111	; 0x6f
 800a906:	bf0c      	ite	eq
 800a908:	2308      	moveq	r3, #8
 800a90a:	230a      	movne	r3, #10
 800a90c:	2100      	movs	r1, #0
 800a90e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a912:	6865      	ldr	r5, [r4, #4]
 800a914:	60a5      	str	r5, [r4, #8]
 800a916:	2d00      	cmp	r5, #0
 800a918:	bfa2      	ittt	ge
 800a91a:	6821      	ldrge	r1, [r4, #0]
 800a91c:	f021 0104 	bicge.w	r1, r1, #4
 800a920:	6021      	strge	r1, [r4, #0]
 800a922:	b90e      	cbnz	r6, 800a928 <_printf_i+0x118>
 800a924:	2d00      	cmp	r5, #0
 800a926:	d04d      	beq.n	800a9c4 <_printf_i+0x1b4>
 800a928:	4615      	mov	r5, r2
 800a92a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a92e:	fb03 6711 	mls	r7, r3, r1, r6
 800a932:	5dc7      	ldrb	r7, [r0, r7]
 800a934:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a938:	4637      	mov	r7, r6
 800a93a:	42bb      	cmp	r3, r7
 800a93c:	460e      	mov	r6, r1
 800a93e:	d9f4      	bls.n	800a92a <_printf_i+0x11a>
 800a940:	2b08      	cmp	r3, #8
 800a942:	d10b      	bne.n	800a95c <_printf_i+0x14c>
 800a944:	6823      	ldr	r3, [r4, #0]
 800a946:	07de      	lsls	r6, r3, #31
 800a948:	d508      	bpl.n	800a95c <_printf_i+0x14c>
 800a94a:	6923      	ldr	r3, [r4, #16]
 800a94c:	6861      	ldr	r1, [r4, #4]
 800a94e:	4299      	cmp	r1, r3
 800a950:	bfde      	ittt	le
 800a952:	2330      	movle	r3, #48	; 0x30
 800a954:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a958:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a95c:	1b52      	subs	r2, r2, r5
 800a95e:	6122      	str	r2, [r4, #16]
 800a960:	f8cd a000 	str.w	sl, [sp]
 800a964:	464b      	mov	r3, r9
 800a966:	aa03      	add	r2, sp, #12
 800a968:	4621      	mov	r1, r4
 800a96a:	4640      	mov	r0, r8
 800a96c:	f7ff fee2 	bl	800a734 <_printf_common>
 800a970:	3001      	adds	r0, #1
 800a972:	d14c      	bne.n	800aa0e <_printf_i+0x1fe>
 800a974:	f04f 30ff 	mov.w	r0, #4294967295
 800a978:	b004      	add	sp, #16
 800a97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a97e:	4835      	ldr	r0, [pc, #212]	; (800aa54 <_printf_i+0x244>)
 800a980:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a984:	6829      	ldr	r1, [r5, #0]
 800a986:	6823      	ldr	r3, [r4, #0]
 800a988:	f851 6b04 	ldr.w	r6, [r1], #4
 800a98c:	6029      	str	r1, [r5, #0]
 800a98e:	061d      	lsls	r5, r3, #24
 800a990:	d514      	bpl.n	800a9bc <_printf_i+0x1ac>
 800a992:	07df      	lsls	r7, r3, #31
 800a994:	bf44      	itt	mi
 800a996:	f043 0320 	orrmi.w	r3, r3, #32
 800a99a:	6023      	strmi	r3, [r4, #0]
 800a99c:	b91e      	cbnz	r6, 800a9a6 <_printf_i+0x196>
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	f023 0320 	bic.w	r3, r3, #32
 800a9a4:	6023      	str	r3, [r4, #0]
 800a9a6:	2310      	movs	r3, #16
 800a9a8:	e7b0      	b.n	800a90c <_printf_i+0xfc>
 800a9aa:	6823      	ldr	r3, [r4, #0]
 800a9ac:	f043 0320 	orr.w	r3, r3, #32
 800a9b0:	6023      	str	r3, [r4, #0]
 800a9b2:	2378      	movs	r3, #120	; 0x78
 800a9b4:	4828      	ldr	r0, [pc, #160]	; (800aa58 <_printf_i+0x248>)
 800a9b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9ba:	e7e3      	b.n	800a984 <_printf_i+0x174>
 800a9bc:	0659      	lsls	r1, r3, #25
 800a9be:	bf48      	it	mi
 800a9c0:	b2b6      	uxthmi	r6, r6
 800a9c2:	e7e6      	b.n	800a992 <_printf_i+0x182>
 800a9c4:	4615      	mov	r5, r2
 800a9c6:	e7bb      	b.n	800a940 <_printf_i+0x130>
 800a9c8:	682b      	ldr	r3, [r5, #0]
 800a9ca:	6826      	ldr	r6, [r4, #0]
 800a9cc:	6961      	ldr	r1, [r4, #20]
 800a9ce:	1d18      	adds	r0, r3, #4
 800a9d0:	6028      	str	r0, [r5, #0]
 800a9d2:	0635      	lsls	r5, r6, #24
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	d501      	bpl.n	800a9dc <_printf_i+0x1cc>
 800a9d8:	6019      	str	r1, [r3, #0]
 800a9da:	e002      	b.n	800a9e2 <_printf_i+0x1d2>
 800a9dc:	0670      	lsls	r0, r6, #25
 800a9de:	d5fb      	bpl.n	800a9d8 <_printf_i+0x1c8>
 800a9e0:	8019      	strh	r1, [r3, #0]
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	6123      	str	r3, [r4, #16]
 800a9e6:	4615      	mov	r5, r2
 800a9e8:	e7ba      	b.n	800a960 <_printf_i+0x150>
 800a9ea:	682b      	ldr	r3, [r5, #0]
 800a9ec:	1d1a      	adds	r2, r3, #4
 800a9ee:	602a      	str	r2, [r5, #0]
 800a9f0:	681d      	ldr	r5, [r3, #0]
 800a9f2:	6862      	ldr	r2, [r4, #4]
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f7f5 fbf2 	bl	80001e0 <memchr>
 800a9fc:	b108      	cbz	r0, 800aa02 <_printf_i+0x1f2>
 800a9fe:	1b40      	subs	r0, r0, r5
 800aa00:	6060      	str	r0, [r4, #4]
 800aa02:	6863      	ldr	r3, [r4, #4]
 800aa04:	6123      	str	r3, [r4, #16]
 800aa06:	2300      	movs	r3, #0
 800aa08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa0c:	e7a8      	b.n	800a960 <_printf_i+0x150>
 800aa0e:	6923      	ldr	r3, [r4, #16]
 800aa10:	462a      	mov	r2, r5
 800aa12:	4649      	mov	r1, r9
 800aa14:	4640      	mov	r0, r8
 800aa16:	47d0      	blx	sl
 800aa18:	3001      	adds	r0, #1
 800aa1a:	d0ab      	beq.n	800a974 <_printf_i+0x164>
 800aa1c:	6823      	ldr	r3, [r4, #0]
 800aa1e:	079b      	lsls	r3, r3, #30
 800aa20:	d413      	bmi.n	800aa4a <_printf_i+0x23a>
 800aa22:	68e0      	ldr	r0, [r4, #12]
 800aa24:	9b03      	ldr	r3, [sp, #12]
 800aa26:	4298      	cmp	r0, r3
 800aa28:	bfb8      	it	lt
 800aa2a:	4618      	movlt	r0, r3
 800aa2c:	e7a4      	b.n	800a978 <_printf_i+0x168>
 800aa2e:	2301      	movs	r3, #1
 800aa30:	4632      	mov	r2, r6
 800aa32:	4649      	mov	r1, r9
 800aa34:	4640      	mov	r0, r8
 800aa36:	47d0      	blx	sl
 800aa38:	3001      	adds	r0, #1
 800aa3a:	d09b      	beq.n	800a974 <_printf_i+0x164>
 800aa3c:	3501      	adds	r5, #1
 800aa3e:	68e3      	ldr	r3, [r4, #12]
 800aa40:	9903      	ldr	r1, [sp, #12]
 800aa42:	1a5b      	subs	r3, r3, r1
 800aa44:	42ab      	cmp	r3, r5
 800aa46:	dcf2      	bgt.n	800aa2e <_printf_i+0x21e>
 800aa48:	e7eb      	b.n	800aa22 <_printf_i+0x212>
 800aa4a:	2500      	movs	r5, #0
 800aa4c:	f104 0619 	add.w	r6, r4, #25
 800aa50:	e7f5      	b.n	800aa3e <_printf_i+0x22e>
 800aa52:	bf00      	nop
 800aa54:	0800adb9 	.word	0x0800adb9
 800aa58:	0800adca 	.word	0x0800adca

0800aa5c <memcpy>:
 800aa5c:	440a      	add	r2, r1
 800aa5e:	4291      	cmp	r1, r2
 800aa60:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa64:	d100      	bne.n	800aa68 <memcpy+0xc>
 800aa66:	4770      	bx	lr
 800aa68:	b510      	push	{r4, lr}
 800aa6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa72:	4291      	cmp	r1, r2
 800aa74:	d1f9      	bne.n	800aa6a <memcpy+0xe>
 800aa76:	bd10      	pop	{r4, pc}

0800aa78 <memmove>:
 800aa78:	4288      	cmp	r0, r1
 800aa7a:	b510      	push	{r4, lr}
 800aa7c:	eb01 0402 	add.w	r4, r1, r2
 800aa80:	d902      	bls.n	800aa88 <memmove+0x10>
 800aa82:	4284      	cmp	r4, r0
 800aa84:	4623      	mov	r3, r4
 800aa86:	d807      	bhi.n	800aa98 <memmove+0x20>
 800aa88:	1e43      	subs	r3, r0, #1
 800aa8a:	42a1      	cmp	r1, r4
 800aa8c:	d008      	beq.n	800aaa0 <memmove+0x28>
 800aa8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa96:	e7f8      	b.n	800aa8a <memmove+0x12>
 800aa98:	4402      	add	r2, r0
 800aa9a:	4601      	mov	r1, r0
 800aa9c:	428a      	cmp	r2, r1
 800aa9e:	d100      	bne.n	800aaa2 <memmove+0x2a>
 800aaa0:	bd10      	pop	{r4, pc}
 800aaa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aaa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aaaa:	e7f7      	b.n	800aa9c <memmove+0x24>

0800aaac <_free_r>:
 800aaac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaae:	2900      	cmp	r1, #0
 800aab0:	d044      	beq.n	800ab3c <_free_r+0x90>
 800aab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aab6:	9001      	str	r0, [sp, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f1a1 0404 	sub.w	r4, r1, #4
 800aabe:	bfb8      	it	lt
 800aac0:	18e4      	addlt	r4, r4, r3
 800aac2:	f000 f913 	bl	800acec <__malloc_lock>
 800aac6:	4a1e      	ldr	r2, [pc, #120]	; (800ab40 <_free_r+0x94>)
 800aac8:	9801      	ldr	r0, [sp, #4]
 800aaca:	6813      	ldr	r3, [r2, #0]
 800aacc:	b933      	cbnz	r3, 800aadc <_free_r+0x30>
 800aace:	6063      	str	r3, [r4, #4]
 800aad0:	6014      	str	r4, [r2, #0]
 800aad2:	b003      	add	sp, #12
 800aad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aad8:	f000 b90e 	b.w	800acf8 <__malloc_unlock>
 800aadc:	42a3      	cmp	r3, r4
 800aade:	d908      	bls.n	800aaf2 <_free_r+0x46>
 800aae0:	6825      	ldr	r5, [r4, #0]
 800aae2:	1961      	adds	r1, r4, r5
 800aae4:	428b      	cmp	r3, r1
 800aae6:	bf01      	itttt	eq
 800aae8:	6819      	ldreq	r1, [r3, #0]
 800aaea:	685b      	ldreq	r3, [r3, #4]
 800aaec:	1949      	addeq	r1, r1, r5
 800aaee:	6021      	streq	r1, [r4, #0]
 800aaf0:	e7ed      	b.n	800aace <_free_r+0x22>
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	b10b      	cbz	r3, 800aafc <_free_r+0x50>
 800aaf8:	42a3      	cmp	r3, r4
 800aafa:	d9fa      	bls.n	800aaf2 <_free_r+0x46>
 800aafc:	6811      	ldr	r1, [r2, #0]
 800aafe:	1855      	adds	r5, r2, r1
 800ab00:	42a5      	cmp	r5, r4
 800ab02:	d10b      	bne.n	800ab1c <_free_r+0x70>
 800ab04:	6824      	ldr	r4, [r4, #0]
 800ab06:	4421      	add	r1, r4
 800ab08:	1854      	adds	r4, r2, r1
 800ab0a:	42a3      	cmp	r3, r4
 800ab0c:	6011      	str	r1, [r2, #0]
 800ab0e:	d1e0      	bne.n	800aad2 <_free_r+0x26>
 800ab10:	681c      	ldr	r4, [r3, #0]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	6053      	str	r3, [r2, #4]
 800ab16:	4421      	add	r1, r4
 800ab18:	6011      	str	r1, [r2, #0]
 800ab1a:	e7da      	b.n	800aad2 <_free_r+0x26>
 800ab1c:	d902      	bls.n	800ab24 <_free_r+0x78>
 800ab1e:	230c      	movs	r3, #12
 800ab20:	6003      	str	r3, [r0, #0]
 800ab22:	e7d6      	b.n	800aad2 <_free_r+0x26>
 800ab24:	6825      	ldr	r5, [r4, #0]
 800ab26:	1961      	adds	r1, r4, r5
 800ab28:	428b      	cmp	r3, r1
 800ab2a:	bf04      	itt	eq
 800ab2c:	6819      	ldreq	r1, [r3, #0]
 800ab2e:	685b      	ldreq	r3, [r3, #4]
 800ab30:	6063      	str	r3, [r4, #4]
 800ab32:	bf04      	itt	eq
 800ab34:	1949      	addeq	r1, r1, r5
 800ab36:	6021      	streq	r1, [r4, #0]
 800ab38:	6054      	str	r4, [r2, #4]
 800ab3a:	e7ca      	b.n	800aad2 <_free_r+0x26>
 800ab3c:	b003      	add	sp, #12
 800ab3e:	bd30      	pop	{r4, r5, pc}
 800ab40:	20002014 	.word	0x20002014

0800ab44 <sbrk_aligned>:
 800ab44:	b570      	push	{r4, r5, r6, lr}
 800ab46:	4e0e      	ldr	r6, [pc, #56]	; (800ab80 <sbrk_aligned+0x3c>)
 800ab48:	460c      	mov	r4, r1
 800ab4a:	6831      	ldr	r1, [r6, #0]
 800ab4c:	4605      	mov	r5, r0
 800ab4e:	b911      	cbnz	r1, 800ab56 <sbrk_aligned+0x12>
 800ab50:	f000 f8bc 	bl	800accc <_sbrk_r>
 800ab54:	6030      	str	r0, [r6, #0]
 800ab56:	4621      	mov	r1, r4
 800ab58:	4628      	mov	r0, r5
 800ab5a:	f000 f8b7 	bl	800accc <_sbrk_r>
 800ab5e:	1c43      	adds	r3, r0, #1
 800ab60:	d00a      	beq.n	800ab78 <sbrk_aligned+0x34>
 800ab62:	1cc4      	adds	r4, r0, #3
 800ab64:	f024 0403 	bic.w	r4, r4, #3
 800ab68:	42a0      	cmp	r0, r4
 800ab6a:	d007      	beq.n	800ab7c <sbrk_aligned+0x38>
 800ab6c:	1a21      	subs	r1, r4, r0
 800ab6e:	4628      	mov	r0, r5
 800ab70:	f000 f8ac 	bl	800accc <_sbrk_r>
 800ab74:	3001      	adds	r0, #1
 800ab76:	d101      	bne.n	800ab7c <sbrk_aligned+0x38>
 800ab78:	f04f 34ff 	mov.w	r4, #4294967295
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	bd70      	pop	{r4, r5, r6, pc}
 800ab80:	20002018 	.word	0x20002018

0800ab84 <_malloc_r>:
 800ab84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab88:	1ccd      	adds	r5, r1, #3
 800ab8a:	f025 0503 	bic.w	r5, r5, #3
 800ab8e:	3508      	adds	r5, #8
 800ab90:	2d0c      	cmp	r5, #12
 800ab92:	bf38      	it	cc
 800ab94:	250c      	movcc	r5, #12
 800ab96:	2d00      	cmp	r5, #0
 800ab98:	4607      	mov	r7, r0
 800ab9a:	db01      	blt.n	800aba0 <_malloc_r+0x1c>
 800ab9c:	42a9      	cmp	r1, r5
 800ab9e:	d905      	bls.n	800abac <_malloc_r+0x28>
 800aba0:	230c      	movs	r3, #12
 800aba2:	603b      	str	r3, [r7, #0]
 800aba4:	2600      	movs	r6, #0
 800aba6:	4630      	mov	r0, r6
 800aba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abac:	4e2e      	ldr	r6, [pc, #184]	; (800ac68 <_malloc_r+0xe4>)
 800abae:	f000 f89d 	bl	800acec <__malloc_lock>
 800abb2:	6833      	ldr	r3, [r6, #0]
 800abb4:	461c      	mov	r4, r3
 800abb6:	bb34      	cbnz	r4, 800ac06 <_malloc_r+0x82>
 800abb8:	4629      	mov	r1, r5
 800abba:	4638      	mov	r0, r7
 800abbc:	f7ff ffc2 	bl	800ab44 <sbrk_aligned>
 800abc0:	1c43      	adds	r3, r0, #1
 800abc2:	4604      	mov	r4, r0
 800abc4:	d14d      	bne.n	800ac62 <_malloc_r+0xde>
 800abc6:	6834      	ldr	r4, [r6, #0]
 800abc8:	4626      	mov	r6, r4
 800abca:	2e00      	cmp	r6, #0
 800abcc:	d140      	bne.n	800ac50 <_malloc_r+0xcc>
 800abce:	6823      	ldr	r3, [r4, #0]
 800abd0:	4631      	mov	r1, r6
 800abd2:	4638      	mov	r0, r7
 800abd4:	eb04 0803 	add.w	r8, r4, r3
 800abd8:	f000 f878 	bl	800accc <_sbrk_r>
 800abdc:	4580      	cmp	r8, r0
 800abde:	d13a      	bne.n	800ac56 <_malloc_r+0xd2>
 800abe0:	6821      	ldr	r1, [r4, #0]
 800abe2:	3503      	adds	r5, #3
 800abe4:	1a6d      	subs	r5, r5, r1
 800abe6:	f025 0503 	bic.w	r5, r5, #3
 800abea:	3508      	adds	r5, #8
 800abec:	2d0c      	cmp	r5, #12
 800abee:	bf38      	it	cc
 800abf0:	250c      	movcc	r5, #12
 800abf2:	4629      	mov	r1, r5
 800abf4:	4638      	mov	r0, r7
 800abf6:	f7ff ffa5 	bl	800ab44 <sbrk_aligned>
 800abfa:	3001      	adds	r0, #1
 800abfc:	d02b      	beq.n	800ac56 <_malloc_r+0xd2>
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	442b      	add	r3, r5
 800ac02:	6023      	str	r3, [r4, #0]
 800ac04:	e00e      	b.n	800ac24 <_malloc_r+0xa0>
 800ac06:	6822      	ldr	r2, [r4, #0]
 800ac08:	1b52      	subs	r2, r2, r5
 800ac0a:	d41e      	bmi.n	800ac4a <_malloc_r+0xc6>
 800ac0c:	2a0b      	cmp	r2, #11
 800ac0e:	d916      	bls.n	800ac3e <_malloc_r+0xba>
 800ac10:	1961      	adds	r1, r4, r5
 800ac12:	42a3      	cmp	r3, r4
 800ac14:	6025      	str	r5, [r4, #0]
 800ac16:	bf18      	it	ne
 800ac18:	6059      	strne	r1, [r3, #4]
 800ac1a:	6863      	ldr	r3, [r4, #4]
 800ac1c:	bf08      	it	eq
 800ac1e:	6031      	streq	r1, [r6, #0]
 800ac20:	5162      	str	r2, [r4, r5]
 800ac22:	604b      	str	r3, [r1, #4]
 800ac24:	4638      	mov	r0, r7
 800ac26:	f104 060b 	add.w	r6, r4, #11
 800ac2a:	f000 f865 	bl	800acf8 <__malloc_unlock>
 800ac2e:	f026 0607 	bic.w	r6, r6, #7
 800ac32:	1d23      	adds	r3, r4, #4
 800ac34:	1af2      	subs	r2, r6, r3
 800ac36:	d0b6      	beq.n	800aba6 <_malloc_r+0x22>
 800ac38:	1b9b      	subs	r3, r3, r6
 800ac3a:	50a3      	str	r3, [r4, r2]
 800ac3c:	e7b3      	b.n	800aba6 <_malloc_r+0x22>
 800ac3e:	6862      	ldr	r2, [r4, #4]
 800ac40:	42a3      	cmp	r3, r4
 800ac42:	bf0c      	ite	eq
 800ac44:	6032      	streq	r2, [r6, #0]
 800ac46:	605a      	strne	r2, [r3, #4]
 800ac48:	e7ec      	b.n	800ac24 <_malloc_r+0xa0>
 800ac4a:	4623      	mov	r3, r4
 800ac4c:	6864      	ldr	r4, [r4, #4]
 800ac4e:	e7b2      	b.n	800abb6 <_malloc_r+0x32>
 800ac50:	4634      	mov	r4, r6
 800ac52:	6876      	ldr	r6, [r6, #4]
 800ac54:	e7b9      	b.n	800abca <_malloc_r+0x46>
 800ac56:	230c      	movs	r3, #12
 800ac58:	603b      	str	r3, [r7, #0]
 800ac5a:	4638      	mov	r0, r7
 800ac5c:	f000 f84c 	bl	800acf8 <__malloc_unlock>
 800ac60:	e7a1      	b.n	800aba6 <_malloc_r+0x22>
 800ac62:	6025      	str	r5, [r4, #0]
 800ac64:	e7de      	b.n	800ac24 <_malloc_r+0xa0>
 800ac66:	bf00      	nop
 800ac68:	20002014 	.word	0x20002014

0800ac6c <_realloc_r>:
 800ac6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac70:	4680      	mov	r8, r0
 800ac72:	4614      	mov	r4, r2
 800ac74:	460e      	mov	r6, r1
 800ac76:	b921      	cbnz	r1, 800ac82 <_realloc_r+0x16>
 800ac78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac7c:	4611      	mov	r1, r2
 800ac7e:	f7ff bf81 	b.w	800ab84 <_malloc_r>
 800ac82:	b92a      	cbnz	r2, 800ac90 <_realloc_r+0x24>
 800ac84:	f7ff ff12 	bl	800aaac <_free_r>
 800ac88:	4625      	mov	r5, r4
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac90:	f000 f838 	bl	800ad04 <_malloc_usable_size_r>
 800ac94:	4284      	cmp	r4, r0
 800ac96:	4607      	mov	r7, r0
 800ac98:	d802      	bhi.n	800aca0 <_realloc_r+0x34>
 800ac9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac9e:	d812      	bhi.n	800acc6 <_realloc_r+0x5a>
 800aca0:	4621      	mov	r1, r4
 800aca2:	4640      	mov	r0, r8
 800aca4:	f7ff ff6e 	bl	800ab84 <_malloc_r>
 800aca8:	4605      	mov	r5, r0
 800acaa:	2800      	cmp	r0, #0
 800acac:	d0ed      	beq.n	800ac8a <_realloc_r+0x1e>
 800acae:	42bc      	cmp	r4, r7
 800acb0:	4622      	mov	r2, r4
 800acb2:	4631      	mov	r1, r6
 800acb4:	bf28      	it	cs
 800acb6:	463a      	movcs	r2, r7
 800acb8:	f7ff fed0 	bl	800aa5c <memcpy>
 800acbc:	4631      	mov	r1, r6
 800acbe:	4640      	mov	r0, r8
 800acc0:	f7ff fef4 	bl	800aaac <_free_r>
 800acc4:	e7e1      	b.n	800ac8a <_realloc_r+0x1e>
 800acc6:	4635      	mov	r5, r6
 800acc8:	e7df      	b.n	800ac8a <_realloc_r+0x1e>
	...

0800accc <_sbrk_r>:
 800accc:	b538      	push	{r3, r4, r5, lr}
 800acce:	4d06      	ldr	r5, [pc, #24]	; (800ace8 <_sbrk_r+0x1c>)
 800acd0:	2300      	movs	r3, #0
 800acd2:	4604      	mov	r4, r0
 800acd4:	4608      	mov	r0, r1
 800acd6:	602b      	str	r3, [r5, #0]
 800acd8:	f7f7 f9e0 	bl	800209c <_sbrk>
 800acdc:	1c43      	adds	r3, r0, #1
 800acde:	d102      	bne.n	800ace6 <_sbrk_r+0x1a>
 800ace0:	682b      	ldr	r3, [r5, #0]
 800ace2:	b103      	cbz	r3, 800ace6 <_sbrk_r+0x1a>
 800ace4:	6023      	str	r3, [r4, #0]
 800ace6:	bd38      	pop	{r3, r4, r5, pc}
 800ace8:	2000201c 	.word	0x2000201c

0800acec <__malloc_lock>:
 800acec:	4801      	ldr	r0, [pc, #4]	; (800acf4 <__malloc_lock+0x8>)
 800acee:	f000 b811 	b.w	800ad14 <__retarget_lock_acquire_recursive>
 800acf2:	bf00      	nop
 800acf4:	20002020 	.word	0x20002020

0800acf8 <__malloc_unlock>:
 800acf8:	4801      	ldr	r0, [pc, #4]	; (800ad00 <__malloc_unlock+0x8>)
 800acfa:	f000 b80c 	b.w	800ad16 <__retarget_lock_release_recursive>
 800acfe:	bf00      	nop
 800ad00:	20002020 	.word	0x20002020

0800ad04 <_malloc_usable_size_r>:
 800ad04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad08:	1f18      	subs	r0, r3, #4
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	bfbc      	itt	lt
 800ad0e:	580b      	ldrlt	r3, [r1, r0]
 800ad10:	18c0      	addlt	r0, r0, r3
 800ad12:	4770      	bx	lr

0800ad14 <__retarget_lock_acquire_recursive>:
 800ad14:	4770      	bx	lr

0800ad16 <__retarget_lock_release_recursive>:
 800ad16:	4770      	bx	lr

0800ad18 <_init>:
 800ad18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1a:	bf00      	nop
 800ad1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad1e:	bc08      	pop	{r3}
 800ad20:	469e      	mov	lr, r3
 800ad22:	4770      	bx	lr

0800ad24 <_fini>:
 800ad24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad26:	bf00      	nop
 800ad28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad2a:	bc08      	pop	{r3}
 800ad2c:	469e      	mov	lr, r3
 800ad2e:	4770      	bx	lr
